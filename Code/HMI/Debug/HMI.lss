
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00003f14  00003fa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800142  00800142  0000408a  2**0
                  ALLOC
  3 .stab         0000369c  00000000  00000000  0000408c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c7  00000000  00000000  00007728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000089ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c96d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d13b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <__vector_3>
      10:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <__vector_8>
      24:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 35       	cpi	r26, 0x55	; 85
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 21 13 	call	0x2642	; 0x2642 <main>
      8a:	0c 94 88 1f 	jmp	0x3f10	; 0x3f10 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e2       	ldi	r26, 0x2C	; 44
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 1f 	jmp	0x3e18	; 0x3e18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e2       	ldi	r24, 0x2C	; 44
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 18 1f 	jmp	0x3e30	; 0x3e30 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1c 1f 	jmp	0x3e38	; 0x3e38 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <select_option>:
/*Description:
 * function to take one option from user
 * '+':to open door
 * '-':to change password
 */
uint8 select_option(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 option;
	LCD_clearScreen();
     b5a:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
	LCD_displayString("+: open door");
     b5e:	80 e6       	ldi	r24, 0x60	; 96
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
	LCD_moveCursor(1,0);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_moveCursor>
	LCD_displayString("-: change pass");
     b6e:	8d e6       	ldi	r24, 0x6D	; 109
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <select_option+0x38>
	/*take the option from user*/
	while(option!='+' && option!='-'){
		/* Get the pressed button from keypad */
		option=KEYPAD_getPressedKey();
     b78:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_getPressedKey>
     b7c:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayString("+: open door");
	LCD_moveCursor(1,0);
	LCD_displayString("-: change pass");
	/*take the option from user*/
	while(option!='+' && option!='-'){
     b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b80:	8b 32       	cpi	r24, 0x2B	; 43
     b82:	19 f0       	breq	.+6      	; 0xb8a <select_option+0x44>
     b84:	8f 85       	ldd	r24, Y+15	; 0x0f
     b86:	8d 32       	cpi	r24, 0x2D	; 45
     b88:	b9 f7       	brne	.-18     	; 0xb78 <select_option+0x32>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	aa ef       	ldi	r26, 0xFA	; 250
     b90:	b3 e4       	ldi	r27, 0x43	; 67
     b92:	8b 87       	std	Y+11, r24	; 0x0b
     b94:	9c 87       	std	Y+12, r25	; 0x0c
     b96:	ad 87       	std	Y+13, r26	; 0x0d
     b98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	4a ef       	ldi	r20, 0xFA	; 250
     ba8:	54 e4       	ldi	r21, 0x44	; 68
     baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	8f 83       	std	Y+7, r24	; 0x07
     bb4:	98 87       	std	Y+8, r25	; 0x08
     bb6:	a9 87       	std	Y+9, r26	; 0x09
     bb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bba:	6f 81       	ldd	r22, Y+7	; 0x07
     bbc:	78 85       	ldd	r23, Y+8	; 0x08
     bbe:	89 85       	ldd	r24, Y+9	; 0x09
     bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bce:	88 23       	and	r24, r24
     bd0:	2c f4       	brge	.+10     	; 0xbdc <select_option+0x96>
		__ticks = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9e 83       	std	Y+6, r25	; 0x06
     bd8:	8d 83       	std	Y+5, r24	; 0x05
     bda:	3f c0       	rjmp	.+126    	; 0xc5a <select_option+0x114>
	else if (__tmp > 65535)
     bdc:	6f 81       	ldd	r22, Y+7	; 0x07
     bde:	78 85       	ldd	r23, Y+8	; 0x08
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	9a 85       	ldd	r25, Y+10	; 0x0a
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	3f ef       	ldi	r19, 0xFF	; 255
     be8:	4f e7       	ldi	r20, 0x7F	; 127
     bea:	57 e4       	ldi	r21, 0x47	; 71
     bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	4c f5       	brge	.+82     	; 0xc46 <select_option+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e2       	ldi	r20, 0x20	; 32
     c02:	51 e4       	ldi	r21, 0x41	; 65
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9e 83       	std	Y+6, r25	; 0x06
     c1a:	8d 83       	std	Y+5, r24	; 0x05
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <select_option+0xf6>
     c1e:	88 ec       	ldi	r24, 0xC8	; 200
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <select_option+0xe4>
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c32:	8d 81       	ldd	r24, Y+5	; 0x05
     c34:	9e 81       	ldd	r25, Y+6	; 0x06
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9e 83       	std	Y+6, r25	; 0x06
     c3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	69 f7       	brne	.-38     	; 0xc1e <select_option+0xd8>
     c44:	14 c0       	rjmp	.+40     	; 0xc6e <select_option+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c46:	6f 81       	ldd	r22, Y+7	; 0x07
     c48:	78 85       	ldd	r23, Y+8	; 0x08
     c4a:	89 85       	ldd	r24, Y+9	; 0x09
     c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	9e 83       	std	Y+6, r25	; 0x06
     c58:	8d 83       	std	Y+5, r24	; 0x05
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	9e 81       	ldd	r25, Y+6	; 0x06
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <select_option+0x120>
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
		/* Get the pressed button from keypad */
		option=KEYPAD_getPressedKey();
	}
	_delay_ms(500);
	LCD_clearScreen();/*clear screen*/
     c6e:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
	return option;/*return the choise*/
     c72:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     c74:	2f 96       	adiw	r28, 0x0f	; 15
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <first_login_password_enter>:
 * take two pointer ,to ask user to enter password for two time
 * and compare two password , so return the result
 * 0: for mismatch
 * 1:for match
 */
uint8 first_login_password_enter(uint8 *pass1,uint8 *pass2){
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	ee 97       	sbiw	r28, 0x3e	; 62
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	9c af       	std	Y+60, r25	; 0x3c
     ca0:	8b af       	std	Y+59, r24	; 0x3b
     ca2:	7e af       	std	Y+62, r23	; 0x3e
     ca4:	6d af       	std	Y+61, r22	; 0x3d
	uint8 count ,res=1; /*local variable*/
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	89 af       	std	Y+57, r24	; 0x39
	LCD_clearScreen();/*clear screen*/
     caa:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
	LCD_displayString("enter password");
     cae:	8c e7       	ldi	r24, 0x7C	; 124
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
	/*take first password form user*/
	for(count =0;count<5 ;count++){
     cb6:	1a ae       	std	Y+58, r1	; 0x3a
     cb8:	88 c0       	rjmp	.+272    	; 0xdca <first_login_password_enter+0x144>
		/*move cursor as required*/
		LCD_moveCursor(1,count);
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	6a ad       	ldd	r22, Y+58	; 0x3a
     cbe:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_moveCursor>
		/* Get the pressed button from keypad and store it in array*/
		pass1[count] = KEYPAD_getPressedKey();
     cc2:	8a ad       	ldd	r24, Y+58	; 0x3a
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	8b ad       	ldd	r24, Y+59	; 0x3b
     cca:	9c ad       	ldd	r25, Y+60	; 0x3c
     ccc:	8c 01       	movw	r16, r24
     cce:	02 0f       	add	r16, r18
     cd0:	13 1f       	adc	r17, r19
     cd2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_getPressedKey>
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 83       	st	Z, r24

		/*display the password as '*****' */
		LCD_displayCharacter('*');
     cda:	8a e2       	ldi	r24, 0x2A	; 42
     cdc:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_displayCharacter>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	aa ef       	ldi	r26, 0xFA	; 250
     ce6:	b3 e4       	ldi	r27, 0x43	; 67
     ce8:	8d ab       	std	Y+53, r24	; 0x35
     cea:	9e ab       	std	Y+54, r25	; 0x36
     cec:	af ab       	std	Y+55, r26	; 0x37
     cee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf0:	6d a9       	ldd	r22, Y+53	; 0x35
     cf2:	7e a9       	ldd	r23, Y+54	; 0x36
     cf4:	8f a9       	ldd	r24, Y+55	; 0x37
     cf6:	98 ad       	ldd	r25, Y+56	; 0x38
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4a ef       	ldi	r20, 0xFA	; 250
     cfe:	54 e4       	ldi	r21, 0x44	; 68
     d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	89 ab       	std	Y+49, r24	; 0x31
     d0a:	9a ab       	std	Y+50, r25	; 0x32
     d0c:	ab ab       	std	Y+51, r26	; 0x33
     d0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d10:	69 a9       	ldd	r22, Y+49	; 0x31
     d12:	7a a9       	ldd	r23, Y+50	; 0x32
     d14:	8b a9       	ldd	r24, Y+51	; 0x33
     d16:	9c a9       	ldd	r25, Y+52	; 0x34
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d24:	88 23       	and	r24, r24
     d26:	2c f4       	brge	.+10     	; 0xd32 <first_login_password_enter+0xac>
		__ticks = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	98 ab       	std	Y+48, r25	; 0x30
     d2e:	8f a7       	std	Y+47, r24	; 0x2f
     d30:	3f c0       	rjmp	.+126    	; 0xdb0 <first_login_password_enter+0x12a>
	else if (__tmp > 65535)
     d32:	69 a9       	ldd	r22, Y+49	; 0x31
     d34:	7a a9       	ldd	r23, Y+50	; 0x32
     d36:	8b a9       	ldd	r24, Y+51	; 0x33
     d38:	9c a9       	ldd	r25, Y+52	; 0x34
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	3f ef       	ldi	r19, 0xFF	; 255
     d3e:	4f e7       	ldi	r20, 0x7F	; 127
     d40:	57 e4       	ldi	r21, 0x47	; 71
     d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d46:	18 16       	cp	r1, r24
     d48:	4c f5       	brge	.+82     	; 0xd9c <first_login_password_enter+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4a:	6d a9       	ldd	r22, Y+53	; 0x35
     d4c:	7e a9       	ldd	r23, Y+54	; 0x36
     d4e:	8f a9       	ldd	r24, Y+55	; 0x37
     d50:	98 ad       	ldd	r25, Y+56	; 0x38
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	98 ab       	std	Y+48, r25	; 0x30
     d70:	8f a7       	std	Y+47, r24	; 0x2f
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <first_login_password_enter+0x10c>
     d74:	88 ec       	ldi	r24, 0xC8	; 200
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	9e a7       	std	Y+46, r25	; 0x2e
     d7a:	8d a7       	std	Y+45, r24	; 0x2d
     d7c:	8d a5       	ldd	r24, Y+45	; 0x2d
     d7e:	9e a5       	ldd	r25, Y+46	; 0x2e
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <first_login_password_enter+0xfa>
     d84:	9e a7       	std	Y+46, r25	; 0x2e
     d86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d88:	8f a5       	ldd	r24, Y+47	; 0x2f
     d8a:	98 a9       	ldd	r25, Y+48	; 0x30
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	98 ab       	std	Y+48, r25	; 0x30
     d90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d92:	8f a5       	ldd	r24, Y+47	; 0x2f
     d94:	98 a9       	ldd	r25, Y+48	; 0x30
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	69 f7       	brne	.-38     	; 0xd74 <first_login_password_enter+0xee>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <first_login_password_enter+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9c:	69 a9       	ldd	r22, Y+49	; 0x31
     d9e:	7a a9       	ldd	r23, Y+50	; 0x32
     da0:	8b a9       	ldd	r24, Y+51	; 0x33
     da2:	9c a9       	ldd	r25, Y+52	; 0x34
     da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	98 ab       	std	Y+48, r25	; 0x30
     dae:	8f a7       	std	Y+47, r24	; 0x2f
     db0:	8f a5       	ldd	r24, Y+47	; 0x2f
     db2:	98 a9       	ldd	r25, Y+48	; 0x30
     db4:	9c a7       	std	Y+44, r25	; 0x2c
     db6:	8b a7       	std	Y+43, r24	; 0x2b
     db8:	8b a5       	ldd	r24, Y+43	; 0x2b
     dba:	9c a5       	ldd	r25, Y+44	; 0x2c
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <first_login_password_enter+0x136>
     dc0:	9c a7       	std	Y+44, r25	; 0x2c
     dc2:	8b a7       	std	Y+43, r24	; 0x2b
uint8 first_login_password_enter(uint8 *pass1,uint8 *pass2){
	uint8 count ,res=1; /*local variable*/
	LCD_clearScreen();/*clear screen*/
	LCD_displayString("enter password");
	/*take first password form user*/
	for(count =0;count<5 ;count++){
     dc4:	8a ad       	ldd	r24, Y+58	; 0x3a
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	8a af       	std	Y+58, r24	; 0x3a
     dca:	8a ad       	ldd	r24, Y+58	; 0x3a
     dcc:	85 30       	cpi	r24, 0x05	; 5
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <first_login_password_enter+0x14c>
     dd0:	74 cf       	rjmp	.-280    	; 0xcba <first_login_password_enter+0x34>
		/*delay to take anther pressed button from keypad  */
		_delay_ms(500);

	}
	/*after enter password click '=' to move to second password*/
	while( ( KEYPAD_getPressedKey() )!= '='){}
     dd2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_getPressedKey>
     dd6:	8d 33       	cpi	r24, 0x3D	; 61
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <first_login_password_enter+0x14c>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	aa ef       	ldi	r26, 0xFA	; 250
     de0:	b3 e4       	ldi	r27, 0x43	; 67
     de2:	8f a3       	std	Y+39, r24	; 0x27
     de4:	98 a7       	std	Y+40, r25	; 0x28
     de6:	a9 a7       	std	Y+41, r26	; 0x29
     de8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	6f a1       	ldd	r22, Y+39	; 0x27
     dec:	78 a5       	ldd	r23, Y+40	; 0x28
     dee:	89 a5       	ldd	r24, Y+41	; 0x29
     df0:	9a a5       	ldd	r25, Y+42	; 0x2a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a ef       	ldi	r20, 0xFA	; 250
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8b a3       	std	Y+35, r24	; 0x23
     e04:	9c a3       	std	Y+36, r25	; 0x24
     e06:	ad a3       	std	Y+37, r26	; 0x25
     e08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e0a:	6b a1       	ldd	r22, Y+35	; 0x23
     e0c:	7c a1       	ldd	r23, Y+36	; 0x24
     e0e:	8d a1       	ldd	r24, Y+37	; 0x25
     e10:	9e a1       	ldd	r25, Y+38	; 0x26
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <first_login_password_enter+0x1a6>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9a a3       	std	Y+34, r25	; 0x22
     e28:	89 a3       	std	Y+33, r24	; 0x21
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <first_login_password_enter+0x224>
	else if (__tmp > 65535)
     e2c:	6b a1       	ldd	r22, Y+35	; 0x23
     e2e:	7c a1       	ldd	r23, Y+36	; 0x24
     e30:	8d a1       	ldd	r24, Y+37	; 0x25
     e32:	9e a1       	ldd	r25, Y+38	; 0x26
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <first_login_password_enter+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	6f a1       	ldd	r22, Y+39	; 0x27
     e46:	78 a5       	ldd	r23, Y+40	; 0x28
     e48:	89 a5       	ldd	r24, Y+41	; 0x29
     e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9a a3       	std	Y+34, r25	; 0x22
     e6a:	89 a3       	std	Y+33, r24	; 0x21
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <first_login_password_enter+0x206>
     e6e:	88 ec       	ldi	r24, 0xC8	; 200
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	98 a3       	std	Y+32, r25	; 0x20
     e74:	8f 8f       	std	Y+31, r24	; 0x1f
     e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e78:	98 a1       	ldd	r25, Y+32	; 0x20
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <first_login_password_enter+0x1f4>
     e7e:	98 a3       	std	Y+32, r25	; 0x20
     e80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	89 a1       	ldd	r24, Y+33	; 0x21
     e84:	9a a1       	ldd	r25, Y+34	; 0x22
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9a a3       	std	Y+34, r25	; 0x22
     e8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	89 a1       	ldd	r24, Y+33	; 0x21
     e8e:	9a a1       	ldd	r25, Y+34	; 0x22
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <first_login_password_enter+0x1e8>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <first_login_password_enter+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6b a1       	ldd	r22, Y+35	; 0x23
     e98:	7c a1       	ldd	r23, Y+36	; 0x24
     e9a:	8d a1       	ldd	r24, Y+37	; 0x25
     e9c:	9e a1       	ldd	r25, Y+38	; 0x26
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9a a3       	std	Y+34, r25	; 0x22
     ea8:	89 a3       	std	Y+33, r24	; 0x21
     eaa:	89 a1       	ldd	r24, Y+33	; 0x21
     eac:	9a a1       	ldd	r25, Y+34	; 0x22
     eae:	9e 8f       	std	Y+30, r25	; 0x1e
     eb0:	8d 8f       	std	Y+29, r24	; 0x1d
     eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <first_login_password_enter+0x230>
     eba:	9e 8f       	std	Y+30, r25	; 0x1e
     ebc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*delay to take anther pressed button from keypad  */
	_delay_ms(500);
	LCD_clearScreen();/*clear screen*/
     ebe:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
	LCD_displayString("confirm password");
     ec2:	8b e8       	ldi	r24, 0x8B	; 139
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
	/*take second password form user*/
	for(count =0;count<5 ;count++){
     eca:	1a ae       	std	Y+58, r1	; 0x3a
     ecc:	88 c0       	rjmp	.+272    	; 0xfde <first_login_password_enter+0x358>
		/*move cursor as required*/
		LCD_moveCursor(1,count);
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	6a ad       	ldd	r22, Y+58	; 0x3a
     ed2:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_moveCursor>
		/* Get the pressed button from keypad and store it in array*/
		pass2[count] = KEYPAD_getPressedKey();
     ed6:	8a ad       	ldd	r24, Y+58	; 0x3a
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8d ad       	ldd	r24, Y+61	; 0x3d
     ede:	9e ad       	ldd	r25, Y+62	; 0x3e
     ee0:	8c 01       	movw	r16, r24
     ee2:	02 0f       	add	r16, r18
     ee4:	13 1f       	adc	r17, r19
     ee6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_getPressedKey>
     eea:	f8 01       	movw	r30, r16
     eec:	80 83       	st	Z, r24
		/*display the password as '*****' */
		LCD_displayCharacter('*');
     eee:	8a e2       	ldi	r24, 0x2A	; 42
     ef0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_displayCharacter>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	aa ef       	ldi	r26, 0xFA	; 250
     efa:	b3 e4       	ldi	r27, 0x43	; 67
     efc:	89 8f       	std	Y+25, r24	; 0x19
     efe:	9a 8f       	std	Y+26, r25	; 0x1a
     f00:	ab 8f       	std	Y+27, r26	; 0x1b
     f02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	69 8d       	ldd	r22, Y+25	; 0x19
     f06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a ef       	ldi	r20, 0xFA	; 250
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8d 8b       	std	Y+21, r24	; 0x15
     f1e:	9e 8b       	std	Y+22, r25	; 0x16
     f20:	af 8b       	std	Y+23, r26	; 0x17
     f22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f24:	6d 89       	ldd	r22, Y+21	; 0x15
     f26:	7e 89       	ldd	r23, Y+22	; 0x16
     f28:	8f 89       	ldd	r24, Y+23	; 0x17
     f2a:	98 8d       	ldd	r25, Y+24	; 0x18
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f38:	88 23       	and	r24, r24
     f3a:	2c f4       	brge	.+10     	; 0xf46 <first_login_password_enter+0x2c0>
		__ticks = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9c 8b       	std	Y+20, r25	; 0x14
     f42:	8b 8b       	std	Y+19, r24	; 0x13
     f44:	3f c0       	rjmp	.+126    	; 0xfc4 <first_login_password_enter+0x33e>
	else if (__tmp > 65535)
     f46:	6d 89       	ldd	r22, Y+21	; 0x15
     f48:	7e 89       	ldd	r23, Y+22	; 0x16
     f4a:	8f 89       	ldd	r24, Y+23	; 0x17
     f4c:	98 8d       	ldd	r25, Y+24	; 0x18
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	4c f5       	brge	.+82     	; 0xfb0 <first_login_password_enter+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	69 8d       	ldd	r22, Y+25	; 0x19
     f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9c 8b       	std	Y+20, r25	; 0x14
     f84:	8b 8b       	std	Y+19, r24	; 0x13
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <first_login_password_enter+0x320>
     f88:	88 ec       	ldi	r24, 0xC8	; 200
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9a 8b       	std	Y+18, r25	; 0x12
     f8e:	89 8b       	std	Y+17, r24	; 0x11
     f90:	89 89       	ldd	r24, Y+17	; 0x11
     f92:	9a 89       	ldd	r25, Y+18	; 0x12
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <first_login_password_enter+0x30e>
     f98:	9a 8b       	std	Y+18, r25	; 0x12
     f9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	8b 89       	ldd	r24, Y+19	; 0x13
     f9e:	9c 89       	ldd	r25, Y+20	; 0x14
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9c 8b       	std	Y+20, r25	; 0x14
     fa4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8b 89       	ldd	r24, Y+19	; 0x13
     fa8:	9c 89       	ldd	r25, Y+20	; 0x14
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f7       	brne	.-38     	; 0xf88 <first_login_password_enter+0x302>
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <first_login_password_enter+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6d 89       	ldd	r22, Y+21	; 0x15
     fb2:	7e 89       	ldd	r23, Y+22	; 0x16
     fb4:	8f 89       	ldd	r24, Y+23	; 0x17
     fb6:	98 8d       	ldd	r25, Y+24	; 0x18
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9c 8b       	std	Y+20, r25	; 0x14
     fc2:	8b 8b       	std	Y+19, r24	; 0x13
     fc4:	8b 89       	ldd	r24, Y+19	; 0x13
     fc6:	9c 89       	ldd	r25, Y+20	; 0x14
     fc8:	98 8b       	std	Y+16, r25	; 0x10
     fca:	8f 87       	std	Y+15, r24	; 0x0f
     fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fce:	98 89       	ldd	r25, Y+16	; 0x10
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <first_login_password_enter+0x34a>
     fd4:	98 8b       	std	Y+16, r25	; 0x10
     fd6:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay to take anther pressed button from keypad  */
	_delay_ms(500);
	LCD_clearScreen();/*clear screen*/
	LCD_displayString("confirm password");
	/*take second password form user*/
	for(count =0;count<5 ;count++){
     fd8:	8a ad       	ldd	r24, Y+58	; 0x3a
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	8a af       	std	Y+58, r24	; 0x3a
     fde:	8a ad       	ldd	r24, Y+58	; 0x3a
     fe0:	85 30       	cpi	r24, 0x05	; 5
     fe2:	08 f4       	brcc	.+2      	; 0xfe6 <first_login_password_enter+0x360>
     fe4:	74 cf       	rjmp	.-280    	; 0xece <first_login_password_enter+0x248>
		/*delay to take anther pressed button from keypad  */
		_delay_ms(500);

	}
	/*after enter password click '=' to move to compare two password*/
	while( ( KEYPAD_getPressedKey() )!= '='){}
     fe6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_getPressedKey>
     fea:	8d 33       	cpi	r24, 0x3D	; 61
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <first_login_password_enter+0x360>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	aa ef       	ldi	r26, 0xFA	; 250
     ff4:	b3 e4       	ldi	r27, 0x43	; 67
     ff6:	8b 87       	std	Y+11, r24	; 0x0b
     ff8:	9c 87       	std	Y+12, r25	; 0x0c
     ffa:	ad 87       	std	Y+13, r26	; 0x0d
     ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1000:	7c 85       	ldd	r23, Y+12	; 0x0c
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	4a ef       	ldi	r20, 0xFA	; 250
    100c:	54 e4       	ldi	r21, 0x44	; 68
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8f 83       	std	Y+7, r24	; 0x07
    1018:	98 87       	std	Y+8, r25	; 0x08
    101a:	a9 87       	std	Y+9, r26	; 0x09
    101c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    101e:	6f 81       	ldd	r22, Y+7	; 0x07
    1020:	78 85       	ldd	r23, Y+8	; 0x08
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <first_login_password_enter+0x3ba>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	3f c0       	rjmp	.+126    	; 0x10be <first_login_password_enter+0x438>
	else if (__tmp > 65535)
    1040:	6f 81       	ldd	r22, Y+7	; 0x07
    1042:	78 85       	ldd	r23, Y+8	; 0x08
    1044:	89 85       	ldd	r24, Y+9	; 0x09
    1046:	9a 85       	ldd	r25, Y+10	; 0x0a
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <first_login_password_enter+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	6b 85       	ldd	r22, Y+11	; 0x0b
    105a:	7c 85       	ldd	r23, Y+12	; 0x0c
    105c:	8d 85       	ldd	r24, Y+13	; 0x0d
    105e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9e 83       	std	Y+6, r25	; 0x06
    107e:	8d 83       	std	Y+5, r24	; 0x05
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <first_login_password_enter+0x41a>
    1082:	88 ec       	ldi	r24, 0xC8	; 200
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <first_login_password_enter+0x408>
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <first_login_password_enter+0x3fc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <first_login_password_enter+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9e 83       	std	Y+6, r25	; 0x06
    10bc:	8d 83       	std	Y+5, r24	; 0x05
    10be:	8d 81       	ldd	r24, Y+5	; 0x05
    10c0:	9e 81       	ldd	r25, Y+6	; 0x06
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <first_login_password_enter+0x444>
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
	/*delay to take anther pressed button from keypad  */
	_delay_ms(500);
	LCD_clearScreen();
    10d2:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>

	/*compare two password*/
	for(count=0 ; count<5;count++){
    10d6:	1a ae       	std	Y+58, r1	; 0x3a
    10d8:	18 c0       	rjmp	.+48     	; 0x110a <first_login_password_enter+0x484>
		if(pass1[count]!=pass2[count]){
    10da:	8a ad       	ldd	r24, Y+58	; 0x3a
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    10e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	40 81       	ld	r20, Z
    10ec:	8a ad       	ldd	r24, Y+58	; 0x3a
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    10f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    10f6:	fc 01       	movw	r30, r24
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	80 81       	ld	r24, Z
    10fe:	48 17       	cp	r20, r24
    1100:	09 f0       	breq	.+2      	; 0x1104 <first_login_password_enter+0x47e>
			res=0;/*in case two password not equal*/
    1102:	19 ae       	std	Y+57, r1	; 0x39
	/*delay to take anther pressed button from keypad  */
	_delay_ms(500);
	LCD_clearScreen();

	/*compare two password*/
	for(count=0 ; count<5;count++){
    1104:	8a ad       	ldd	r24, Y+58	; 0x3a
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	8a af       	std	Y+58, r24	; 0x3a
    110a:	8a ad       	ldd	r24, Y+58	; 0x3a
    110c:	85 30       	cpi	r24, 0x05	; 5
    110e:	28 f3       	brcs	.-54     	; 0x10da <first_login_password_enter+0x454>
	}
	/*return :
	 * 0 :in case two password not equal
	 * 1 :in case two password equal
	 */
	return res;
    1110:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1112:	ee 96       	adiw	r28, 0x3e	; 62
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <enter_password>:
/*Description:
 * take password from user to open door or to change password
 */
void enter_password(uint8 *pass){
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	6f 97       	sbiw	r28, 0x1f	; 31
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	9f 8f       	std	Y+31, r25	; 0x1f
    1142:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 count;/*local variable*/
	LCD_clearScreen();
    1144:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
	LCD_displayString("enter password");
    1148:	8c e7       	ldi	r24, 0x7C	; 124
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
	/*second password form user*/
	for(count =0;count<5 ;count++){
    1150:	1d 8e       	std	Y+29, r1	; 0x1d
    1152:	88 c0       	rjmp	.+272    	; 0x1264 <enter_password+0x13c>
		/*move cursor as required*/
		LCD_moveCursor(1,count);
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1158:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_moveCursor>
		/* Get the pressed button from keypad and store it in array*/
		pass[count] = KEYPAD_getPressedKey();
    115c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1164:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1166:	8c 01       	movw	r16, r24
    1168:	02 0f       	add	r16, r18
    116a:	13 1f       	adc	r17, r19
    116c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_getPressedKey>
    1170:	f8 01       	movw	r30, r16
    1172:	80 83       	st	Z, r24

		/*display the password as '*****' */
		LCD_displayCharacter('*');
    1174:	8a e2       	ldi	r24, 0x2A	; 42
    1176:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_displayCharacter>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	aa ef       	ldi	r26, 0xFA	; 250
    1180:	b3 e4       	ldi	r27, 0x43	; 67
    1182:	89 8f       	std	Y+25, r24	; 0x19
    1184:	9a 8f       	std	Y+26, r25	; 0x1a
    1186:	ab 8f       	std	Y+27, r26	; 0x1b
    1188:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118a:	69 8d       	ldd	r22, Y+25	; 0x19
    118c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1190:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	4a ef       	ldi	r20, 0xFA	; 250
    1198:	54 e4       	ldi	r21, 0x44	; 68
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	8d 8b       	std	Y+21, r24	; 0x15
    11a4:	9e 8b       	std	Y+22, r25	; 0x16
    11a6:	af 8b       	std	Y+23, r26	; 0x17
    11a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11aa:	6d 89       	ldd	r22, Y+21	; 0x15
    11ac:	7e 89       	ldd	r23, Y+22	; 0x16
    11ae:	8f 89       	ldd	r24, Y+23	; 0x17
    11b0:	98 8d       	ldd	r25, Y+24	; 0x18
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e8       	ldi	r20, 0x80	; 128
    11b8:	5f e3       	ldi	r21, 0x3F	; 63
    11ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11be:	88 23       	and	r24, r24
    11c0:	2c f4       	brge	.+10     	; 0x11cc <enter_password+0xa4>
		__ticks = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9c 8b       	std	Y+20, r25	; 0x14
    11c8:	8b 8b       	std	Y+19, r24	; 0x13
    11ca:	3f c0       	rjmp	.+126    	; 0x124a <enter_password+0x122>
	else if (__tmp > 65535)
    11cc:	6d 89       	ldd	r22, Y+21	; 0x15
    11ce:	7e 89       	ldd	r23, Y+22	; 0x16
    11d0:	8f 89       	ldd	r24, Y+23	; 0x17
    11d2:	98 8d       	ldd	r25, Y+24	; 0x18
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	4f e7       	ldi	r20, 0x7F	; 127
    11da:	57 e4       	ldi	r21, 0x47	; 71
    11dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	4c f5       	brge	.+82     	; 0x1236 <enter_password+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e4:	69 8d       	ldd	r22, Y+25	; 0x19
    11e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e2       	ldi	r20, 0x20	; 32
    11f2:	51 e4       	ldi	r21, 0x41	; 65
    11f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9c 8b       	std	Y+20, r25	; 0x14
    120a:	8b 8b       	std	Y+19, r24	; 0x13
    120c:	0f c0       	rjmp	.+30     	; 0x122c <enter_password+0x104>
    120e:	88 ec       	ldi	r24, 0xC8	; 200
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9a 8b       	std	Y+18, r25	; 0x12
    1214:	89 8b       	std	Y+17, r24	; 0x11
    1216:	89 89       	ldd	r24, Y+17	; 0x11
    1218:	9a 89       	ldd	r25, Y+18	; 0x12
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <enter_password+0xf2>
    121e:	9a 8b       	std	Y+18, r25	; 0x12
    1220:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	8b 89       	ldd	r24, Y+19	; 0x13
    1224:	9c 89       	ldd	r25, Y+20	; 0x14
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	9c 8b       	std	Y+20, r25	; 0x14
    122a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122c:	8b 89       	ldd	r24, Y+19	; 0x13
    122e:	9c 89       	ldd	r25, Y+20	; 0x14
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	69 f7       	brne	.-38     	; 0x120e <enter_password+0xe6>
    1234:	14 c0       	rjmp	.+40     	; 0x125e <enter_password+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1236:	6d 89       	ldd	r22, Y+21	; 0x15
    1238:	7e 89       	ldd	r23, Y+22	; 0x16
    123a:	8f 89       	ldd	r24, Y+23	; 0x17
    123c:	98 8d       	ldd	r25, Y+24	; 0x18
    123e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9c 8b       	std	Y+20, r25	; 0x14
    1248:	8b 8b       	std	Y+19, r24	; 0x13
    124a:	8b 89       	ldd	r24, Y+19	; 0x13
    124c:	9c 89       	ldd	r25, Y+20	; 0x14
    124e:	98 8b       	std	Y+16, r25	; 0x10
    1250:	8f 87       	std	Y+15, r24	; 0x0f
    1252:	8f 85       	ldd	r24, Y+15	; 0x0f
    1254:	98 89       	ldd	r25, Y+16	; 0x10
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <enter_password+0x12e>
    125a:	98 8b       	std	Y+16, r25	; 0x10
    125c:	8f 87       	std	Y+15, r24	; 0x0f
void enter_password(uint8 *pass){
	uint8 count;/*local variable*/
	LCD_clearScreen();
	LCD_displayString("enter password");
	/*second password form user*/
	for(count =0;count<5 ;count++){
    125e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	8d 8f       	std	Y+29, r24	; 0x1d
    1264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1266:	85 30       	cpi	r24, 0x05	; 5
    1268:	08 f4       	brcc	.+2      	; 0x126c <enter_password+0x144>
    126a:	74 cf       	rjmp	.-280    	; 0x1154 <enter_password+0x2c>
		/*delay to take anther pressed button from keypad  */
		_delay_ms(500);

	}
	/*after enter password click '=' to move to other instruction*/
	while( ( KEYPAD_getPressedKey() )!= '='){}
    126c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_getPressedKey>
    1270:	8d 33       	cpi	r24, 0x3D	; 61
    1272:	e1 f7       	brne	.-8      	; 0x126c <enter_password+0x144>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	aa ef       	ldi	r26, 0xFA	; 250
    127a:	b3 e4       	ldi	r27, 0x43	; 67
    127c:	8b 87       	std	Y+11, r24	; 0x0b
    127e:	9c 87       	std	Y+12, r25	; 0x0c
    1280:	ad 87       	std	Y+13, r26	; 0x0d
    1282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a ef       	ldi	r20, 0xFA	; 250
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8f 83       	std	Y+7, r24	; 0x07
    129e:	98 87       	std	Y+8, r25	; 0x08
    12a0:	a9 87       	std	Y+9, r26	; 0x09
    12a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <enter_password+0x19e>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <enter_password+0x21c>
	else if (__tmp > 65535)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <enter_password+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <enter_password+0x1fe>
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	8b 83       	std	Y+3, r24	; 0x03
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <enter_password+0x1ec>
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <enter_password+0x1e0>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <enter_password+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	6f 81       	ldd	r22, Y+7	; 0x07
    1332:	78 85       	ldd	r23, Y+8	; 0x08
    1334:	89 85       	ldd	r24, Y+9	; 0x09
    1336:	9a 85       	ldd	r25, Y+10	; 0x0a
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <enter_password+0x228>
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
	/*delay to take anther pressed button from keypad  */
	_delay_ms(500);
	LCD_clearScreen();
    1358:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
}
    135c:	6f 96       	adiw	r28, 0x1f	; 31
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <Display>:
/*
 * Description:
 * Display on screen during door is open or close
 *
 */
void Display(void){
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
	g_tick++;/*increment every 1 second*/
    137a:	80 91 42 01 	lds	r24, 0x0142
    137e:	90 91 43 01 	lds	r25, 0x0143
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	90 93 43 01 	sts	0x0143, r25
    1388:	80 93 42 01 	sts	0x0142, r24
	if(g_tick>=0 &&g_tick < 18){
    138c:	80 91 42 01 	lds	r24, 0x0142
    1390:	90 91 43 01 	lds	r25, 0x0143
    1394:	82 31       	cpi	r24, 0x12	; 18
    1396:	91 05       	cpc	r25, r1
    1398:	40 f4       	brcc	.+16     	; 0x13aa <Display+0x38>
		/*display for 18 second */
		LCD_displayStringRowColumn(0,0,"Door is Opening");
    139a:	2c e9       	ldi	r18, 0x9C	; 156
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	a9 01       	movw	r20, r18
    13a4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
    13a8:	27 c0       	rjmp	.+78     	; 0x13f8 <Display+0x86>

	}else if(g_tick>=18&&g_tick<33){
    13aa:	80 91 42 01 	lds	r24, 0x0142
    13ae:	90 91 43 01 	lds	r25, 0x0143
    13b2:	82 31       	cpi	r24, 0x12	; 18
    13b4:	91 05       	cpc	r25, r1
    13b6:	78 f0       	brcs	.+30     	; 0x13d6 <Display+0x64>
    13b8:	80 91 42 01 	lds	r24, 0x0142
    13bc:	90 91 43 01 	lds	r25, 0x0143
    13c0:	81 32       	cpi	r24, 0x21	; 33
    13c2:	91 05       	cpc	r25, r1
    13c4:	40 f4       	brcc	.+16     	; 0x13d6 <Display+0x64>
		/*display for 15 second */
		LCD_displayStringRowColumn(0,0,"Door is Closing  ");
    13c6:	2c ea       	ldi	r18, 0xAC	; 172
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
    13d4:	11 c0       	rjmp	.+34     	; 0x13f8 <Display+0x86>

	}
	else if(g_tick==33){
    13d6:	80 91 42 01 	lds	r24, 0x0142
    13da:	90 91 43 01 	lds	r25, 0x0143
    13de:	81 32       	cpi	r24, 0x21	; 33
    13e0:	91 05       	cpc	r25, r1
    13e2:	51 f4       	brne	.+20     	; 0x13f8 <Display+0x86>
		/*deInit timer 1*/
		Timer_deInit(Timer_1);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Timer_deInit>
		/*clear g_tick*/
		g_tick=0;
    13ea:	10 92 43 01 	sts	0x0143, r1
    13ee:	10 92 42 01 	sts	0x0142, r1
		/*set holed_system*/
		holed_system=1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	80 93 44 01 	sts	0x0144, r24
	}
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <error_3_password>:
/*
 * Description:
 * if user enter password 3 time error ,display on screen
 */
void error_3_password(void){
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	g_tick++;/*increment every 1 second*/
    1406:	80 91 42 01 	lds	r24, 0x0142
    140a:	90 91 43 01 	lds	r25, 0x0143
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	90 93 43 01 	sts	0x0143, r25
    1414:	80 93 42 01 	sts	0x0142, r24
	if(g_tick>=0 && g_tick < 60){
    1418:	80 91 42 01 	lds	r24, 0x0142
    141c:	90 91 43 01 	lds	r25, 0x0143
    1420:	8c 33       	cpi	r24, 0x3C	; 60
    1422:	91 05       	cpc	r25, r1
    1424:	40 f4       	brcc	.+16     	; 0x1436 <error_3_password+0x38>
		/*display for 60 second */
		LCD_displayStringRowColumn(0,0,"EMSK HARAMY !!!");
    1426:	2e eb       	ldi	r18, 0xBE	; 190
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
    1434:	11 c0       	rjmp	.+34     	; 0x1458 <error_3_password+0x5a>
	}else if(g_tick==60){
    1436:	80 91 42 01 	lds	r24, 0x0142
    143a:	90 91 43 01 	lds	r25, 0x0143
    143e:	8c 33       	cpi	r24, 0x3C	; 60
    1440:	91 05       	cpc	r25, r1
    1442:	51 f4       	brne	.+20     	; 0x1458 <error_3_password+0x5a>
		/*deInit timer 1*/
		Timer_deInit(Timer_1);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <Timer_deInit>
		/*clear g_tick*/
		g_tick=0;
    144a:	10 92 43 01 	sts	0x0143, r1
    144e:	10 92 42 01 	sts	0x0142, r1
		/*set holed_system*/
		holed_system=1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 44 01 	sts	0x0144, r24
	}
}
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <GPIO_setupPinDirection+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <GPIO_setupPinDirection+0x8>
    1466:	0f 92       	push	r0
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
    1470:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 30       	cpi	r24, 0x08	; 8
    1476:	08 f0       	brcs	.+2      	; 0x147a <GPIO_setupPinDirection+0x1c>
    1478:	d5 c0       	rjmp	.+426    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	08 f0       	brcs	.+2      	; 0x1482 <GPIO_setupPinDirection+0x24>
    1480:	d1 c0       	rjmp	.+418    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3d 83       	std	Y+5, r19	; 0x05
    148a:	2c 83       	std	Y+4, r18	; 0x04
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	09 f4       	brne	.+2      	; 0x1498 <GPIO_setupPinDirection+0x3a>
    1496:	43 c0       	rjmp	.+134    	; 0x151e <GPIO_setupPinDirection+0xc0>
    1498:	2c 81       	ldd	r18, Y+4	; 0x04
    149a:	3d 81       	ldd	r19, Y+5	; 0x05
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	2c f4       	brge	.+10     	; 0x14ac <GPIO_setupPinDirection+0x4e>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	71 f0       	breq	.+28     	; 0x14c6 <GPIO_setupPinDirection+0x68>
    14aa:	bc c0       	rjmp	.+376    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
    14ac:	2c 81       	ldd	r18, Y+4	; 0x04
    14ae:	3d 81       	ldd	r19, Y+5	; 0x05
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <GPIO_setupPinDirection+0x5a>
    14b6:	5f c0       	rjmp	.+190    	; 0x1576 <GPIO_setupPinDirection+0x118>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	83 30       	cpi	r24, 0x03	; 3
    14be:	91 05       	cpc	r25, r1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <GPIO_setupPinDirection+0x66>
    14c2:	85 c0       	rjmp	.+266    	; 0x15ce <GPIO_setupPinDirection+0x170>
    14c4:	af c0       	rjmp	.+350    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	a1 f4       	brne	.+40     	; 0x14f4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14cc:	aa e3       	ldi	r26, 0x3A	; 58
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	ea e3       	ldi	r30, 0x3A	; 58
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <GPIO_setupPinDirection+0x8c>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <GPIO_setupPinDirection+0x88>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	98 c0       	rjmp	.+304    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14f4:	aa e3       	ldi	r26, 0x3A	; 58
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ea e3       	ldi	r30, 0x3A	; 58
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <GPIO_setupPinDirection+0xb4>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <GPIO_setupPinDirection+0xb0>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	83 c0       	rjmp	.+262    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	a1 f4       	brne	.+40     	; 0x154c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1524:	a7 e3       	ldi	r26, 0x37	; 55
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e7 e3       	ldi	r30, 0x37	; 55
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <GPIO_setupPinDirection+0xe4>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <GPIO_setupPinDirection+0xe0>
    1546:	84 2b       	or	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	6c c0       	rjmp	.+216    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    154c:	a7 e3       	ldi	r26, 0x37	; 55
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e7 e3       	ldi	r30, 0x37	; 55
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_setupPinDirection+0x10c>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_setupPinDirection+0x108>
    156e:	80 95       	com	r24
    1570:	84 23       	and	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	57 c0       	rjmp	.+174    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	a1 f4       	brne	.+40     	; 0x15a4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    157c:	a4 e3       	ldi	r26, 0x34	; 52
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e4 e3       	ldi	r30, 0x34	; 52
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <GPIO_setupPinDirection+0x13c>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <GPIO_setupPinDirection+0x138>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	40 c0       	rjmp	.+128    	; 0x1624 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15a4:	a4 e3       	ldi	r26, 0x34	; 52
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e4 e3       	ldi	r30, 0x34	; 52
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <GPIO_setupPinDirection+0x164>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <GPIO_setupPinDirection+0x160>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	2b c0       	rjmp	.+86     	; 0x1624 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	a1 f4       	brne	.+40     	; 0x15fc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15d4:	a1 e3       	ldi	r26, 0x31	; 49
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e1 e3       	ldi	r30, 0x31	; 49
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_setupPinDirection+0x194>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_setupPinDirection+0x190>
    15f6:	84 2b       	or	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	14 c0       	rjmp	.+40     	; 0x1624 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15fc:	a1 e3       	ldi	r26, 0x31	; 49
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e1 e3       	ldi	r30, 0x31	; 49
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_setupPinDirection+0x1bc>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_setupPinDirection+0x1b8>
    161e:	80 95       	com	r24
    1620:	84 23       	and	r24, r20
    1622:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <GPIO_writePin+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_writePin+0x8>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	6a 83       	std	Y+2, r22	; 0x02
    1646:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	88 30       	cpi	r24, 0x08	; 8
    164c:	08 f0       	brcs	.+2      	; 0x1650 <GPIO_writePin+0x1c>
    164e:	d5 c0       	rjmp	.+426    	; 0x17fa <GPIO_writePin+0x1c6>
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	08 f0       	brcs	.+2      	; 0x1658 <GPIO_writePin+0x24>
    1656:	d1 c0       	rjmp	.+418    	; 0x17fa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3d 83       	std	Y+5, r19	; 0x05
    1660:	2c 83       	std	Y+4, r18	; 0x04
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <GPIO_writePin+0x3a>
    166c:	43 c0       	rjmp	.+134    	; 0x16f4 <GPIO_writePin+0xc0>
    166e:	2c 81       	ldd	r18, Y+4	; 0x04
    1670:	3d 81       	ldd	r19, Y+5	; 0x05
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	2c f4       	brge	.+10     	; 0x1682 <GPIO_writePin+0x4e>
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	71 f0       	breq	.+28     	; 0x169c <GPIO_writePin+0x68>
    1680:	bc c0       	rjmp	.+376    	; 0x17fa <GPIO_writePin+0x1c6>
    1682:	2c 81       	ldd	r18, Y+4	; 0x04
    1684:	3d 81       	ldd	r19, Y+5	; 0x05
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	09 f4       	brne	.+2      	; 0x168e <GPIO_writePin+0x5a>
    168c:	5f c0       	rjmp	.+190    	; 0x174c <GPIO_writePin+0x118>
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	91 05       	cpc	r25, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <GPIO_writePin+0x66>
    1698:	85 c0       	rjmp	.+266    	; 0x17a4 <GPIO_writePin+0x170>
    169a:	af c0       	rjmp	.+350    	; 0x17fa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	a1 f4       	brne	.+40     	; 0x16ca <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16a2:	ab e3       	ldi	r26, 0x3B	; 59
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	eb e3       	ldi	r30, 0x3B	; 59
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_writePin+0x8c>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_writePin+0x88>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	98 c0       	rjmp	.+304    	; 0x17fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16ca:	ab e3       	ldi	r26, 0x3B	; 59
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e3       	ldi	r30, 0x3B	; 59
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <GPIO_writePin+0xb4>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <GPIO_writePin+0xb0>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	83 c0       	rjmp	.+262    	; 0x17fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	a1 f4       	brne	.+40     	; 0x1722 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16fa:	a8 e3       	ldi	r26, 0x38	; 56
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e8 e3       	ldi	r30, 0x38	; 56
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <GPIO_writePin+0xe4>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <GPIO_writePin+0xe0>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	6c c0       	rjmp	.+216    	; 0x17fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1722:	a8 e3       	ldi	r26, 0x38	; 56
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e8 e3       	ldi	r30, 0x38	; 56
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <GPIO_writePin+0x10c>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <GPIO_writePin+0x108>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	57 c0       	rjmp	.+174    	; 0x17fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	a1 f4       	brne	.+40     	; 0x177a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1752:	a5 e3       	ldi	r26, 0x35	; 53
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e3       	ldi	r30, 0x35	; 53
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_writePin+0x13c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_writePin+0x138>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	40 c0       	rjmp	.+128    	; 0x17fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    177a:	a5 e3       	ldi	r26, 0x35	; 53
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e5 e3       	ldi	r30, 0x35	; 53
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_writePin+0x164>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_writePin+0x160>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	2b c0       	rjmp	.+86     	; 0x17fa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	a1 f4       	brne	.+40     	; 0x17d2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17aa:	a2 e3       	ldi	r26, 0x32	; 50
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e2 e3       	ldi	r30, 0x32	; 50
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_writePin+0x194>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_writePin+0x190>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17d2:	a2 e3       	ldi	r26, 0x32	; 50
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e3       	ldi	r30, 0x32	; 50
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_writePin+0x1bc>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_writePin+0x1b8>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <GPIO_readPin+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <GPIO_readPin+0x8>
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    181c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 30       	cpi	r24, 0x08	; 8
    1822:	08 f0       	brcs	.+2      	; 0x1826 <GPIO_readPin+0x1c>
    1824:	84 c0       	rjmp	.+264    	; 0x192e <GPIO_readPin+0x124>
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	08 f0       	brcs	.+2      	; 0x182e <GPIO_readPin+0x24>
    182c:	80 c0       	rjmp	.+256    	; 0x192e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3d 83       	std	Y+5, r19	; 0x05
    1836:	2c 83       	std	Y+4, r18	; 0x04
    1838:	4c 81       	ldd	r20, Y+4	; 0x04
    183a:	5d 81       	ldd	r21, Y+5	; 0x05
    183c:	41 30       	cpi	r20, 0x01	; 1
    183e:	51 05       	cpc	r21, r1
    1840:	79 f1       	breq	.+94     	; 0x18a0 <GPIO_readPin+0x96>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	91 05       	cpc	r25, r1
    184a:	34 f4       	brge	.+12     	; 0x1858 <GPIO_readPin+0x4e>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	21 15       	cp	r18, r1
    1852:	31 05       	cpc	r19, r1
    1854:	69 f0       	breq	.+26     	; 0x1870 <GPIO_readPin+0x66>
    1856:	6b c0       	rjmp	.+214    	; 0x192e <GPIO_readPin+0x124>
    1858:	4c 81       	ldd	r20, Y+4	; 0x04
    185a:	5d 81       	ldd	r21, Y+5	; 0x05
    185c:	42 30       	cpi	r20, 0x02	; 2
    185e:	51 05       	cpc	r21, r1
    1860:	b9 f1       	breq	.+110    	; 0x18d0 <GPIO_readPin+0xc6>
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	83 30       	cpi	r24, 0x03	; 3
    1868:	91 05       	cpc	r25, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <GPIO_readPin+0x64>
    186c:	49 c0       	rjmp	.+146    	; 0x1900 <GPIO_readPin+0xf6>
    186e:	5f c0       	rjmp	.+190    	; 0x192e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1870:	e9 e3       	ldi	r30, 0x39	; 57
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <GPIO_readPin+0x7e>
    1884:	55 95       	asr	r21
    1886:	47 95       	ror	r20
    1888:	8a 95       	dec	r24
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <GPIO_readPin+0x7a>
    188c:	ca 01       	movw	r24, r20
    188e:	81 70       	andi	r24, 0x01	; 1
    1890:	90 70       	andi	r25, 0x00	; 0
    1892:	88 23       	and	r24, r24
    1894:	19 f0       	breq	.+6      	; 0x189c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	49 c0       	rjmp	.+146    	; 0x192e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    189c:	19 82       	std	Y+1, r1	; 0x01
    189e:	47 c0       	rjmp	.+142    	; 0x192e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18a0:	e6 e3       	ldi	r30, 0x36	; 54
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a9 01       	movw	r20, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <GPIO_readPin+0xae>
    18b4:	55 95       	asr	r21
    18b6:	47 95       	ror	r20
    18b8:	8a 95       	dec	r24
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <GPIO_readPin+0xaa>
    18bc:	ca 01       	movw	r24, r20
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	90 70       	andi	r25, 0x00	; 0
    18c2:	88 23       	and	r24, r24
    18c4:	19 f0       	breq	.+6      	; 0x18cc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	31 c0       	rjmp	.+98     	; 0x192e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18cc:	19 82       	std	Y+1, r1	; 0x01
    18ce:	2f c0       	rjmp	.+94     	; 0x192e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18d0:	e3 e3       	ldi	r30, 0x33	; 51
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <GPIO_readPin+0xde>
    18e4:	55 95       	asr	r21
    18e6:	47 95       	ror	r20
    18e8:	8a 95       	dec	r24
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <GPIO_readPin+0xda>
    18ec:	ca 01       	movw	r24, r20
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	90 70       	andi	r25, 0x00	; 0
    18f2:	88 23       	and	r24, r24
    18f4:	19 f0       	breq	.+6      	; 0x18fc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	19 c0       	rjmp	.+50     	; 0x192e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18fc:	19 82       	std	Y+1, r1	; 0x01
    18fe:	17 c0       	rjmp	.+46     	; 0x192e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1900:	e0 e3       	ldi	r30, 0x30	; 48
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a9 01       	movw	r20, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_readPin+0x10e>
    1914:	55 95       	asr	r21
    1916:	47 95       	ror	r20
    1918:	8a 95       	dec	r24
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_readPin+0x10a>
    191c:	ca 01       	movw	r24, r20
    191e:	81 70       	andi	r24, 0x01	; 1
    1920:	90 70       	andi	r25, 0x00	; 0
    1922:	88 23       	and	r24, r24
    1924:	19 f0       	breq	.+6      	; 0x192c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	01 c0       	rjmp	.+2      	; 0x192e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    192c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <GPIO_setupPortDirection+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <GPIO_setupPortDirection+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	84 30       	cpi	r24, 0x04	; 4
    1954:	90 f5       	brcc	.+100    	; 0x19ba <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	3c 83       	std	Y+4, r19	; 0x04
    195e:	2b 83       	std	Y+3, r18	; 0x03
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	91 05       	cpc	r25, r1
    1968:	d1 f0       	breq	.+52     	; 0x199e <GPIO_setupPortDirection+0x5e>
    196a:	2b 81       	ldd	r18, Y+3	; 0x03
    196c:	3c 81       	ldd	r19, Y+4	; 0x04
    196e:	22 30       	cpi	r18, 0x02	; 2
    1970:	31 05       	cpc	r19, r1
    1972:	2c f4       	brge	.+10     	; 0x197e <GPIO_setupPortDirection+0x3e>
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	61 f0       	breq	.+24     	; 0x1994 <GPIO_setupPortDirection+0x54>
    197c:	1e c0       	rjmp	.+60     	; 0x19ba <GPIO_setupPortDirection+0x7a>
    197e:	2b 81       	ldd	r18, Y+3	; 0x03
    1980:	3c 81       	ldd	r19, Y+4	; 0x04
    1982:	22 30       	cpi	r18, 0x02	; 2
    1984:	31 05       	cpc	r19, r1
    1986:	81 f0       	breq	.+32     	; 0x19a8 <GPIO_setupPortDirection+0x68>
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	9c 81       	ldd	r25, Y+4	; 0x04
    198c:	83 30       	cpi	r24, 0x03	; 3
    198e:	91 05       	cpc	r25, r1
    1990:	81 f0       	breq	.+32     	; 0x19b2 <GPIO_setupPortDirection+0x72>
    1992:	13 c0       	rjmp	.+38     	; 0x19ba <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1994:	ea e3       	ldi	r30, 0x3A	; 58
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
    199c:	0e c0       	rjmp	.+28     	; 0x19ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    199e:	e7 e3       	ldi	r30, 0x37	; 55
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	80 83       	st	Z, r24
    19a6:	09 c0       	rjmp	.+18     	; 0x19ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19a8:	e4 e3       	ldi	r30, 0x34	; 52
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	80 83       	st	Z, r24
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19b2:	e1 e3       	ldi	r30, 0x31	; 49
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	80 83       	st	Z, r24
			break;
		}
	}
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <GPIO_writePort+0x6>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <GPIO_writePort+0x8>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	89 83       	std	Y+1, r24	; 0x01
    19d6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	90 f5       	brcc	.+100    	; 0x1a42 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3c 83       	std	Y+4, r19	; 0x04
    19e6:	2b 83       	std	Y+3, r18	; 0x03
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	9c 81       	ldd	r25, Y+4	; 0x04
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	91 05       	cpc	r25, r1
    19f0:	d1 f0       	breq	.+52     	; 0x1a26 <GPIO_writePort+0x5e>
    19f2:	2b 81       	ldd	r18, Y+3	; 0x03
    19f4:	3c 81       	ldd	r19, Y+4	; 0x04
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <GPIO_writePort+0x3e>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	61 f0       	breq	.+24     	; 0x1a1c <GPIO_writePort+0x54>
    1a04:	1e c0       	rjmp	.+60     	; 0x1a42 <GPIO_writePort+0x7a>
    1a06:	2b 81       	ldd	r18, Y+3	; 0x03
    1a08:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	81 f0       	breq	.+32     	; 0x1a30 <GPIO_writePort+0x68>
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	83 30       	cpi	r24, 0x03	; 3
    1a16:	91 05       	cpc	r25, r1
    1a18:	81 f0       	breq	.+32     	; 0x1a3a <GPIO_writePort+0x72>
    1a1a:	13 c0       	rjmp	.+38     	; 0x1a42 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a1c:	eb e3       	ldi	r30, 0x3B	; 59
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	80 83       	st	Z, r24
    1a24:	0e c0       	rjmp	.+28     	; 0x1a42 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	80 83       	st	Z, r24
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a30:	e5 e3       	ldi	r30, 0x35	; 53
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	80 83       	st	Z, r24
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a3a:	e2 e3       	ldi	r30, 0x32	; 50
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <GPIO_readPort+0x6>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <GPIO_readPort+0x8>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a5e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	90 f5       	brcc	.+100    	; 0x1aca <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3c 83       	std	Y+4, r19	; 0x04
    1a6e:	2b 83       	std	Y+3, r18	; 0x03
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	91 05       	cpc	r25, r1
    1a78:	d1 f0       	breq	.+52     	; 0x1aae <GPIO_readPort+0x5e>
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <GPIO_readPort+0x3e>
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	61 f0       	breq	.+24     	; 0x1aa4 <GPIO_readPort+0x54>
    1a8c:	1e c0       	rjmp	.+60     	; 0x1aca <GPIO_readPort+0x7a>
    1a8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a90:	3c 81       	ldd	r19, Y+4	; 0x04
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	81 f0       	breq	.+32     	; 0x1ab8 <GPIO_readPort+0x68>
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	81 f0       	breq	.+32     	; 0x1ac2 <GPIO_readPort+0x72>
    1aa2:	13 c0       	rjmp	.+38     	; 0x1aca <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1aa4:	e9 e3       	ldi	r30, 0x39	; 57
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	0e c0       	rjmp	.+28     	; 0x1aca <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1aae:	e6 e3       	ldi	r30, 0x36	; 54
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	09 c0       	rjmp	.+18     	; 0x1aca <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ab8:	e3 e3       	ldi	r30, 0x33	; 51
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	04 c0       	rjmp	.+8      	; 0x1aca <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ac2:	e0 e3       	ldi	r30, 0x30	; 48
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <KEYPAD_getPressedKey+0x6>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1ae6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1ae8:	1b 82       	std	Y+3, r1	; 0x03
    1aea:	43 c0       	rjmp	.+134    	; 0x1b72 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	0e 94 a0 0c 	call	0x1940	; 0x1940 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	98 2f       	mov	r25, r24
    1af8:	9c 5f       	subi	r25, 0xFC	; 252
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	69 2f       	mov	r22, r25
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 2f 0a 	call	0x145e	; 0x145e <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	2c 5f       	subi	r18, 0xFC	; 252
    1b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <KEYPAD_getPressedKey+0x40>
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	2a 95       	dec	r18
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <KEYPAD_getPressedKey+0x3c>
    1b1e:	80 95       	com	r24
    1b20:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	69 81       	ldd	r22, Y+1	; 0x01
    1b26:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b2a:	1a 82       	std	Y+2, r1	; 0x02
    1b2c:	1c c0       	rjmp	.+56     	; 0x1b66 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	6a 81       	ldd	r22, Y+2	; 0x02
    1b32:	0e 94 05 0c 	call	0x180a	; 0x180a <GPIO_readPin>
    1b36:	88 23       	and	r24, r24
    1b38:	99 f4       	brne	.+38     	; 0x1b60 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	98 2f       	mov	r25, r24
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	89 0f       	add	r24, r25
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	8f 5f       	subi	r24, 0xFF	; 255
    1b64:	8a 83       	std	Y+2, r24	; 0x02
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	84 30       	cpi	r24, 0x04	; 4
    1b6a:	08 f3       	brcs	.-62     	; 0x1b2e <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	8f 5f       	subi	r24, 0xFF	; 255
    1b70:	8b 83       	std	Y+3, r24	; 0x03
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	08 f4       	brcc	.+2      	; 0x1b7a <KEYPAD_getPressedKey+0xa0>
    1b78:	b9 cf       	rjmp	.-142    	; 0x1aec <KEYPAD_getPressedKey+0x12>
    1b7a:	b6 cf       	rjmp	.-148    	; 0x1ae8 <KEYPAD_getPressedKey+0xe>

00001b7c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b8a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3c 83       	std	Y+4, r19	; 0x04
    1b94:	2b 83       	std	Y+3, r18	; 0x03
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	88 30       	cpi	r24, 0x08	; 8
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ba0:	70 c0       	rjmp	.+224    	; 0x1c82 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	29 30       	cpi	r18, 0x09	; 9
    1ba8:	31 05       	cpc	r19, r1
    1baa:	5c f5       	brge	.+86     	; 0x1c02 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	84 30       	cpi	r24, 0x04	; 4
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1bb6:	59 c0       	rjmp	.+178    	; 0x1c6a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	25 30       	cpi	r18, 0x05	; 5
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	9c f4       	brge	.+38     	; 0x1be8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	91 05       	cpc	r25, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <KEYPAD_4x4_adjustKeyNumber+0x52>
    1bcc:	48 c0       	rjmp	.+144    	; 0x1c5e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1bce:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd2:	23 30       	cpi	r18, 0x03	; 3
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	0c f0       	brlt	.+2      	; 0x1bda <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1bd8:	45 c0       	rjmp	.+138    	; 0x1c64 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1be4:	39 c0       	rjmp	.+114    	; 0x1c58 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1be6:	67 c0       	rjmp	.+206    	; 0x1cb6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1be8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bea:	3c 81       	ldd	r19, Y+4	; 0x04
    1bec:	26 30       	cpi	r18, 0x06	; 6
    1bee:	31 05       	cpc	r19, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1bf2:	41 c0       	rjmp	.+130    	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	87 30       	cpi	r24, 0x07	; 7
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	0c f0       	brlt	.+2      	; 0x1c00 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1bfe:	3e c0       	rjmp	.+124    	; 0x1c7c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c00:	37 c0       	rjmp	.+110    	; 0x1c70 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	2c 30       	cpi	r18, 0x0C	; 12
    1c08:	31 05       	cpc	r19, r1
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c0c:	46 c0       	rjmp	.+140    	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	8d 30       	cpi	r24, 0x0D	; 13
    1c14:	91 05       	cpc	r25, r1
    1c16:	5c f4       	brge	.+22     	; 0x1c2e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	2a 30       	cpi	r18, 0x0A	; 10
    1c1e:	31 05       	cpc	r19, r1
    1c20:	b1 f1       	breq	.+108    	; 0x1c8e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	8b 30       	cpi	r24, 0x0B	; 11
    1c28:	91 05       	cpc	r25, r1
    1c2a:	a4 f5       	brge	.+104    	; 0x1c94 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c2c:	2d c0       	rjmp	.+90     	; 0x1c88 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c30:	3c 81       	ldd	r19, Y+4	; 0x04
    1c32:	2e 30       	cpi	r18, 0x0E	; 14
    1c34:	31 05       	cpc	r19, r1
    1c36:	b9 f1       	breq	.+110    	; 0x1ca6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	8e 30       	cpi	r24, 0x0E	; 14
    1c3e:	91 05       	cpc	r25, r1
    1c40:	7c f1       	brlt	.+94     	; 0x1ca0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c42:	2b 81       	ldd	r18, Y+3	; 0x03
    1c44:	3c 81       	ldd	r19, Y+4	; 0x04
    1c46:	2f 30       	cpi	r18, 0x0F	; 15
    1c48:	31 05       	cpc	r19, r1
    1c4a:	79 f1       	breq	.+94     	; 0x1caa <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	80 31       	cpi	r24, 0x10	; 16
    1c52:	91 05       	cpc	r25, r1
    1c54:	69 f1       	breq	.+90     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c56:	2f c0       	rjmp	.+94     	; 0x1cb6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1c58:	87 e0       	ldi	r24, 0x07	; 7
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	2e c0       	rjmp	.+92     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1c5e:	88 e0       	ldi	r24, 0x08	; 8
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	2b c0       	rjmp	.+86     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1c64:	89 e0       	ldi	r24, 0x09	; 9
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	28 c0       	rjmp	.+80     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c6a:	85 e2       	ldi	r24, 0x25	; 37
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	25 c0       	rjmp	.+74     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c70:	84 e0       	ldi	r24, 0x04	; 4
    1c72:	89 83       	std	Y+1, r24	; 0x01
    1c74:	22 c0       	rjmp	.+68     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c76:	85 e0       	ldi	r24, 0x05	; 5
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	1f c0       	rjmp	.+62     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c7c:	86 e0       	ldi	r24, 0x06	; 6
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	1c c0       	rjmp	.+56     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c82:	8a e2       	ldi	r24, 0x2A	; 42
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	19 c0       	rjmp	.+50     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	16 c0       	rjmp	.+44     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	13 c0       	rjmp	.+38     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	10 c0       	rjmp	.+32     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c9a:	8d e2       	ldi	r24, 0x2D	; 45
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	0d c0       	rjmp	.+26     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ca0:	8d e0       	ldi	r24, 0x0D	; 13
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	0a c0       	rjmp	.+20     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1ca6:	19 82       	std	Y+1, r1	; 0x01
    1ca8:	08 c0       	rjmp	.+16     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1caa:	8d e3       	ldi	r24, 0x3D	; 61
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	05 c0       	rjmp	.+10     	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1cb0:	8b e2       	ldi	r24, 0x2B	; 43
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <LCD_init>:
#include "commen_macros.h" /* To use the macros like SET_BIT */
#include "lcd.h"
#include "gpio.h"

void LCD_init(void)
{
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 2f 0a 	call	0x145e	; 0x145e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 2f 0a 	call	0x145e	; 0x145e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 2f 0a 	call	0x145e	; 0x145e <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	6f ef       	ldi	r22, 0xFF	; 255
    1cf4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1cf8:	88 e3       	ldi	r24, 0x38	; 56
    1cfa:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1cfe:	8c e0       	ldi	r24, 0x0C	; 12
    1d00:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_sendCommand>
}
    1d0a:	cf 91       	pop	r28
    1d0c:	df 91       	pop	r29
    1d0e:	08 95       	ret

00001d10 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	e9 97       	sbiw	r28, 0x39	; 57
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	8d ab       	std	Y+53, r24	; 0x35
    1d44:	9e ab       	std	Y+54, r25	; 0x36
    1d46:	af ab       	std	Y+55, r26	; 0x37
    1d48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d50:	98 ad       	ldd	r25, Y+56	; 0x38
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	89 ab       	std	Y+49, r24	; 0x31
    1d64:	9a ab       	std	Y+50, r25	; 0x32
    1d66:	ab ab       	std	Y+51, r26	; 0x33
    1d68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d70:	9c a9       	ldd	r25, Y+52	; 0x34
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	98 ab       	std	Y+48, r25	; 0x30
    1d88:	8f a7       	std	Y+47, r24	; 0x2f
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d90:	8b a9       	ldd	r24, Y+51	; 0x33
    1d92:	9c a9       	ldd	r25, Y+52	; 0x34
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	6d a9       	ldd	r22, Y+53	; 0x35
    1da6:	7e a9       	ldd	r23, Y+54	; 0x36
    1da8:	8f a9       	ldd	r24, Y+55	; 0x37
    1daa:	98 ad       	ldd	r25, Y+56	; 0x38
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	98 ab       	std	Y+48, r25	; 0x30
    1dca:	8f a7       	std	Y+47, r24	; 0x2f
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_sendCommand+0xdc>
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e a7       	std	Y+46, r25	; 0x2e
    1dd4:	8d a7       	std	Y+45, r24	; 0x2d
    1dd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_sendCommand+0xca>
    1dde:	9e a7       	std	Y+46, r25	; 0x2e
    1de0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de4:	98 a9       	ldd	r25, Y+48	; 0x30
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	98 ab       	std	Y+48, r25	; 0x30
    1dea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dee:	98 a9       	ldd	r25, Y+48	; 0x30
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <LCD_sendCommand+0xbe>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	69 a9       	ldd	r22, Y+49	; 0x31
    1df8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	98 ab       	std	Y+48, r25	; 0x30
    1e08:	8f a7       	std	Y+47, r24	; 0x2f
    1e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e0e:	9c a7       	std	Y+44, r25	; 0x2c
    1e10:	8b a7       	std	Y+43, r24	; 0x2b
    1e12:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e14:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_sendCommand+0x106>
    1e1a:	9c a7       	std	Y+44, r25	; 0x2c
    1e1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1e1e:	82 e0       	ldi	r24, 0x02	; 2
    1e20:	62 e0       	ldi	r22, 0x02	; 2
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e8       	ldi	r26, 0x80	; 128
    1e2e:	bf e3       	ldi	r27, 0x3F	; 63
    1e30:	8f a3       	std	Y+39, r24	; 0x27
    1e32:	98 a7       	std	Y+40, r25	; 0x28
    1e34:	a9 a7       	std	Y+41, r26	; 0x29
    1e36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	8b a3       	std	Y+35, r24	; 0x23
    1e52:	9c a3       	std	Y+36, r25	; 0x24
    1e54:	ad a3       	std	Y+37, r26	; 0x25
    1e56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e58:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <LCD_sendCommand+0x16a>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9a a3       	std	Y+34, r25	; 0x22
    1e76:	89 a3       	std	Y+33, r24	; 0x21
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e80:	9e a1       	ldd	r25, Y+38	; 0x26
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6f a1       	ldd	r22, Y+39	; 0x27
    1e94:	78 a5       	ldd	r23, Y+40	; 0x28
    1e96:	89 a5       	ldd	r24, Y+41	; 0x29
    1e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9a a3       	std	Y+34, r25	; 0x22
    1eb8:	89 a3       	std	Y+33, r24	; 0x21
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_sendCommand+0x1ca>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	98 a3       	std	Y+32, r25	; 0x20
    1ec2:	8f 8f       	std	Y+31, r24	; 0x1f
    1ec4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ec6:	98 a1       	ldd	r25, Y+32	; 0x20
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_sendCommand+0x1b8>
    1ecc:	98 a3       	std	Y+32, r25	; 0x20
    1ece:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9a a3       	std	Y+34, r25	; 0x22
    1ed8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	89 a1       	ldd	r24, Y+33	; 0x21
    1edc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <LCD_sendCommand+0x1ac>
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9a a3       	std	Y+34, r25	; 0x22
    1ef6:	89 a3       	std	Y+33, r24	; 0x21
    1ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    1efa:	9a a1       	ldd	r25, Y+34	; 0x22
    1efc:	9e 8f       	std	Y+30, r25	; 0x1e
    1efe:	8d 8f       	std	Y+29, r24	; 0x1d
    1f00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_sendCommand+0x1f4>
    1f08:	9e 8f       	std	Y+30, r25	; 0x1e
    1f0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	69 ad       	ldd	r22, Y+57	; 0x39
    1f10:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <GPIO_writePort>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e8       	ldi	r26, 0x80	; 128
    1f1a:	bf e3       	ldi	r27, 0x3F	; 63
    1f1c:	89 8f       	std	Y+25, r24	; 0x19
    1f1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f20:	ab 8f       	std	Y+27, r26	; 0x1b
    1f22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	69 8d       	ldd	r22, Y+25	; 0x19
    1f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8d 8b       	std	Y+21, r24	; 0x15
    1f3e:	9e 8b       	std	Y+22, r25	; 0x16
    1f40:	af 8b       	std	Y+23, r26	; 0x17
    1f42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f44:	6d 89       	ldd	r22, Y+21	; 0x15
    1f46:	7e 89       	ldd	r23, Y+22	; 0x16
    1f48:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_sendCommand+0x256>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9c 8b       	std	Y+20, r25	; 0x14
    1f62:	8b 8b       	std	Y+19, r24	; 0x13
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1f66:	6d 89       	ldd	r22, Y+21	; 0x15
    1f68:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9c 8b       	std	Y+20, r25	; 0x14
    1fa4:	8b 8b       	std	Y+19, r24	; 0x13
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <LCD_sendCommand+0x2b6>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9a 8b       	std	Y+18, r25	; 0x12
    1fae:	89 8b       	std	Y+17, r24	; 0x11
    1fb0:	89 89       	ldd	r24, Y+17	; 0x11
    1fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_sendCommand+0x2a4>
    1fb8:	9a 8b       	std	Y+18, r25	; 0x12
    1fba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9c 8b       	std	Y+20, r25	; 0x14
    1fc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <LCD_sendCommand+0x298>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	98 8b       	std	Y+16, r25	; 0x10
    1fea:	8f 87       	std	Y+15, r24	; 0x0f
    1fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fee:	98 89       	ldd	r25, Y+16	; 0x10
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_sendCommand+0x2e0>
    1ff4:	98 8b       	std	Y+16, r25	; 0x10
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	62 e0       	ldi	r22, 0x02	; 2
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e8       	ldi	r26, 0x80	; 128
    2008:	bf e3       	ldi	r27, 0x3F	; 63
    200a:	8b 87       	std	Y+11, r24	; 0x0b
    200c:	9c 87       	std	Y+12, r25	; 0x0c
    200e:	ad 87       	std	Y+13, r26	; 0x0d
    2010:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2012:	6b 85       	ldd	r22, Y+11	; 0x0b
    2014:	7c 85       	ldd	r23, Y+12	; 0x0c
    2016:	8d 85       	ldd	r24, Y+13	; 0x0d
    2018:	9e 85       	ldd	r25, Y+14	; 0x0e
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	4a ef       	ldi	r20, 0xFA	; 250
    2020:	54 e4       	ldi	r21, 0x44	; 68
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	8f 83       	std	Y+7, r24	; 0x07
    202c:	98 87       	std	Y+8, r25	; 0x08
    202e:	a9 87       	std	Y+9, r26	; 0x09
    2030:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2032:	6f 81       	ldd	r22, Y+7	; 0x07
    2034:	78 85       	ldd	r23, Y+8	; 0x08
    2036:	89 85       	ldd	r24, Y+9	; 0x09
    2038:	9a 85       	ldd	r25, Y+10	; 0x0a
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e8       	ldi	r20, 0x80	; 128
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2046:	88 23       	and	r24, r24
    2048:	2c f4       	brge	.+10     	; 0x2054 <LCD_sendCommand+0x344>
		__ticks = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9e 83       	std	Y+6, r25	; 0x06
    2050:	8d 83       	std	Y+5, r24	; 0x05
    2052:	3f c0       	rjmp	.+126    	; 0x20d2 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2054:	6f 81       	ldd	r22, Y+7	; 0x07
    2056:	78 85       	ldd	r23, Y+8	; 0x08
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	4c f5       	brge	.+82     	; 0x20be <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206c:	6b 85       	ldd	r22, Y+11	; 0x0b
    206e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e2       	ldi	r20, 0x20	; 32
    207a:	51 e4       	ldi	r21, 0x41	; 65
    207c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	bc 01       	movw	r22, r24
    2086:	cd 01       	movw	r24, r26
    2088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9e 83       	std	Y+6, r25	; 0x06
    2092:	8d 83       	std	Y+5, r24	; 0x05
    2094:	0f c0       	rjmp	.+30     	; 0x20b4 <LCD_sendCommand+0x3a4>
    2096:	88 ec       	ldi	r24, 0xC8	; 200
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCD_sendCommand+0x392>
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	69 f7       	brne	.-38     	; 0x2096 <LCD_sendCommand+0x386>
    20bc:	14 c0       	rjmp	.+40     	; 0x20e6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	8d 83       	std	Y+5, r24	; 0x05
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	9e 81       	ldd	r25, Y+6	; 0x06
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	9a 81       	ldd	r25, Y+2	; 0x02
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <LCD_sendCommand+0x3ce>
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20e6:	e9 96       	adiw	r28, 0x39	; 57
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data){
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	e9 97       	sbiw	r28, 0x39	; 57
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	61 e0       	ldi	r22, 0x01	; 1
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e8       	ldi	r26, 0x80	; 128
    2128:	bf e3       	ldi	r27, 0x3F	; 63
    212a:	8d ab       	std	Y+53, r24	; 0x35
    212c:	9e ab       	std	Y+54, r25	; 0x36
    212e:	af ab       	std	Y+55, r26	; 0x37
    2130:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	6d a9       	ldd	r22, Y+53	; 0x35
    2134:	7e a9       	ldd	r23, Y+54	; 0x36
    2136:	8f a9       	ldd	r24, Y+55	; 0x37
    2138:	98 ad       	ldd	r25, Y+56	; 0x38
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a ef       	ldi	r20, 0xFA	; 250
    2140:	54 e4       	ldi	r21, 0x44	; 68
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	89 ab       	std	Y+49, r24	; 0x31
    214c:	9a ab       	std	Y+50, r25	; 0x32
    214e:	ab ab       	std	Y+51, r26	; 0x33
    2150:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2152:	69 a9       	ldd	r22, Y+49	; 0x31
    2154:	7a a9       	ldd	r23, Y+50	; 0x32
    2156:	8b a9       	ldd	r24, Y+51	; 0x33
    2158:	9c a9       	ldd	r25, Y+52	; 0x34
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	98 ab       	std	Y+48, r25	; 0x30
    2170:	8f a7       	std	Y+47, r24	; 0x2f
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2174:	69 a9       	ldd	r22, Y+49	; 0x31
    2176:	7a a9       	ldd	r23, Y+50	; 0x32
    2178:	8b a9       	ldd	r24, Y+51	; 0x33
    217a:	9c a9       	ldd	r25, Y+52	; 0x34
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	6d a9       	ldd	r22, Y+53	; 0x35
    218e:	7e a9       	ldd	r23, Y+54	; 0x36
    2190:	8f a9       	ldd	r24, Y+55	; 0x37
    2192:	98 ad       	ldd	r25, Y+56	; 0x38
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	98 ab       	std	Y+48, r25	; 0x30
    21b2:	8f a7       	std	Y+47, r24	; 0x2f
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <LCD_displayCharacter+0xdc>
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9e a7       	std	Y+46, r25	; 0x2e
    21bc:	8d a7       	std	Y+45, r24	; 0x2d
    21be:	8d a5       	ldd	r24, Y+45	; 0x2d
    21c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_displayCharacter+0xca>
    21c6:	9e a7       	std	Y+46, r25	; 0x2e
    21c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    21cc:	98 a9       	ldd	r25, Y+48	; 0x30
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d6:	98 a9       	ldd	r25, Y+48	; 0x30
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <LCD_displayCharacter+0xbe>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	69 a9       	ldd	r22, Y+49	; 0x31
    21e0:	7a a9       	ldd	r23, Y+50	; 0x32
    21e2:	8b a9       	ldd	r24, Y+51	; 0x33
    21e4:	9c a9       	ldd	r25, Y+52	; 0x34
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f4:	98 a9       	ldd	r25, Y+48	; 0x30
    21f6:	9c a7       	std	Y+44, r25	; 0x2c
    21f8:	8b a7       	std	Y+43, r24	; 0x2b
    21fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_displayCharacter+0x106>
    2202:	9c a7       	std	Y+44, r25	; 0x2c
    2204:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e8       	ldi	r26, 0x80	; 128
    2216:	bf e3       	ldi	r27, 0x3F	; 63
    2218:	8f a3       	std	Y+39, r24	; 0x27
    221a:	98 a7       	std	Y+40, r25	; 0x28
    221c:	a9 a7       	std	Y+41, r26	; 0x29
    221e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6f a1       	ldd	r22, Y+39	; 0x27
    2222:	78 a5       	ldd	r23, Y+40	; 0x28
    2224:	89 a5       	ldd	r24, Y+41	; 0x29
    2226:	9a a5       	ldd	r25, Y+42	; 0x2a
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a ef       	ldi	r20, 0xFA	; 250
    222e:	54 e4       	ldi	r21, 0x44	; 68
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8b a3       	std	Y+35, r24	; 0x23
    223a:	9c a3       	std	Y+36, r25	; 0x24
    223c:	ad a3       	std	Y+37, r26	; 0x25
    223e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2240:	6b a1       	ldd	r22, Y+35	; 0x23
    2242:	7c a1       	ldd	r23, Y+36	; 0x24
    2244:	8d a1       	ldd	r24, Y+37	; 0x25
    2246:	9e a1       	ldd	r25, Y+38	; 0x26
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9a a3       	std	Y+34, r25	; 0x22
    225e:	89 a3       	std	Y+33, r24	; 0x21
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2262:	6b a1       	ldd	r22, Y+35	; 0x23
    2264:	7c a1       	ldd	r23, Y+36	; 0x24
    2266:	8d a1       	ldd	r24, Y+37	; 0x25
    2268:	9e a1       	ldd	r25, Y+38	; 0x26
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6f a1       	ldd	r22, Y+39	; 0x27
    227c:	78 a5       	ldd	r23, Y+40	; 0x28
    227e:	89 a5       	ldd	r24, Y+41	; 0x29
    2280:	9a a5       	ldd	r25, Y+42	; 0x2a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9a a3       	std	Y+34, r25	; 0x22
    22a0:	89 a3       	std	Y+33, r24	; 0x21
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_displayCharacter+0x1ca>
    22a4:	88 ec       	ldi	r24, 0xC8	; 200
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	98 a3       	std	Y+32, r25	; 0x20
    22aa:	8f 8f       	std	Y+31, r24	; 0x1f
    22ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ae:	98 a1       	ldd	r25, Y+32	; 0x20
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_displayCharacter+0x1b8>
    22b4:	98 a3       	std	Y+32, r25	; 0x20
    22b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	89 a1       	ldd	r24, Y+33	; 0x21
    22ba:	9a a1       	ldd	r25, Y+34	; 0x22
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9a a3       	std	Y+34, r25	; 0x22
    22c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	89 a1       	ldd	r24, Y+33	; 0x21
    22c4:	9a a1       	ldd	r25, Y+34	; 0x22
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_displayCharacter+0x1ac>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	6b a1       	ldd	r22, Y+35	; 0x23
    22ce:	7c a1       	ldd	r23, Y+36	; 0x24
    22d0:	8d a1       	ldd	r24, Y+37	; 0x25
    22d2:	9e a1       	ldd	r25, Y+38	; 0x26
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9a a3       	std	Y+34, r25	; 0x22
    22de:	89 a3       	std	Y+33, r24	; 0x21
    22e0:	89 a1       	ldd	r24, Y+33	; 0x21
    22e2:	9a a1       	ldd	r25, Y+34	; 0x22
    22e4:	9e 8f       	std	Y+30, r25	; 0x1e
    22e6:	8d 8f       	std	Y+29, r24	; 0x1d
    22e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_displayCharacter+0x1f4>
    22f0:	9e 8f       	std	Y+30, r25	; 0x1e
    22f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	69 ad       	ldd	r22, Y+57	; 0x39
    22f8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <GPIO_writePort>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 e8       	ldi	r26, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	89 8f       	std	Y+25, r24	; 0x19
    2306:	9a 8f       	std	Y+26, r25	; 0x1a
    2308:	ab 8f       	std	Y+27, r26	; 0x1b
    230a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	69 8d       	ldd	r22, Y+25	; 0x19
    230e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	8d 8b       	std	Y+21, r24	; 0x15
    2326:	9e 8b       	std	Y+22, r25	; 0x16
    2328:	af 8b       	std	Y+23, r26	; 0x17
    232a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    232c:	6d 89       	ldd	r22, Y+21	; 0x15
    232e:	7e 89       	ldd	r23, Y+22	; 0x16
    2330:	8f 89       	ldd	r24, Y+23	; 0x17
    2332:	98 8d       	ldd	r25, Y+24	; 0x18
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <LCD_displayCharacter+0x256>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9c 8b       	std	Y+20, r25	; 0x14
    234a:	8b 8b       	std	Y+19, r24	; 0x13
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    234e:	6d 89       	ldd	r22, Y+21	; 0x15
    2350:	7e 89       	ldd	r23, Y+22	; 0x16
    2352:	8f 89       	ldd	r24, Y+23	; 0x17
    2354:	98 8d       	ldd	r25, Y+24	; 0x18
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	69 8d       	ldd	r22, Y+25	; 0x19
    2368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9c 8b       	std	Y+20, r25	; 0x14
    238c:	8b 8b       	std	Y+19, r24	; 0x13
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <LCD_displayCharacter+0x2b6>
    2390:	88 ec       	ldi	r24, 0xC8	; 200
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9a 8b       	std	Y+18, r25	; 0x12
    2396:	89 8b       	std	Y+17, r24	; 0x11
    2398:	89 89       	ldd	r24, Y+17	; 0x11
    239a:	9a 89       	ldd	r25, Y+18	; 0x12
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_displayCharacter+0x2a4>
    23a0:	9a 8b       	std	Y+18, r25	; 0x12
    23a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8b 89       	ldd	r24, Y+19	; 0x13
    23a6:	9c 89       	ldd	r25, Y+20	; 0x14
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <LCD_displayCharacter+0x298>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ba:	7e 89       	ldd	r23, Y+22	; 0x16
    23bc:	8f 89       	ldd	r24, Y+23	; 0x17
    23be:	98 8d       	ldd	r25, Y+24	; 0x18
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9c 8b       	std	Y+20, r25	; 0x14
    23ca:	8b 8b       	std	Y+19, r24	; 0x13
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	98 8b       	std	Y+16, r25	; 0x10
    23d2:	8f 87       	std	Y+15, r24	; 0x0f
    23d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d6:	98 89       	ldd	r25, Y+16	; 0x10
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_displayCharacter+0x2e0>
    23dc:	98 8b       	std	Y+16, r25	; 0x10
    23de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a0 e8       	ldi	r26, 0x80	; 128
    23f0:	bf e3       	ldi	r27, 0x3F	; 63
    23f2:	8b 87       	std	Y+11, r24	; 0x0b
    23f4:	9c 87       	std	Y+12, r25	; 0x0c
    23f6:	ad 87       	std	Y+13, r26	; 0x0d
    23f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2400:	9e 85       	ldd	r25, Y+14	; 0x0e
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a ef       	ldi	r20, 0xFA	; 250
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8f 83       	std	Y+7, r24	; 0x07
    2414:	98 87       	std	Y+8, r25	; 0x08
    2416:	a9 87       	std	Y+9, r26	; 0x09
    2418:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <LCD_displayCharacter+0x344>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    243c:	6f 81       	ldd	r22, Y+7	; 0x07
    243e:	78 85       	ldd	r23, Y+8	; 0x08
    2440:	89 85       	ldd	r24, Y+9	; 0x09
    2442:	9a 85       	ldd	r25, Y+10	; 0x0a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	6b 85       	ldd	r22, Y+11	; 0x0b
    2456:	7c 85       	ldd	r23, Y+12	; 0x0c
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	9e 85       	ldd	r25, Y+14	; 0x0e
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
    247c:	0f c0       	rjmp	.+30     	; 0x249c <LCD_displayCharacter+0x3a4>
    247e:	88 ec       	ldi	r24, 0xC8	; 200
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD_displayCharacter+0x392>
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	9e 81       	ldd	r25, Y+6	; 0x06
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <LCD_displayCharacter+0x386>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_displayCharacter+0x3ce>
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    24ce:	e9 96       	adiw	r28, 0x39	; 57
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <LCD_displayString>:
/*
 * Description:
 * function display required string
 */
void LCD_displayString(const char *Str){
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <LCD_displayString+0x6>
    24e6:	0f 92       	push	r0
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	9b 83       	std	Y+3, r25	; 0x03
    24ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count=0;
    24f0:	19 82       	std	Y+1, r1	; 0x01
    24f2:	0e c0       	rjmp	.+28     	; 0x2510 <LCD_displayString+0x30>
	while(Str[count]!='\0'){
		LCD_displayCharacter(Str[count]);
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	fc 01       	movw	r30, r24
    2500:	e2 0f       	add	r30, r18
    2502:	f3 1f       	adc	r31, r19
    2504:	80 81       	ld	r24, Z
    2506:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <LCD_displayCharacter>
		count++;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	89 83       	std	Y+1, r24	; 0x01
 * Description:
 * function display required string
 */
void LCD_displayString(const char *Str){
	uint8 count=0;
	while(Str[count]!='\0'){
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f3 1f       	adc	r31, r19
    2520:	80 81       	ld	r24, Z
    2522:	88 23       	and	r24, r24
    2524:	39 f7       	brne	.-50     	; 0x24f4 <LCD_displayString+0x14>
		LCD_displayCharacter(Str[count]);
		count++;
	}
}
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <LCD_moveCursor>:
/*
 * Description:
 * move cursor in specific position
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <LCD_moveCursor+0x6>
    2538:	00 d0       	rcall	.+0      	; 0x253a <LCD_moveCursor+0x8>
    253a:	0f 92       	push	r0
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	8a 83       	std	Y+2, r24	; 0x02
    2542:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_adress;
	switch(row){
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	3d 83       	std	Y+5, r19	; 0x05
    254c:	2c 83       	std	Y+4, r18	; 0x04
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	9d 81       	ldd	r25, Y+5	; 0x05
    2552:	81 30       	cpi	r24, 0x01	; 1
    2554:	91 05       	cpc	r25, r1
    2556:	c1 f0       	breq	.+48     	; 0x2588 <LCD_moveCursor+0x56>
    2558:	2c 81       	ldd	r18, Y+4	; 0x04
    255a:	3d 81       	ldd	r19, Y+5	; 0x05
    255c:	22 30       	cpi	r18, 0x02	; 2
    255e:	31 05       	cpc	r19, r1
    2560:	2c f4       	brge	.+10     	; 0x256c <LCD_moveCursor+0x3a>
    2562:	8c 81       	ldd	r24, Y+4	; 0x04
    2564:	9d 81       	ldd	r25, Y+5	; 0x05
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	61 f0       	breq	.+24     	; 0x2582 <LCD_moveCursor+0x50>
    256a:	19 c0       	rjmp	.+50     	; 0x259e <LCD_moveCursor+0x6c>
    256c:	2c 81       	ldd	r18, Y+4	; 0x04
    256e:	3d 81       	ldd	r19, Y+5	; 0x05
    2570:	22 30       	cpi	r18, 0x02	; 2
    2572:	31 05       	cpc	r19, r1
    2574:	69 f0       	breq	.+26     	; 0x2590 <LCD_moveCursor+0x5e>
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	9d 81       	ldd	r25, Y+5	; 0x05
    257a:	83 30       	cpi	r24, 0x03	; 3
    257c:	91 05       	cpc	r25, r1
    257e:	61 f0       	breq	.+24     	; 0x2598 <LCD_moveCursor+0x66>
    2580:	0e c0       	rjmp	.+28     	; 0x259e <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_adress=col;
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	0b c0       	rjmp	.+22     	; 0x259e <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_adress=col+0x040;
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	80 5c       	subi	r24, 0xC0	; 192
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	07 c0       	rjmp	.+14     	; 0x259e <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_adress=col+0x10;
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	80 5f       	subi	r24, 0xF0	; 240
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	03 c0       	rjmp	.+6      	; 0x259e <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_adress=col+0x50;
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	80 5b       	subi	r24, 0xB0	; 176
    259c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*move cursor*/
	LCD_sendCommand(lcd_memory_adress|LCD_SET_CURSOR_LOCATION);
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	80 68       	ori	r24, 0x80	; 128
    25a2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_sendCommand>
}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <LCD_displayStringRowColumn>:
/*
 * Description:
 * display required string in required row and column index
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <LCD_displayStringRowColumn+0x6>
    25bc:	00 d0       	rcall	.+0      	; 0x25be <LCD_displayStringRowColumn+0x8>
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	6a 83       	std	Y+2, r22	; 0x02
    25c6:	5c 83       	std	Y+4, r21	; 0x04
    25c8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	6a 81       	ldd	r22, Y+2	; 0x02
    25ce:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_moveCursor>
	LCD_displayString(Str);
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	cd b7       	in	r28, 0x3d	; 61
    25ee:	de b7       	in	r29, 0x3e	; 62
    25f0:	62 97       	sbiw	r28, 0x12	; 18
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	9e 01       	movw	r18, r28
    2606:	2f 5f       	subi	r18, 0xFF	; 255
    2608:	3f 4f       	sbci	r19, 0xFF	; 255
    260a:	b9 01       	movw	r22, r18
    260c:	4a e0       	ldi	r20, 0x0A	; 10
    260e:	50 e0       	ldi	r21, 0x00	; 0
    2610:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <itoa>
   LCD_displayString(buff); /* Display the string */
    2614:	ce 01       	movw	r24, r28
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
}
    261c:	62 96       	adiw	r28, 0x12	; 18
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	f8 94       	cli
    2622:	de bf       	out	0x3e, r29	; 62
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <LCD_sendCommand>
}
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <main>:
uint8 pass_comp[PASSWORD_NUMBER];/*array of 5 element ,use as a compare password with stored in EEPROM*/

extern uint8 holed_system;

int main(void)
{
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	cc 59       	subi	r28, 0x9C	; 156
    2650:	d0 40       	sbci	r29, 0x00	; 0
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
	uint8 recieve_byte,match_login=0,count,slec_option,res_match,error=0;
    265c:	fe 01       	movw	r30, r28
    265e:	ed 57       	subi	r30, 0x7D	; 125
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	10 82       	st	Z, r1
    2664:	fe 01       	movw	r30, r28
    2666:	e1 58       	subi	r30, 0x81	; 129
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	10 82       	st	Z, r1
	/* Enable Global Interrupt I-Bit */
	SREG=(1<<7);
    266c:	ef e5       	ldi	r30, 0x5F	; 95
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 e8       	ldi	r24, 0x80	; 128
    2672:	80 83       	st	Z, r24
	/* Initialize the LCD Driver */
	LCD_init();
    2674:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_init>

	/* Create configuration structure for timer0 driver */
	Timer_ConfigType config_time={0,7813,Timer_1,F_CPU_CLOCK_1024,Compare};
    2678:	ce 01       	movw	r24, r28
    267a:	8b 57       	subi	r24, 0x7B	; 123
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	cd 56       	subi	r28, 0x6D	; 109
    2680:	df 4f       	sbci	r29, 0xFF	; 255
    2682:	99 83       	std	Y+1, r25	; 0x01
    2684:	88 83       	st	Y, r24
    2686:	c3 59       	subi	r28, 0x93	; 147
    2688:	d0 40       	sbci	r29, 0x00	; 0
    268a:	87 e3       	ldi	r24, 0x37	; 55
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	cb 56       	subi	r28, 0x6B	; 107
    2690:	df 4f       	sbci	r29, 0xFF	; 255
    2692:	99 83       	std	Y+1, r25	; 0x01
    2694:	88 83       	st	Y, r24
    2696:	c5 59       	subi	r28, 0x95	; 149
    2698:	d0 40       	sbci	r29, 0x00	; 0
    269a:	9b e0       	ldi	r25, 0x0B	; 11
    269c:	c9 56       	subi	r28, 0x69	; 105
    269e:	df 4f       	sbci	r29, 0xFF	; 255
    26a0:	98 83       	st	Y, r25
    26a2:	c7 59       	subi	r28, 0x97	; 151
    26a4:	d0 40       	sbci	r29, 0x00	; 0
    26a6:	cb 56       	subi	r28, 0x6B	; 107
    26a8:	df 4f       	sbci	r29, 0xFF	; 255
    26aa:	e8 81       	ld	r30, Y
    26ac:	f9 81       	ldd	r31, Y+1	; 0x01
    26ae:	c5 59       	subi	r28, 0x95	; 149
    26b0:	d0 40       	sbci	r29, 0x00	; 0
    26b2:	00 80       	ld	r0, Z
    26b4:	cb 56       	subi	r28, 0x6B	; 107
    26b6:	df 4f       	sbci	r29, 0xFF	; 255
    26b8:	88 81       	ld	r24, Y
    26ba:	99 81       	ldd	r25, Y+1	; 0x01
    26bc:	c5 59       	subi	r28, 0x95	; 149
    26be:	d0 40       	sbci	r29, 0x00	; 0
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	cb 56       	subi	r28, 0x6B	; 107
    26c4:	df 4f       	sbci	r29, 0xFF	; 255
    26c6:	99 83       	std	Y+1, r25	; 0x01
    26c8:	88 83       	st	Y, r24
    26ca:	c5 59       	subi	r28, 0x95	; 149
    26cc:	d0 40       	sbci	r29, 0x00	; 0
    26ce:	cd 56       	subi	r28, 0x6D	; 109
    26d0:	df 4f       	sbci	r29, 0xFF	; 255
    26d2:	e8 81       	ld	r30, Y
    26d4:	f9 81       	ldd	r31, Y+1	; 0x01
    26d6:	c3 59       	subi	r28, 0x93	; 147
    26d8:	d0 40       	sbci	r29, 0x00	; 0
    26da:	00 82       	st	Z, r0
    26dc:	cd 56       	subi	r28, 0x6D	; 109
    26de:	df 4f       	sbci	r29, 0xFF	; 255
    26e0:	88 81       	ld	r24, Y
    26e2:	99 81       	ldd	r25, Y+1	; 0x01
    26e4:	c3 59       	subi	r28, 0x93	; 147
    26e6:	d0 40       	sbci	r29, 0x00	; 0
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	cd 56       	subi	r28, 0x6D	; 109
    26ec:	df 4f       	sbci	r29, 0xFF	; 255
    26ee:	99 83       	std	Y+1, r25	; 0x01
    26f0:	88 83       	st	Y, r24
    26f2:	c3 59       	subi	r28, 0x93	; 147
    26f4:	d0 40       	sbci	r29, 0x00	; 0
    26f6:	c9 56       	subi	r28, 0x69	; 105
    26f8:	df 4f       	sbci	r29, 0xFF	; 255
    26fa:	98 81       	ld	r25, Y
    26fc:	c7 59       	subi	r28, 0x97	; 151
    26fe:	d0 40       	sbci	r29, 0x00	; 0
    2700:	91 50       	subi	r25, 0x01	; 1
    2702:	c9 56       	subi	r28, 0x69	; 105
    2704:	df 4f       	sbci	r29, 0xFF	; 255
    2706:	98 83       	st	Y, r25
    2708:	c7 59       	subi	r28, 0x97	; 151
    270a:	d0 40       	sbci	r29, 0x00	; 0
    270c:	c9 56       	subi	r28, 0x69	; 105
    270e:	df 4f       	sbci	r29, 0xFF	; 255
    2710:	e8 81       	ld	r30, Y
    2712:	c7 59       	subi	r28, 0x97	; 151
    2714:	d0 40       	sbci	r29, 0x00	; 0
    2716:	ee 23       	and	r30, r30
    2718:	31 f6       	brne	.-116    	; 0x26a6 <main+0x64>

	/* Create configuration structure for URT driver */
	Uart_ConfigType config={STOP_BIT_1,BIT_8,DISABLED};
    271a:	ce 01       	movw	r24, r28
    271c:	80 57       	subi	r24, 0x70	; 112
    271e:	9f 4f       	sbci	r25, 0xFF	; 255
    2720:	c8 56       	subi	r28, 0x68	; 104
    2722:	df 4f       	sbci	r29, 0xFF	; 255
    2724:	99 83       	std	Y+1, r25	; 0x01
    2726:	88 83       	st	Y, r24
    2728:	c8 59       	subi	r28, 0x98	; 152
    272a:	d0 40       	sbci	r29, 0x00	; 0
    272c:	84 e3       	ldi	r24, 0x34	; 52
    272e:	91 e0       	ldi	r25, 0x01	; 1
    2730:	c6 56       	subi	r28, 0x66	; 102
    2732:	df 4f       	sbci	r29, 0xFF	; 255
    2734:	99 83       	std	Y+1, r25	; 0x01
    2736:	88 83       	st	Y, r24
    2738:	ca 59       	subi	r28, 0x9A	; 154
    273a:	d0 40       	sbci	r29, 0x00	; 0
    273c:	93 e0       	ldi	r25, 0x03	; 3
    273e:	c4 56       	subi	r28, 0x64	; 100
    2740:	df 4f       	sbci	r29, 0xFF	; 255
    2742:	98 83       	st	Y, r25
    2744:	cc 59       	subi	r28, 0x9C	; 156
    2746:	d0 40       	sbci	r29, 0x00	; 0
    2748:	c6 56       	subi	r28, 0x66	; 102
    274a:	df 4f       	sbci	r29, 0xFF	; 255
    274c:	e8 81       	ld	r30, Y
    274e:	f9 81       	ldd	r31, Y+1	; 0x01
    2750:	ca 59       	subi	r28, 0x9A	; 154
    2752:	d0 40       	sbci	r29, 0x00	; 0
    2754:	00 80       	ld	r0, Z
    2756:	c6 56       	subi	r28, 0x66	; 102
    2758:	df 4f       	sbci	r29, 0xFF	; 255
    275a:	88 81       	ld	r24, Y
    275c:	99 81       	ldd	r25, Y+1	; 0x01
    275e:	ca 59       	subi	r28, 0x9A	; 154
    2760:	d0 40       	sbci	r29, 0x00	; 0
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	c6 56       	subi	r28, 0x66	; 102
    2766:	df 4f       	sbci	r29, 0xFF	; 255
    2768:	99 83       	std	Y+1, r25	; 0x01
    276a:	88 83       	st	Y, r24
    276c:	ca 59       	subi	r28, 0x9A	; 154
    276e:	d0 40       	sbci	r29, 0x00	; 0
    2770:	c8 56       	subi	r28, 0x68	; 104
    2772:	df 4f       	sbci	r29, 0xFF	; 255
    2774:	e8 81       	ld	r30, Y
    2776:	f9 81       	ldd	r31, Y+1	; 0x01
    2778:	c8 59       	subi	r28, 0x98	; 152
    277a:	d0 40       	sbci	r29, 0x00	; 0
    277c:	00 82       	st	Z, r0
    277e:	c8 56       	subi	r28, 0x68	; 104
    2780:	df 4f       	sbci	r29, 0xFF	; 255
    2782:	88 81       	ld	r24, Y
    2784:	99 81       	ldd	r25, Y+1	; 0x01
    2786:	c8 59       	subi	r28, 0x98	; 152
    2788:	d0 40       	sbci	r29, 0x00	; 0
    278a:	01 96       	adiw	r24, 0x01	; 1
    278c:	c8 56       	subi	r28, 0x68	; 104
    278e:	df 4f       	sbci	r29, 0xFF	; 255
    2790:	99 83       	std	Y+1, r25	; 0x01
    2792:	88 83       	st	Y, r24
    2794:	c8 59       	subi	r28, 0x98	; 152
    2796:	d0 40       	sbci	r29, 0x00	; 0
    2798:	c4 56       	subi	r28, 0x64	; 100
    279a:	df 4f       	sbci	r29, 0xFF	; 255
    279c:	98 81       	ld	r25, Y
    279e:	cc 59       	subi	r28, 0x9C	; 156
    27a0:	d0 40       	sbci	r29, 0x00	; 0
    27a2:	91 50       	subi	r25, 0x01	; 1
    27a4:	c4 56       	subi	r28, 0x64	; 100
    27a6:	df 4f       	sbci	r29, 0xFF	; 255
    27a8:	98 83       	st	Y, r25
    27aa:	cc 59       	subi	r28, 0x9C	; 156
    27ac:	d0 40       	sbci	r29, 0x00	; 0
    27ae:	c4 56       	subi	r28, 0x64	; 100
    27b0:	df 4f       	sbci	r29, 0xFF	; 255
    27b2:	e8 81       	ld	r30, Y
    27b4:	cc 59       	subi	r28, 0x9C	; 156
    27b6:	d0 40       	sbci	r29, 0x00	; 0
    27b8:	ee 23       	and	r30, r30
    27ba:	31 f6       	brne	.-116    	; 0x2748 <main+0x106>

	/* Initialize the URT Driver */
	UART_init(&config);
    27bc:	ce 01       	movw	r24, r28
    27be:	80 57       	subi	r24, 0x70	; 112
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <UART_init>

	/* Send MC2_READY byte to MC2 to ask it to send the Byte */
	UART_sendByte(MC1_READY);
    27c6:	80 e1       	ldi	r24, 0x10	; 16
    27c8:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>

	/* Receive Byte from MC1 through UART */
	recieve_byte=UART_recieveByte();
    27cc:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    27d0:	fe 01       	movw	r30, r28
    27d2:	ec 57       	subi	r30, 0x7C	; 124
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	80 83       	st	Z, r24

	/*if recieve_byte =0 ,is the first time to login,and ask user to enter password to store it  */
	if(recieve_byte==0xff){
    27d8:	fe 01       	movw	r30, r28
    27da:	ec 57       	subi	r30, 0x7C	; 124
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 81       	ld	r24, Z
    27e0:	8f 3f       	cpi	r24, 0xFF	; 255
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <main+0x1a4>
    27e4:	70 c2       	rjmp	.+1248   	; 0x2cc6 <main+0x684>
		LCD_displayString("Hello !!");
    27e6:	8e ec       	ldi	r24, 0xCE	; 206
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
    27ee:	fe 01       	movw	r30, r28
    27f0:	e5 58       	subi	r30, 0x85	; 133
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	aa ef       	ldi	r26, 0xFA	; 250
    27fa:	b4 e4       	ldi	r27, 0x44	; 68
    27fc:	80 83       	st	Z, r24
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	a2 83       	std	Z+2, r26	; 0x02
    2802:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	8e 01       	movw	r16, r28
    2806:	09 58       	subi	r16, 0x89	; 137
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	e5 58       	subi	r30, 0x85	; 133
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a ef       	ldi	r20, 0xFA	; 250
    281e:	54 e4       	ldi	r21, 0x44	; 68
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	f8 01       	movw	r30, r16
    282a:	80 83       	st	Z, r24
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	a2 83       	std	Z+2, r26	; 0x02
    2830:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2832:	fe 01       	movw	r30, r28
    2834:	e9 58       	subi	r30, 0x89	; 137
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	60 81       	ld	r22, Z
    283a:	71 81       	ldd	r23, Z+1	; 0x01
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	93 81       	ldd	r25, Z+3	; 0x03
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	44 f4       	brge	.+16     	; 0x2860 <main+0x21e>
		__ticks = 1;
    2850:	fe 01       	movw	r30, r28
    2852:	eb 58       	subi	r30, 0x8B	; 139
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	91 83       	std	Z+1, r25	; 0x01
    285c:	80 83       	st	Z, r24
    285e:	64 c0       	rjmp	.+200    	; 0x2928 <main+0x2e6>
	else if (__tmp > 65535)
    2860:	fe 01       	movw	r30, r28
    2862:	e9 58       	subi	r30, 0x89	; 137
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	60 81       	ld	r22, Z
    2868:	71 81       	ldd	r23, Z+1	; 0x01
    286a:	82 81       	ldd	r24, Z+2	; 0x02
    286c:	93 81       	ldd	r25, Z+3	; 0x03
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	0c f0       	brlt	.+2      	; 0x2880 <main+0x23e>
    287e:	43 c0       	rjmp	.+134    	; 0x2906 <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	fe 01       	movw	r30, r28
    2882:	e5 58       	subi	r30, 0x85	; 133
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8e 01       	movw	r16, r28
    28a0:	0b 58       	subi	r16, 0x8B	; 139
    28a2:	1f 4f       	sbci	r17, 0xFF	; 255
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	f8 01       	movw	r30, r16
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
    28b6:	1f c0       	rjmp	.+62     	; 0x28f6 <main+0x2b4>
    28b8:	fe 01       	movw	r30, r28
    28ba:	ed 58       	subi	r30, 0x8D	; 141
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	88 ec       	ldi	r24, 0xC8	; 200
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	80 83       	st	Z, r24
    28c6:	fe 01       	movw	r30, r28
    28c8:	ed 58       	subi	r30, 0x8D	; 141
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <main+0x28e>
    28d4:	fe 01       	movw	r30, r28
    28d6:	ed 58       	subi	r30, 0x8D	; 141
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	de 01       	movw	r26, r28
    28e0:	ab 58       	subi	r26, 0x8B	; 139
    28e2:	bf 4f       	sbci	r27, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	eb 58       	subi	r30, 0x8B	; 139
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	11 96       	adiw	r26, 0x01	; 1
    28f2:	9c 93       	st	X, r25
    28f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f6:	fe 01       	movw	r30, r28
    28f8:	eb 58       	subi	r30, 0x8B	; 139
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	d1 f6       	brne	.-76     	; 0x28b8 <main+0x276>
    2904:	fd c0       	rjmp	.+506    	; 0x2b00 <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2906:	8e 01       	movw	r16, r28
    2908:	0b 58       	subi	r16, 0x8B	; 139
    290a:	1f 4f       	sbci	r17, 0xFF	; 255
    290c:	fe 01       	movw	r30, r28
    290e:	e9 58       	subi	r30, 0x89	; 137
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	93 81       	ldd	r25, Z+3	; 0x03
    291a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291e:	dc 01       	movw	r26, r24
    2920:	cb 01       	movw	r24, r22
    2922:	f8 01       	movw	r30, r16
    2924:	91 83       	std	Z+1, r25	; 0x01
    2926:	80 83       	st	Z, r24
    2928:	de 01       	movw	r26, r28
    292a:	af 58       	subi	r26, 0x8F	; 143
    292c:	bf 4f       	sbci	r27, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	eb 58       	subi	r30, 0x8B	; 139
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	11 96       	adiw	r26, 0x01	; 1
    293a:	9c 93       	st	X, r25
    293c:	8e 93       	st	-X, r24
    293e:	fe 01       	movw	r30, r28
    2940:	ef 58       	subi	r30, 0x8F	; 143
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <main+0x306>
    294c:	fe 01       	movw	r30, r28
    294e:	ef 58       	subi	r30, 0x8F	; 143
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	80 83       	st	Z, r24
    2956:	d4 c0       	rjmp	.+424    	; 0x2b00 <main+0x4be>
		_delay_ms(2000);
		/*while match_loin=0 , the two password is not match and ask user again*/
		while(match_login!=1){
			match_login=first_login_password_enter(pass,pass_comp);
    2958:	8b e4       	ldi	r24, 0x4B	; 75
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	20 e5       	ldi	r18, 0x50	; 80
    295e:	31 e0       	ldi	r19, 0x01	; 1
    2960:	b9 01       	movw	r22, r18
    2962:	0e 94 43 06 	call	0xc86	; 0xc86 <first_login_password_enter>
    2966:	fe 01       	movw	r30, r28
    2968:	ed 57       	subi	r30, 0x7D	; 125
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 83       	st	Z, r24
			if(match_login==0){/*in case two password not match*/
    296e:	fe 01       	movw	r30, r28
    2970:	ed 57       	subi	r30, 0x7D	; 125
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	88 23       	and	r24, r24
    2978:	09 f0       	breq	.+2      	; 0x297c <main+0x33a>
    297a:	c2 c0       	rjmp	.+388    	; 0x2b00 <main+0x4be>
				LCD_displayStringRowColumn(0,0,"Not Match");
    297c:	27 ed       	ldi	r18, 0xD7	; 215
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	a9 01       	movw	r20, r18
    2986:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Enter Again");
    298a:	21 ee       	ldi	r18, 0xE1	; 225
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	a9 01       	movw	r20, r18
    2994:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
    2998:	fe 01       	movw	r30, r28
    299a:	e3 59       	subi	r30, 0x93	; 147
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	aa ef       	ldi	r26, 0xFA	; 250
    29a4:	b4 e4       	ldi	r27, 0x44	; 68
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	8e 01       	movw	r16, r28
    29b0:	07 59       	subi	r16, 0x97	; 151
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
    29b4:	fe 01       	movw	r30, r28
    29b6:	e3 59       	subi	r30, 0x93	; 147
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	f8 01       	movw	r30, r16
    29d4:	80 83       	st	Z, r24
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	a2 83       	std	Z+2, r26	; 0x02
    29da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29dc:	fe 01       	movw	r30, r28
    29de:	e7 59       	subi	r30, 0x97	; 151
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	44 f4       	brge	.+16     	; 0x2a0a <main+0x3c8>
		__ticks = 1;
    29fa:	fe 01       	movw	r30, r28
    29fc:	e9 59       	subi	r30, 0x99	; 153
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	64 c0       	rjmp	.+200    	; 0x2ad2 <main+0x490>
	else if (__tmp > 65535)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e7 59       	subi	r30, 0x97	; 151
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	0c f0       	brlt	.+2      	; 0x2a2a <main+0x3e8>
    2a28:	43 c0       	rjmp	.+134    	; 0x2ab0 <main+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	e3 59       	subi	r30, 0x93	; 147
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8e 01       	movw	r16, r28
    2a4a:	09 59       	subi	r16, 0x99	; 153
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
    2a60:	1f c0       	rjmp	.+62     	; 0x2aa0 <main+0x45e>
    2a62:	fe 01       	movw	r30, r28
    2a64:	eb 59       	subi	r30, 0x9B	; 155
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	88 ec       	ldi	r24, 0xC8	; 200
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	fe 01       	movw	r30, r28
    2a72:	eb 59       	subi	r30, 0x9B	; 155
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <main+0x438>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	eb 59       	subi	r30, 0x9B	; 155
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	de 01       	movw	r26, r28
    2a8a:	a9 59       	subi	r26, 0x99	; 153
    2a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e9 59       	subi	r30, 0x99	; 153
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	9c 93       	st	X, r25
    2a9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e9 59       	subi	r30, 0x99	; 153
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	d1 f6       	brne	.-76     	; 0x2a62 <main+0x420>
    2aae:	28 c0       	rjmp	.+80     	; 0x2b00 <main+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	09 59       	subi	r16, 0x99	; 153
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e7 59       	subi	r30, 0x97	; 151
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	f8 01       	movw	r30, r16
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	de 01       	movw	r26, r28
    2ad4:	ad 59       	subi	r26, 0x9D	; 157
    2ad6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e9 59       	subi	r30, 0x99	; 153
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	11 96       	adiw	r26, 0x01	; 1
    2ae4:	9c 93       	st	X, r25
    2ae6:	8e 93       	st	-X, r24
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 59       	subi	r30, 0x9D	; 157
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <main+0x4b0>
    2af6:	fe 01       	movw	r30, r28
    2af8:	ed 59       	subi	r30, 0x9D	; 157
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	91 83       	std	Z+1, r25	; 0x01
    2afe:	80 83       	st	Z, r24
	/*if recieve_byte =0 ,is the first time to login,and ask user to enter password to store it  */
	if(recieve_byte==0xff){
		LCD_displayString("Hello !!");
		_delay_ms(2000);
		/*while match_loin=0 , the two password is not match and ask user again*/
		while(match_login!=1){
    2b00:	fe 01       	movw	r30, r28
    2b02:	ed 57       	subi	r30, 0x7D	; 125
    2b04:	ff 4f       	sbci	r31, 0xFF	; 255
    2b06:	80 81       	ld	r24, Z
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <main+0x4cc>
    2b0c:	25 cf       	rjmp	.-438    	; 0x2958 <main+0x316>
				LCD_displayStringRowColumn(1,0,"Enter Again");
				_delay_ms(2000);
			}
		}
		/*clear match_login ,so using again*/
		match_login=0;
    2b0e:	fe 01       	movw	r30, r28
    2b10:	ed 57       	subi	r30, 0x7D	; 125
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	10 82       	st	Z, r1

		/*send password to MC1 to store in EEPROM*/
		for(count=0 ;count<PASSWORD_NUMBER;count++){
    2b16:	fe 01       	movw	r30, r28
    2b18:	ee 57       	subi	r30, 0x7E	; 126
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	10 82       	st	Z, r1
    2b1e:	cc c0       	rjmp	.+408    	; 0x2cb8 <main+0x676>
			/* Wait until MC2 is ready to receive the Byte */
			while(UART_recieveByte() != MC1_READY){}
    2b20:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    2b24:	80 31       	cpi	r24, 0x10	; 16
    2b26:	e1 f7       	brne	.-8      	; 0x2b20 <main+0x4de>
			/* Send the required Byte to MC2 through UART */
			UART_sendByte(pass[count]);
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ee 57       	subi	r30, 0x7E	; 126
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	fc 01       	movw	r30, r24
    2b36:	e5 5b       	subi	r30, 0xB5	; 181
    2b38:	fe 4f       	sbci	r31, 0xFE	; 254
    2b3a:	80 81       	ld	r24, Z
    2b3c:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
    2b40:	fe 01       	movw	r30, r28
    2b42:	e1 5a       	subi	r30, 0xA1	; 161
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e7       	ldi	r26, 0x70	; 112
    2b4c:	b2 e4       	ldi	r27, 0x42	; 66
    2b4e:	80 83       	st	Z, r24
    2b50:	91 83       	std	Z+1, r25	; 0x01
    2b52:	a2 83       	std	Z+2, r26	; 0x02
    2b54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	8e 01       	movw	r16, r28
    2b58:	05 5a       	subi	r16, 0xA5	; 165
    2b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e1 5a       	subi	r30, 0xA1	; 161
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	93 81       	ldd	r25, Z+3	; 0x03
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	80 83       	st	Z, r24
    2b7e:	91 83       	std	Z+1, r25	; 0x01
    2b80:	a2 83       	std	Z+2, r26	; 0x02
    2b82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b84:	fe 01       	movw	r30, r28
    2b86:	e5 5a       	subi	r30, 0xA5	; 165
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e8       	ldi	r20, 0x80	; 128
    2b98:	5f e3       	ldi	r21, 0x3F	; 63
    2b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b9e:	88 23       	and	r24, r24
    2ba0:	44 f4       	brge	.+16     	; 0x2bb2 <main+0x570>
		__ticks = 1;
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e7 5a       	subi	r30, 0xA7	; 167
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
    2bb0:	64 c0       	rjmp	.+200    	; 0x2c7a <main+0x638>
	else if (__tmp > 65535)
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e5 5a       	subi	r30, 0xA5	; 165
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	82 81       	ldd	r24, Z+2	; 0x02
    2bbe:	93 81       	ldd	r25, Z+3	; 0x03
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	0c f0       	brlt	.+2      	; 0x2bd2 <main+0x590>
    2bd0:	43 c0       	rjmp	.+134    	; 0x2c58 <main+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e1 5a       	subi	r30, 0xA1	; 161
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	60 81       	ld	r22, Z
    2bda:	71 81       	ldd	r23, Z+1	; 0x01
    2bdc:	82 81       	ldd	r24, Z+2	; 0x02
    2bde:	93 81       	ldd	r25, Z+3	; 0x03
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e2       	ldi	r20, 0x20	; 32
    2be6:	51 e4       	ldi	r21, 0x41	; 65
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	8e 01       	movw	r16, r28
    2bf2:	07 5a       	subi	r16, 0xA7	; 167
    2bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	f8 01       	movw	r30, r16
    2c04:	91 83       	std	Z+1, r25	; 0x01
    2c06:	80 83       	st	Z, r24
    2c08:	1f c0       	rjmp	.+62     	; 0x2c48 <main+0x606>
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e9 5a       	subi	r30, 0xA9	; 169
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	88 ec       	ldi	r24, 0xC8	; 200
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e9 5a       	subi	r30, 0xA9	; 169
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	80 81       	ld	r24, Z
    2c20:	91 81       	ldd	r25, Z+1	; 0x01
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <main+0x5e0>
    2c26:	fe 01       	movw	r30, r28
    2c28:	e9 5a       	subi	r30, 0xA9	; 169
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	de 01       	movw	r26, r28
    2c32:	a7 5a       	subi	r26, 0xA7	; 167
    2c34:	bf 4f       	sbci	r27, 0xFF	; 255
    2c36:	fe 01       	movw	r30, r28
    2c38:	e7 5a       	subi	r30, 0xA7	; 167
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	11 96       	adiw	r26, 0x01	; 1
    2c44:	9c 93       	st	X, r25
    2c46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e7 5a       	subi	r30, 0xA7	; 167
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	91 81       	ldd	r25, Z+1	; 0x01
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	d1 f6       	brne	.-76     	; 0x2c0a <main+0x5c8>
    2c56:	27 c0       	rjmp	.+78     	; 0x2ca6 <main+0x664>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c58:	8e 01       	movw	r16, r28
    2c5a:	07 5a       	subi	r16, 0xA7	; 167
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e5 5a       	subi	r30, 0xA5	; 165
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	60 81       	ld	r22, Z
    2c66:	71 81       	ldd	r23, Z+1	; 0x01
    2c68:	82 81       	ldd	r24, Z+2	; 0x02
    2c6a:	93 81       	ldd	r25, Z+3	; 0x03
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	91 83       	std	Z+1, r25	; 0x01
    2c78:	80 83       	st	Z, r24
    2c7a:	de 01       	movw	r26, r28
    2c7c:	ab 5a       	subi	r26, 0xAB	; 171
    2c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c80:	fe 01       	movw	r30, r28
    2c82:	e7 5a       	subi	r30, 0xA7	; 167
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	8d 93       	st	X+, r24
    2c8c:	9c 93       	st	X, r25
    2c8e:	fe 01       	movw	r30, r28
    2c90:	eb 5a       	subi	r30, 0xAB	; 171
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <main+0x656>
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	eb 5a       	subi	r30, 0xAB	; 171
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
		}
		/*clear match_login ,so using again*/
		match_login=0;

		/*send password to MC1 to store in EEPROM*/
		for(count=0 ;count<PASSWORD_NUMBER;count++){
    2ca6:	de 01       	movw	r26, r28
    2ca8:	ae 57       	subi	r26, 0x7E	; 126
    2caa:	bf 4f       	sbci	r27, 0xFF	; 255
    2cac:	fe 01       	movw	r30, r28
    2cae:	ee 57       	subi	r30, 0x7E	; 126
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	8f 5f       	subi	r24, 0xFF	; 255
    2cb6:	8c 93       	st	X, r24
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ee 57       	subi	r30, 0x7E	; 126
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	85 30       	cpi	r24, 0x05	; 5
    2cc2:	08 f4       	brcc	.+2      	; 0x2cc6 <main+0x684>
    2cc4:	2d cf       	rjmp	.-422    	; 0x2b20 <main+0x4de>

		/*select_option() return '+' or '-'
		 * '+':to open door
		 * '-':to change password
		 */
		slec_option=select_option();
    2cc6:	0e 94 a3 05 	call	0xb46	; 0xb46 <select_option>
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ef 57       	subi	r30, 0x7F	; 127
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 83       	st	Z, r24
		/*clear res_match as default ,
		 * when res_match = 1 ,the enter password from user is equal the password in EEPROM
		 * when res_match = 0 ,the enter password from user is not equal the password in EEPROM
		 */
		res_match=0;
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e0 58       	subi	r30, 0x80	; 128
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	10 82       	st	Z, r1
		if(slec_option=='+'){/*user select open door*/
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ef 57       	subi	r30, 0x7F	; 127
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8b 32       	cpi	r24, 0x2B	; 43
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <main+0x6a6>
    2ce6:	e0 c1       	rjmp	.+960    	; 0x30a8 <main+0xa66>
			/* Wait until MC2 is ready to receive the Byte */
			while(UART_recieveByte() != MC1_READY){}
    2ce8:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    2cec:	80 31       	cpi	r24, 0x10	; 16
    2cee:	e1 f7       	brne	.-8      	; 0x2ce8 <main+0x6a6>
			/* Send the required Byte to MC2 through UART */
			UART_sendByte(slec_option);
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ef 57       	subi	r30, 0x7F	; 127
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
    2cfc:	bf c1       	rjmp	.+894    	; 0x307c <main+0xa3a>
			/*looping until enter correct password,only 3 time enter*/
			while(error<3 && res_match==0){
				/*function to take password from user to open door*/
				enter_password(pass);
    2cfe:	8b e4       	ldi	r24, 0x4B	; 75
    2d00:	91 e0       	ldi	r25, 0x01	; 1
    2d02:	0e 94 94 08 	call	0x1128	; 0x1128 <enter_password>
				/* Wait until MC2 is ready to receive the Byte */
				while(UART_recieveByte() != MC1_READY){}
    2d06:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    2d0a:	80 31       	cpi	r24, 0x10	; 16
    2d0c:	e1 f7       	brne	.-8      	; 0x2d06 <main+0x6c4>
				/*send password to MC2 ,to check match this password with password stored in EEPROM*/
				for(count=0 ;count<PASSWORD_NUMBER;count++){
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ee 57       	subi	r30, 0x7E	; 126
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	10 82       	st	Z, r1
    2d16:	c8 c0       	rjmp	.+400    	; 0x2ea8 <main+0x866>
					/* Send the required Byte to MC2 through UART */
					UART_sendByte(pass[count]);
    2d18:	fe 01       	movw	r30, r28
    2d1a:	ee 57       	subi	r30, 0x7E	; 126
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	fc 01       	movw	r30, r24
    2d26:	e5 5b       	subi	r30, 0xB5	; 181
    2d28:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2a:	80 81       	ld	r24, Z
    2d2c:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
    2d30:	fe 01       	movw	r30, r28
    2d32:	ef 5a       	subi	r30, 0xAF	; 175
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 e7       	ldi	r26, 0x70	; 112
    2d3c:	b2 e4       	ldi	r27, 0x42	; 66
    2d3e:	80 83       	st	Z, r24
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	a2 83       	std	Z+2, r26	; 0x02
    2d44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	8e 01       	movw	r16, r28
    2d48:	03 5b       	subi	r16, 0xB3	; 179
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ef 5a       	subi	r30, 0xAF	; 175
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	4a ef       	ldi	r20, 0xFA	; 250
    2d60:	54 e4       	ldi	r21, 0x44	; 68
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	f8 01       	movw	r30, r16
    2d6c:	80 83       	st	Z, r24
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	a2 83       	std	Z+2, r26	; 0x02
    2d72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d74:	fe 01       	movw	r30, r28
    2d76:	e3 5b       	subi	r30, 0xB3	; 179
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	44 f4       	brge	.+16     	; 0x2da2 <main+0x760>
		__ticks = 1;
    2d92:	fe 01       	movw	r30, r28
    2d94:	e5 5b       	subi	r30, 0xB5	; 181
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
    2da0:	64 c0       	rjmp	.+200    	; 0x2e6a <main+0x828>
	else if (__tmp > 65535)
    2da2:	fe 01       	movw	r30, r28
    2da4:	e3 5b       	subi	r30, 0xB3	; 179
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	60 81       	ld	r22, Z
    2daa:	71 81       	ldd	r23, Z+1	; 0x01
    2dac:	82 81       	ldd	r24, Z+2	; 0x02
    2dae:	93 81       	ldd	r25, Z+3	; 0x03
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	3f ef       	ldi	r19, 0xFF	; 255
    2db4:	4f e7       	ldi	r20, 0x7F	; 127
    2db6:	57 e4       	ldi	r21, 0x47	; 71
    2db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dbc:	18 16       	cp	r1, r24
    2dbe:	0c f0       	brlt	.+2      	; 0x2dc2 <main+0x780>
    2dc0:	43 c0       	rjmp	.+134    	; 0x2e48 <main+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ef 5a       	subi	r30, 0xAF	; 175
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8e 01       	movw	r16, r28
    2de2:	05 5b       	subi	r16, 0xB5	; 181
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	f8 01       	movw	r30, r16
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
    2df8:	1f c0       	rjmp	.+62     	; 0x2e38 <main+0x7f6>
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e7 5b       	subi	r30, 0xB7	; 183
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	88 ec       	ldi	r24, 0xC8	; 200
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e7 5b       	subi	r30, 0xB7	; 183
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 81       	ld	r24, Z
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <main+0x7d0>
    2e16:	fe 01       	movw	r30, r28
    2e18:	e7 5b       	subi	r30, 0xB7	; 183
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e20:	de 01       	movw	r26, r28
    2e22:	a5 5b       	subi	r26, 0xB5	; 181
    2e24:	bf 4f       	sbci	r27, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	e5 5b       	subi	r30, 0xB5	; 181
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	80 81       	ld	r24, Z
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	11 96       	adiw	r26, 0x01	; 1
    2e34:	9c 93       	st	X, r25
    2e36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 5b       	subi	r30, 0xB5	; 181
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	d1 f6       	brne	.-76     	; 0x2dfa <main+0x7b8>
    2e46:	27 c0       	rjmp	.+78     	; 0x2e96 <main+0x854>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e48:	8e 01       	movw	r16, r28
    2e4a:	05 5b       	subi	r16, 0xB5	; 181
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e3 5b       	subi	r30, 0xB3	; 179
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	f8 01       	movw	r30, r16
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	de 01       	movw	r26, r28
    2e6c:	a9 5b       	subi	r26, 0xB9	; 185
    2e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e70:	fe 01       	movw	r30, r28
    2e72:	e5 5b       	subi	r30, 0xB5	; 181
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	8d 93       	st	X+, r24
    2e7c:	9c 93       	st	X, r25
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e9 5b       	subi	r30, 0xB9	; 185
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <main+0x846>
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e9 5b       	subi	r30, 0xB9	; 185
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
				/*function to take password from user to open door*/
				enter_password(pass);
				/* Wait until MC2 is ready to receive the Byte */
				while(UART_recieveByte() != MC1_READY){}
				/*send password to MC2 ,to check match this password with password stored in EEPROM*/
				for(count=0 ;count<PASSWORD_NUMBER;count++){
    2e96:	de 01       	movw	r26, r28
    2e98:	ae 57       	subi	r26, 0x7E	; 126
    2e9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ee 57       	subi	r30, 0x7E	; 126
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	8f 5f       	subi	r24, 0xFF	; 255
    2ea6:	8c 93       	st	X, r24
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ee 57       	subi	r30, 0x7E	; 126
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	85 30       	cpi	r24, 0x05	; 5
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <main+0x874>
    2eb4:	31 cf       	rjmp	.-414    	; 0x2d18 <main+0x6d6>
				/*
				 * after sending password to MC2 to check match with the password in EEPROM
				 * Recieve the result with the UART
				 */
				/* Send MC2_READY byte to MC2 to ask it to send the Byte */
				UART_sendByte(MC1_READY);
    2eb6:	80 e1       	ldi	r24, 0x10	; 16
    2eb8:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
				/* Receive Byte from MC1 through UART */
				res_match = UART_recieveByte();
    2ebc:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e0 58       	subi	r30, 0x80	; 128
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	80 83       	st	Z, r24
				/*if check_match =0 ,password  incorrect , if check_match=1 ,password correct */
				if(res_match==0){/*password  incorrect*/
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e0 58       	subi	r30, 0x80	; 128
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	88 23       	and	r24, r24
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <main+0x894>
    2ed4:	bd c0       	rjmp	.+378    	; 0x3050 <main+0xa0e>
					LCD_clearScreen();
    2ed6:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
					error++;
    2eda:	de 01       	movw	r26, r28
    2edc:	a1 58       	subi	r26, 0x81	; 129
    2ede:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e1 58       	subi	r30, 0x81	; 129
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	8f 5f       	subi	r24, 0xFF	; 255
    2eea:	8c 93       	st	X, r24
					if(error<3){
    2eec:	fe 01       	movw	r30, r28
    2eee:	e1 58       	subi	r30, 0x81	; 129
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 81       	ld	r24, Z
    2ef4:	83 30       	cpi	r24, 0x03	; 3
    2ef6:	08 f0       	brcs	.+2      	; 0x2efa <main+0x8b8>
    2ef8:	94 c0       	rjmp	.+296    	; 0x3022 <main+0x9e0>

						LCD_displayStringRowColumn(0,0,"error password");
    2efa:	2d ee       	ldi	r18, 0xED	; 237
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	a9 01       	movw	r20, r18
    2f04:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"enter again");
    2f08:	2c ef       	ldi	r18, 0xFC	; 252
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	60 e0       	ldi	r22, 0x00	; 0
    2f10:	a9 01       	movw	r20, r18
    2f12:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
    2f16:	fe 01       	movw	r30, r28
    2f18:	ed 5b       	subi	r30, 0xBD	; 189
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	aa e7       	ldi	r26, 0x7A	; 122
    2f22:	b4 e4       	ldi	r27, 0x44	; 68
    2f24:	80 83       	st	Z, r24
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	a2 83       	std	Z+2, r26	; 0x02
    2f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	8e 01       	movw	r16, r28
    2f2e:	01 5c       	subi	r16, 0xC1	; 193
    2f30:	1f 4f       	sbci	r17, 0xFF	; 255
    2f32:	fe 01       	movw	r30, r28
    2f34:	ed 5b       	subi	r30, 0xBD	; 189
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4a ef       	ldi	r20, 0xFA	; 250
    2f46:	54 e4       	ldi	r21, 0x44	; 68
    2f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	f8 01       	movw	r30, r16
    2f52:	80 83       	st	Z, r24
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	a2 83       	std	Z+2, r26	; 0x02
    2f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ff 96       	adiw	r30, 0x3f	; 63
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <main+0x93e>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9e af       	std	Y+62, r25	; 0x3e
    2f7c:	8d af       	std	Y+61, r24	; 0x3d
    2f7e:	46 c0       	rjmp	.+140    	; 0x300c <main+0x9ca>
	else if (__tmp > 65535)
    2f80:	fe 01       	movw	r30, r28
    2f82:	ff 96       	adiw	r30, 0x3f	; 63
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	3f ef       	ldi	r19, 0xFF	; 255
    2f90:	4f e7       	ldi	r20, 0x7F	; 127
    2f92:	57 e4       	ldi	r21, 0x47	; 71
    2f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	64 f5       	brge	.+88     	; 0x2ff4 <main+0x9b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	ed 5b       	subi	r30, 0xBD	; 189
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9e af       	std	Y+62, r25	; 0x3e
    2fc8:	8d af       	std	Y+61, r24	; 0x3d
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <main+0x9a8>
    2fcc:	88 ec       	ldi	r24, 0xC8	; 200
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9c af       	std	Y+60, r25	; 0x3c
    2fd2:	8b af       	std	Y+59, r24	; 0x3b
    2fd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <main+0x996>
    2fdc:	9c af       	std	Y+60, r25	; 0x3c
    2fde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9e af       	std	Y+62, r25	; 0x3e
    2fe8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <main+0x98a>
    2ff2:	44 c0       	rjmp	.+136    	; 0x307c <main+0xa3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ff 96       	adiw	r30, 0x3f	; 63
    2ff8:	60 81       	ld	r22, Z
    2ffa:	71 81       	ldd	r23, Z+1	; 0x01
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9e af       	std	Y+62, r25	; 0x3e
    300a:	8d af       	std	Y+61, r24	; 0x3d
    300c:	8d ad       	ldd	r24, Y+61	; 0x3d
    300e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3010:	9a af       	std	Y+58, r25	; 0x3a
    3012:	89 af       	std	Y+57, r24	; 0x39
    3014:	89 ad       	ldd	r24, Y+57	; 0x39
    3016:	9a ad       	ldd	r25, Y+58	; 0x3a
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <main+0x9d6>
    301c:	9a af       	std	Y+58, r25	; 0x3a
    301e:	89 af       	std	Y+57, r24	; 0x39
    3020:	2d c0       	rjmp	.+90     	; 0x307c <main+0xa3a>
						_delay_ms(1000);
					}else if(error==3){
    3022:	fe 01       	movw	r30, r28
    3024:	e1 58       	subi	r30, 0x81	; 129
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	83 30       	cpi	r24, 0x03	; 3
    302c:	39 f5       	brne	.+78     	; 0x307c <main+0xa3a>

						/* Set the Call back function pointer in the timer0 driver */
						Timer_setCallBack(&error_3_password,Timer_1);
    302e:	8f ef       	ldi	r24, 0xFF	; 255
    3030:	99 e0       	ldi	r25, 0x09	; 9
    3032:	61 e0       	ldi	r22, 0x01	; 1
    3034:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <Timer_setCallBack>
						/* Initialize the timer0 Driver */
						Timer_intit(&config_time);
    3038:	ce 01       	movw	r24, r28
    303a:	8b 57       	subi	r24, 0x7B	; 123
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	0e 94 42 1c 	call	0x3884	; 0x3884 <Timer_intit>
						/*holed system until finish call back function*/
						while(holed_system==0 ){}
    3042:	80 91 44 01 	lds	r24, 0x0144
    3046:	88 23       	and	r24, r24
    3048:	e1 f3       	breq	.-8      	; 0x3042 <main+0xa00>
						/*clear holed_system for using again*/
						holed_system=0;
    304a:	10 92 44 01 	sts	0x0144, r1
    304e:	16 c0       	rjmp	.+44     	; 0x307c <main+0xa3a>

					}
				}else if(res_match==1){/*password correct*/
    3050:	fe 01       	movw	r30, r28
    3052:	e0 58       	subi	r30, 0x80	; 128
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	81 f4       	brne	.+32     	; 0x307c <main+0xa3a>
					/* Set the Call back function pointer in the timer0 driver */
					Timer_setCallBack(&Display,Timer_1);
    305c:	89 eb       	ldi	r24, 0xB9	; 185
    305e:	99 e0       	ldi	r25, 0x09	; 9
    3060:	61 e0       	ldi	r22, 0x01	; 1
    3062:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <Timer_setCallBack>
					/* Initialize the timer0 Driver */
					Timer_intit(&config_time);
    3066:	ce 01       	movw	r24, r28
    3068:	8b 57       	subi	r24, 0x7B	; 123
    306a:	9f 4f       	sbci	r25, 0xFF	; 255
    306c:	0e 94 42 1c 	call	0x3884	; 0x3884 <Timer_intit>
					/*holed system until finish call back function*/
					while(holed_system==0 ){}
    3070:	80 91 44 01 	lds	r24, 0x0144
    3074:	88 23       	and	r24, r24
    3076:	e1 f3       	breq	.-8      	; 0x3070 <main+0xa2e>
					/*clear holed_system for using again*/
					holed_system=0;
    3078:	10 92 44 01 	sts	0x0144, r1
			/* Wait until MC2 is ready to receive the Byte */
			while(UART_recieveByte() != MC1_READY){}
			/* Send the required Byte to MC2 through UART */
			UART_sendByte(slec_option);
			/*looping until enter correct password,only 3 time enter*/
			while(error<3 && res_match==0){
    307c:	fe 01       	movw	r30, r28
    307e:	e1 58       	subi	r30, 0x81	; 129
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	83 30       	cpi	r24, 0x03	; 3
    3086:	38 f4       	brcc	.+14     	; 0x3096 <main+0xa54>
    3088:	fe 01       	movw	r30, r28
    308a:	e0 58       	subi	r30, 0x80	; 128
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 81       	ld	r24, Z
    3090:	88 23       	and	r24, r24
    3092:	09 f4       	brne	.+2      	; 0x3096 <main+0xa54>
    3094:	34 ce       	rjmp	.-920    	; 0x2cfe <main+0x6bc>
					while(holed_system==0 ){}
					/*clear holed_system for using again*/
					holed_system=0;
				}
			}
			error=0;
    3096:	fe 01       	movw	r30, r28
    3098:	e1 58       	subi	r30, 0x81	; 129
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	10 82       	st	Z, r1
			slec_option=0;
    309e:	fe 01       	movw	r30, r28
    30a0:	ef 57       	subi	r30, 0x7F	; 127
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	10 82       	st	Z, r1
    30a6:	0f ce       	rjmp	.-994    	; 0x2cc6 <main+0x684>
		}
		else if(slec_option=='-'){/*user select change password*/
    30a8:	fe 01       	movw	r30, r28
    30aa:	ef 57       	subi	r30, 0x7F	; 127
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	80 81       	ld	r24, Z
    30b0:	8d 32       	cpi	r24, 0x2D	; 45
    30b2:	09 f0       	breq	.+2      	; 0x30b6 <main+0xa74>
    30b4:	08 ce       	rjmp	.-1008   	; 0x2cc6 <main+0x684>
			/* Wait until MC2 is ready to receive the Byte */
			while(UART_recieveByte() != MC1_READY){}
    30b6:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    30ba:	80 31       	cpi	r24, 0x10	; 16
    30bc:	e1 f7       	brne	.-8      	; 0x30b6 <main+0xa74>
			/* Send the required Byte to MC2 through UART */
			UART_sendByte(slec_option);
    30be:	fe 01       	movw	r30, r28
    30c0:	ef 57       	subi	r30, 0x7F	; 127
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	80 81       	ld	r24, Z
    30c6:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
    30ca:	94 c2       	rjmp	.+1320   	; 0x35f4 <main+0xfb2>
			/*looping until enter correct password,only 3 time enter*/
			while(error<3 && res_match==0){
				/*function to take password from user to open door*/
				enter_password(pass);
    30cc:	8b e4       	ldi	r24, 0x4B	; 75
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	0e 94 94 08 	call	0x1128	; 0x1128 <enter_password>
				/* Wait until MC2 is ready to receive the Byte */
				while(UART_recieveByte() != MC1_READY){}
    30d4:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    30d8:	80 31       	cpi	r24, 0x10	; 16
    30da:	e1 f7       	brne	.-8      	; 0x30d4 <main+0xa92>
				/*send password to MC2 ,to check match this password with password stored in EEPROM*/

				for(count=0 ;count<5;count++){
    30dc:	fe 01       	movw	r30, r28
    30de:	ee 57       	subi	r30, 0x7E	; 126
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	10 82       	st	Z, r1
    30e4:	87 c0       	rjmp	.+270    	; 0x31f4 <main+0xbb2>
					/* Send the required Byte to MC2 through UART */
					UART_sendByte(pass[count]);
    30e6:	fe 01       	movw	r30, r28
    30e8:	ee 57       	subi	r30, 0x7E	; 126
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	88 2f       	mov	r24, r24
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	fc 01       	movw	r30, r24
    30f4:	e5 5b       	subi	r30, 0xB5	; 181
    30f6:	fe 4f       	sbci	r31, 0xFE	; 254
    30f8:	80 81       	ld	r24, Z
    30fa:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 e7       	ldi	r26, 0x70	; 112
    3104:	b2 e4       	ldi	r27, 0x42	; 66
    3106:	8d ab       	std	Y+53, r24	; 0x35
    3108:	9e ab       	std	Y+54, r25	; 0x36
    310a:	af ab       	std	Y+55, r26	; 0x37
    310c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6d a9       	ldd	r22, Y+53	; 0x35
    3110:	7e a9       	ldd	r23, Y+54	; 0x36
    3112:	8f a9       	ldd	r24, Y+55	; 0x37
    3114:	98 ad       	ldd	r25, Y+56	; 0x38
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a ef       	ldi	r20, 0xFA	; 250
    311c:	54 e4       	ldi	r21, 0x44	; 68
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	89 ab       	std	Y+49, r24	; 0x31
    3128:	9a ab       	std	Y+50, r25	; 0x32
    312a:	ab ab       	std	Y+51, r26	; 0x33
    312c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    312e:	69 a9       	ldd	r22, Y+49	; 0x31
    3130:	7a a9       	ldd	r23, Y+50	; 0x32
    3132:	8b a9       	ldd	r24, Y+51	; 0x33
    3134:	9c a9       	ldd	r25, Y+52	; 0x34
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <main+0xb0e>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	98 ab       	std	Y+48, r25	; 0x30
    314c:	8f a7       	std	Y+47, r24	; 0x2f
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <main+0xb8c>
	else if (__tmp > 65535)
    3150:	69 a9       	ldd	r22, Y+49	; 0x31
    3152:	7a a9       	ldd	r23, Y+50	; 0x32
    3154:	8b a9       	ldd	r24, Y+51	; 0x33
    3156:	9c a9       	ldd	r25, Y+52	; 0x34
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <main+0xb78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6d a9       	ldd	r22, Y+53	; 0x35
    316a:	7e a9       	ldd	r23, Y+54	; 0x36
    316c:	8f a9       	ldd	r24, Y+55	; 0x37
    316e:	98 ad       	ldd	r25, Y+56	; 0x38
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	98 ab       	std	Y+48, r25	; 0x30
    318e:	8f a7       	std	Y+47, r24	; 0x2f
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <main+0xb6e>
    3192:	88 ec       	ldi	r24, 0xC8	; 200
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9e a7       	std	Y+46, r25	; 0x2e
    3198:	8d a7       	std	Y+45, r24	; 0x2d
    319a:	8d a5       	ldd	r24, Y+45	; 0x2d
    319c:	9e a5       	ldd	r25, Y+46	; 0x2e
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <main+0xb5c>
    31a2:	9e a7       	std	Y+46, r25	; 0x2e
    31a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a8:	98 a9       	ldd	r25, Y+48	; 0x30
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	98 ab       	std	Y+48, r25	; 0x30
    31ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    31b2:	98 a9       	ldd	r25, Y+48	; 0x30
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <main+0xb50>
    31b8:	14 c0       	rjmp	.+40     	; 0x31e2 <main+0xba0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	69 a9       	ldd	r22, Y+49	; 0x31
    31bc:	7a a9       	ldd	r23, Y+50	; 0x32
    31be:	8b a9       	ldd	r24, Y+51	; 0x33
    31c0:	9c a9       	ldd	r25, Y+52	; 0x34
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	98 ab       	std	Y+48, r25	; 0x30
    31cc:	8f a7       	std	Y+47, r24	; 0x2f
    31ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    31d0:	98 a9       	ldd	r25, Y+48	; 0x30
    31d2:	9c a7       	std	Y+44, r25	; 0x2c
    31d4:	8b a7       	std	Y+43, r24	; 0x2b
    31d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <main+0xb98>
    31de:	9c a7       	std	Y+44, r25	; 0x2c
    31e0:	8b a7       	std	Y+43, r24	; 0x2b
				enter_password(pass);
				/* Wait until MC2 is ready to receive the Byte */
				while(UART_recieveByte() != MC1_READY){}
				/*send password to MC2 ,to check match this password with password stored in EEPROM*/

				for(count=0 ;count<5;count++){
    31e2:	de 01       	movw	r26, r28
    31e4:	ae 57       	subi	r26, 0x7E	; 126
    31e6:	bf 4f       	sbci	r27, 0xFF	; 255
    31e8:	fe 01       	movw	r30, r28
    31ea:	ee 57       	subi	r30, 0x7E	; 126
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	80 81       	ld	r24, Z
    31f0:	8f 5f       	subi	r24, 0xFF	; 255
    31f2:	8c 93       	st	X, r24
    31f4:	fe 01       	movw	r30, r28
    31f6:	ee 57       	subi	r30, 0x7E	; 126
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	85 30       	cpi	r24, 0x05	; 5
    31fe:	08 f4       	brcc	.+2      	; 0x3202 <main+0xbc0>
    3200:	72 cf       	rjmp	.-284    	; 0x30e6 <main+0xaa4>
					UART_sendByte(pass[count]);
					_delay_ms(60);
				}

				/* Send MC2_READY byte to MC2 to ask it to send the Byte */
				UART_sendByte(MC1_READY);
    3202:	80 e1       	ldi	r24, 0x10	; 16
    3204:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
				/* Receive Byte from MC1 through UART */
				res_match=UART_recieveByte();
    3208:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    320c:	fe 01       	movw	r30, r28
    320e:	e0 58       	subi	r30, 0x80	; 128
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	80 83       	st	Z, r24

				/*if check_match =0 ,password incorrect , if check_match=1 ,password correct */

				if(res_match==0){/*password incorrect*/
    3214:	fe 01       	movw	r30, r28
    3216:	e0 58       	subi	r30, 0x80	; 128
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	88 23       	and	r24, r24
    321e:	09 f0       	breq	.+2      	; 0x3222 <main+0xbe0>
    3220:	ab c0       	rjmp	.+342    	; 0x3378 <main+0xd36>
					LCD_clearScreen();
    3222:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_clearScreen>
					error++;
    3226:	de 01       	movw	r26, r28
    3228:	a1 58       	subi	r26, 0x81	; 129
    322a:	bf 4f       	sbci	r27, 0xFF	; 255
    322c:	fe 01       	movw	r30, r28
    322e:	e1 58       	subi	r30, 0x81	; 129
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	8f 5f       	subi	r24, 0xFF	; 255
    3236:	8c 93       	st	X, r24
					if(error<3){
    3238:	fe 01       	movw	r30, r28
    323a:	e1 58       	subi	r30, 0x81	; 129
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 81       	ld	r24, Z
    3240:	83 30       	cpi	r24, 0x03	; 3
    3242:	08 f0       	brcs	.+2      	; 0x3246 <main+0xc04>
    3244:	81 c0       	rjmp	.+258    	; 0x3348 <main+0xd06>
						LCD_displayStringRowColumn(0,0,"error password");
    3246:	2d ee       	ldi	r18, 0xED	; 237
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	a9 01       	movw	r20, r18
    3250:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"enter again");
    3254:	2c ef       	ldi	r18, 0xFC	; 252
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	a9 01       	movw	r20, r18
    325e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	aa e7       	ldi	r26, 0x7A	; 122
    3268:	b4 e4       	ldi	r27, 0x44	; 68
    326a:	8f a3       	std	Y+39, r24	; 0x27
    326c:	98 a7       	std	Y+40, r25	; 0x28
    326e:	a9 a7       	std	Y+41, r26	; 0x29
    3270:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3272:	6f a1       	ldd	r22, Y+39	; 0x27
    3274:	78 a5       	ldd	r23, Y+40	; 0x28
    3276:	89 a5       	ldd	r24, Y+41	; 0x29
    3278:	9a a5       	ldd	r25, Y+42	; 0x2a
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a ef       	ldi	r20, 0xFA	; 250
    3280:	54 e4       	ldi	r21, 0x44	; 68
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	8b a3       	std	Y+35, r24	; 0x23
    328c:	9c a3       	std	Y+36, r25	; 0x24
    328e:	ad a3       	std	Y+37, r26	; 0x25
    3290:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3292:	6b a1       	ldd	r22, Y+35	; 0x23
    3294:	7c a1       	ldd	r23, Y+36	; 0x24
    3296:	8d a1       	ldd	r24, Y+37	; 0x25
    3298:	9e a1       	ldd	r25, Y+38	; 0x26
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e8       	ldi	r20, 0x80	; 128
    32a0:	5f e3       	ldi	r21, 0x3F	; 63
    32a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a6:	88 23       	and	r24, r24
    32a8:	2c f4       	brge	.+10     	; 0x32b4 <main+0xc72>
		__ticks = 1;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9a a3       	std	Y+34, r25	; 0x22
    32b0:	89 a3       	std	Y+33, r24	; 0x21
    32b2:	3f c0       	rjmp	.+126    	; 0x3332 <main+0xcf0>
	else if (__tmp > 65535)
    32b4:	6b a1       	ldd	r22, Y+35	; 0x23
    32b6:	7c a1       	ldd	r23, Y+36	; 0x24
    32b8:	8d a1       	ldd	r24, Y+37	; 0x25
    32ba:	9e a1       	ldd	r25, Y+38	; 0x26
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	57 e4       	ldi	r21, 0x47	; 71
    32c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	4c f5       	brge	.+82     	; 0x331e <main+0xcdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32cc:	6f a1       	ldd	r22, Y+39	; 0x27
    32ce:	78 a5       	ldd	r23, Y+40	; 0x28
    32d0:	89 a5       	ldd	r24, Y+41	; 0x29
    32d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e2       	ldi	r20, 0x20	; 32
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9a a3       	std	Y+34, r25	; 0x22
    32f2:	89 a3       	std	Y+33, r24	; 0x21
    32f4:	0f c0       	rjmp	.+30     	; 0x3314 <main+0xcd2>
    32f6:	88 ec       	ldi	r24, 0xC8	; 200
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	98 a3       	std	Y+32, r25	; 0x20
    32fc:	8f 8f       	std	Y+31, r24	; 0x1f
    32fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3300:	98 a1       	ldd	r25, Y+32	; 0x20
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <main+0xcc0>
    3306:	98 a3       	std	Y+32, r25	; 0x20
    3308:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330a:	89 a1       	ldd	r24, Y+33	; 0x21
    330c:	9a a1       	ldd	r25, Y+34	; 0x22
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	9a a3       	std	Y+34, r25	; 0x22
    3312:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3314:	89 a1       	ldd	r24, Y+33	; 0x21
    3316:	9a a1       	ldd	r25, Y+34	; 0x22
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	69 f7       	brne	.-38     	; 0x32f6 <main+0xcb4>
    331c:	6b c1       	rjmp	.+726    	; 0x35f4 <main+0xfb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331e:	6b a1       	ldd	r22, Y+35	; 0x23
    3320:	7c a1       	ldd	r23, Y+36	; 0x24
    3322:	8d a1       	ldd	r24, Y+37	; 0x25
    3324:	9e a1       	ldd	r25, Y+38	; 0x26
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9a a3       	std	Y+34, r25	; 0x22
    3330:	89 a3       	std	Y+33, r24	; 0x21
    3332:	89 a1       	ldd	r24, Y+33	; 0x21
    3334:	9a a1       	ldd	r25, Y+34	; 0x22
    3336:	9e 8f       	std	Y+30, r25	; 0x1e
    3338:	8d 8f       	std	Y+29, r24	; 0x1d
    333a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    333c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <main+0xcfc>
    3342:	9e 8f       	std	Y+30, r25	; 0x1e
    3344:	8d 8f       	std	Y+29, r24	; 0x1d
    3346:	56 c1       	rjmp	.+684    	; 0x35f4 <main+0xfb2>
						_delay_ms(1000);
					}else if(error==3){
    3348:	fe 01       	movw	r30, r28
    334a:	e1 58       	subi	r30, 0x81	; 129
    334c:	ff 4f       	sbci	r31, 0xFF	; 255
    334e:	80 81       	ld	r24, Z
    3350:	83 30       	cpi	r24, 0x03	; 3
    3352:	09 f0       	breq	.+2      	; 0x3356 <main+0xd14>
    3354:	4f c1       	rjmp	.+670    	; 0x35f4 <main+0xfb2>
						/* Set the Call back function pointer in the timer0 driver */
						Timer_setCallBack(&error_3_password,Timer_1);
    3356:	8f ef       	ldi	r24, 0xFF	; 255
    3358:	99 e0       	ldi	r25, 0x09	; 9
    335a:	61 e0       	ldi	r22, 0x01	; 1
    335c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <Timer_setCallBack>
						/* Initialize the timer0 Driver */
						Timer_intit(&config_time);
    3360:	ce 01       	movw	r24, r28
    3362:	8b 57       	subi	r24, 0x7B	; 123
    3364:	9f 4f       	sbci	r25, 0xFF	; 255
    3366:	0e 94 42 1c 	call	0x3884	; 0x3884 <Timer_intit>
						/*holed system until finish call back function*/
						while(holed_system==0 ){}
    336a:	80 91 44 01 	lds	r24, 0x0144
    336e:	88 23       	and	r24, r24
    3370:	e1 f3       	breq	.-8      	; 0x336a <main+0xd28>
						/*clear holed_system for using again*/
						holed_system=0;
    3372:	10 92 44 01 	sts	0x0144, r1
    3376:	3e c1       	rjmp	.+636    	; 0x35f4 <main+0xfb2>

					}
				}else if(res_match==1){/*password correct*/
    3378:	fe 01       	movw	r30, r28
    337a:	e0 58       	subi	r30, 0x80	; 128
    337c:	ff 4f       	sbci	r31, 0xFF	; 255
    337e:	80 81       	ld	r24, Z
    3380:	81 30       	cpi	r24, 0x01	; 1
    3382:	09 f0       	breq	.+2      	; 0x3386 <main+0xd44>
    3384:	37 c1       	rjmp	.+622    	; 0x35f4 <main+0xfb2>
					LCD_displayString("correct password");
    3386:	88 e0       	ldi	r24, 0x08	; 8
    3388:	91 e0       	ldi	r25, 0x01	; 1
    338a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LCD_displayString>
					LCD_displayStringRowColumn(1,0,"enter new password");
    338e:	29 e1       	ldi	r18, 0x19	; 25
    3390:	31 e0       	ldi	r19, 0x01	; 1
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	60 e0       	ldi	r22, 0x00	; 0
    3396:	a9 01       	movw	r20, r18
    3398:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	aa e7       	ldi	r26, 0x7A	; 122
    33a2:	b4 e4       	ldi	r27, 0x44	; 68
    33a4:	89 8f       	std	Y+25, r24	; 0x19
    33a6:	9a 8f       	std	Y+26, r25	; 0x1a
    33a8:	ab 8f       	std	Y+27, r26	; 0x1b
    33aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ac:	69 8d       	ldd	r22, Y+25	; 0x19
    33ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	4a ef       	ldi	r20, 0xFA	; 250
    33ba:	54 e4       	ldi	r21, 0x44	; 68
    33bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	8d 8b       	std	Y+21, r24	; 0x15
    33c6:	9e 8b       	std	Y+22, r25	; 0x16
    33c8:	af 8b       	std	Y+23, r26	; 0x17
    33ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33cc:	6d 89       	ldd	r22, Y+21	; 0x15
    33ce:	7e 89       	ldd	r23, Y+22	; 0x16
    33d0:	8f 89       	ldd	r24, Y+23	; 0x17
    33d2:	98 8d       	ldd	r25, Y+24	; 0x18
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e8       	ldi	r20, 0x80	; 128
    33da:	5f e3       	ldi	r21, 0x3F	; 63
    33dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e0:	88 23       	and	r24, r24
    33e2:	2c f4       	brge	.+10     	; 0x33ee <main+0xdac>
		__ticks = 1;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	9c 8b       	std	Y+20, r25	; 0x14
    33ea:	8b 8b       	std	Y+19, r24	; 0x13
    33ec:	3f c0       	rjmp	.+126    	; 0x346c <main+0xe2a>
	else if (__tmp > 65535)
    33ee:	6d 89       	ldd	r22, Y+21	; 0x15
    33f0:	7e 89       	ldd	r23, Y+22	; 0x16
    33f2:	8f 89       	ldd	r24, Y+23	; 0x17
    33f4:	98 8d       	ldd	r25, Y+24	; 0x18
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	3f ef       	ldi	r19, 0xFF	; 255
    33fa:	4f e7       	ldi	r20, 0x7F	; 127
    33fc:	57 e4       	ldi	r21, 0x47	; 71
    33fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3402:	18 16       	cp	r1, r24
    3404:	4c f5       	brge	.+82     	; 0x3458 <main+0xe16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3406:	69 8d       	ldd	r22, Y+25	; 0x19
    3408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    340a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    340c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e2       	ldi	r20, 0x20	; 32
    3414:	51 e4       	ldi	r21, 0x41	; 65
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	9c 8b       	std	Y+20, r25	; 0x14
    342c:	8b 8b       	std	Y+19, r24	; 0x13
    342e:	0f c0       	rjmp	.+30     	; 0x344e <main+0xe0c>
    3430:	88 ec       	ldi	r24, 0xC8	; 200
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	9a 8b       	std	Y+18, r25	; 0x12
    3436:	89 8b       	std	Y+17, r24	; 0x11
    3438:	89 89       	ldd	r24, Y+17	; 0x11
    343a:	9a 89       	ldd	r25, Y+18	; 0x12
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c <main+0xdfa>
    3440:	9a 8b       	std	Y+18, r25	; 0x12
    3442:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3444:	8b 89       	ldd	r24, Y+19	; 0x13
    3446:	9c 89       	ldd	r25, Y+20	; 0x14
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	9c 8b       	std	Y+20, r25	; 0x14
    344c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344e:	8b 89       	ldd	r24, Y+19	; 0x13
    3450:	9c 89       	ldd	r25, Y+20	; 0x14
    3452:	00 97       	sbiw	r24, 0x00	; 0
    3454:	69 f7       	brne	.-38     	; 0x3430 <main+0xdee>
    3456:	2d c0       	rjmp	.+90     	; 0x34b2 <main+0xe70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3458:	6d 89       	ldd	r22, Y+21	; 0x15
    345a:	7e 89       	ldd	r23, Y+22	; 0x16
    345c:	8f 89       	ldd	r24, Y+23	; 0x17
    345e:	98 8d       	ldd	r25, Y+24	; 0x18
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9c 8b       	std	Y+20, r25	; 0x14
    346a:	8b 8b       	std	Y+19, r24	; 0x13
    346c:	8b 89       	ldd	r24, Y+19	; 0x13
    346e:	9c 89       	ldd	r25, Y+20	; 0x14
    3470:	98 8b       	std	Y+16, r25	; 0x10
    3472:	8f 87       	std	Y+15, r24	; 0x0f
    3474:	8f 85       	ldd	r24, Y+15	; 0x0f
    3476:	98 89       	ldd	r25, Y+16	; 0x10
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <main+0xe36>
    347c:	98 8b       	std	Y+16, r25	; 0x10
    347e:	8f 87       	std	Y+15, r24	; 0x0f
    3480:	18 c0       	rjmp	.+48     	; 0x34b2 <main+0xe70>
					_delay_ms(1000);

					/*while match_loin=0 , the two password is not match and ask user again*/
					while(match_login!=1){
						match_login=first_login_password_enter(pass,pass_comp);
    3482:	8b e4       	ldi	r24, 0x4B	; 75
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	20 e5       	ldi	r18, 0x50	; 80
    3488:	31 e0       	ldi	r19, 0x01	; 1
    348a:	b9 01       	movw	r22, r18
    348c:	0e 94 43 06 	call	0xc86	; 0xc86 <first_login_password_enter>
    3490:	fe 01       	movw	r30, r28
    3492:	ed 57       	subi	r30, 0x7D	; 125
    3494:	ff 4f       	sbci	r31, 0xFF	; 255
    3496:	80 83       	st	Z, r24
						if(match_login==0){/*in case two password not match*/
    3498:	fe 01       	movw	r30, r28
    349a:	ed 57       	subi	r30, 0x7D	; 125
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 81       	ld	r24, Z
    34a0:	88 23       	and	r24, r24
    34a2:	39 f4       	brne	.+14     	; 0x34b2 <main+0xe70>
							LCD_displayStringRowColumn(0,0,"Enter Again");
    34a4:	21 ee       	ldi	r18, 0xE1	; 225
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	60 e0       	ldi	r22, 0x00	; 0
    34ac:	a9 01       	movw	r20, r18
    34ae:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_displayStringRowColumn>
					LCD_displayString("correct password");
					LCD_displayStringRowColumn(1,0,"enter new password");
					_delay_ms(1000);

					/*while match_loin=0 , the two password is not match and ask user again*/
					while(match_login!=1){
    34b2:	fe 01       	movw	r30, r28
    34b4:	ed 57       	subi	r30, 0x7D	; 125
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	81 30       	cpi	r24, 0x01	; 1
    34bc:	11 f7       	brne	.-60     	; 0x3482 <main+0xe40>
						if(match_login==0){/*in case two password not match*/
							LCD_displayStringRowColumn(0,0,"Enter Again");
						}
					}
					/*clear match_login ,so using again*/
					match_login=0;
    34be:	fe 01       	movw	r30, r28
    34c0:	ed 57       	subi	r30, 0x7D	; 125
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	10 82       	st	Z, r1
					/*send password to MC1 to store in EEPROM*/
					for(count=0 ;count<PASSWORD_NUMBER;count++){
    34c6:	fe 01       	movw	r30, r28
    34c8:	ee 57       	subi	r30, 0x7E	; 126
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	10 82       	st	Z, r1
    34ce:	8b c0       	rjmp	.+278    	; 0x35e6 <main+0xfa4>
						/* Wait until MC2 is ready to receive the Byte */
						while(UART_recieveByte() != MC1_READY){}
    34d0:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    34d4:	80 31       	cpi	r24, 0x10	; 16
    34d6:	e1 f7       	brne	.-8      	; 0x34d0 <main+0xe8e>
						/* Send the required Byte to MC2 through UART */
						UART_sendByte(pass[count]);
    34d8:	fe 01       	movw	r30, r28
    34da:	ee 57       	subi	r30, 0x7E	; 126
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 81       	ld	r24, Z
    34e0:	88 2f       	mov	r24, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	fc 01       	movw	r30, r24
    34e6:	e5 5b       	subi	r30, 0xB5	; 181
    34e8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ea:	80 81       	ld	r24, Z
    34ec:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	a0 e7       	ldi	r26, 0x70	; 112
    34f6:	b2 e4       	ldi	r27, 0x42	; 66
    34f8:	8b 87       	std	Y+11, r24	; 0x0b
    34fa:	9c 87       	std	Y+12, r25	; 0x0c
    34fc:	ad 87       	std	Y+13, r26	; 0x0d
    34fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3500:	6b 85       	ldd	r22, Y+11	; 0x0b
    3502:	7c 85       	ldd	r23, Y+12	; 0x0c
    3504:	8d 85       	ldd	r24, Y+13	; 0x0d
    3506:	9e 85       	ldd	r25, Y+14	; 0x0e
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	4a ef       	ldi	r20, 0xFA	; 250
    350e:	54 e4       	ldi	r21, 0x44	; 68
    3510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	8f 83       	std	Y+7, r24	; 0x07
    351a:	98 87       	std	Y+8, r25	; 0x08
    351c:	a9 87       	std	Y+9, r26	; 0x09
    351e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3520:	6f 81       	ldd	r22, Y+7	; 0x07
    3522:	78 85       	ldd	r23, Y+8	; 0x08
    3524:	89 85       	ldd	r24, Y+9	; 0x09
    3526:	9a 85       	ldd	r25, Y+10	; 0x0a
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e8       	ldi	r20, 0x80	; 128
    352e:	5f e3       	ldi	r21, 0x3F	; 63
    3530:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3534:	88 23       	and	r24, r24
    3536:	2c f4       	brge	.+10     	; 0x3542 <main+0xf00>
		__ticks = 1;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	3f c0       	rjmp	.+126    	; 0x35c0 <main+0xf7e>
	else if (__tmp > 65535)
    3542:	6f 81       	ldd	r22, Y+7	; 0x07
    3544:	78 85       	ldd	r23, Y+8	; 0x08
    3546:	89 85       	ldd	r24, Y+9	; 0x09
    3548:	9a 85       	ldd	r25, Y+10	; 0x0a
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	3f ef       	ldi	r19, 0xFF	; 255
    354e:	4f e7       	ldi	r20, 0x7F	; 127
    3550:	57 e4       	ldi	r21, 0x47	; 71
    3552:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3556:	18 16       	cp	r1, r24
    3558:	4c f5       	brge	.+82     	; 0x35ac <main+0xf6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355a:	6b 85       	ldd	r22, Y+11	; 0x0b
    355c:	7c 85       	ldd	r23, Y+12	; 0x0c
    355e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3560:	9e 85       	ldd	r25, Y+14	; 0x0e
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e2       	ldi	r20, 0x20	; 32
    3568:	51 e4       	ldi	r21, 0x41	; 65
    356a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	0f c0       	rjmp	.+30     	; 0x35a2 <main+0xf60>
    3584:	88 ec       	ldi	r24, 0xC8	; 200
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	9c 83       	std	Y+4, r25	; 0x04
    358a:	8b 83       	std	Y+3, r24	; 0x03
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <main+0xf4e>
    3594:	9c 83       	std	Y+4, r25	; 0x04
    3596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3598:	8d 81       	ldd	r24, Y+5	; 0x05
    359a:	9e 81       	ldd	r25, Y+6	; 0x06
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	9e 83       	std	Y+6, r25	; 0x06
    35a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	9e 81       	ldd	r25, Y+6	; 0x06
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	69 f7       	brne	.-38     	; 0x3584 <main+0xf42>
    35aa:	14 c0       	rjmp	.+40     	; 0x35d4 <main+0xf92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ac:	6f 81       	ldd	r22, Y+7	; 0x07
    35ae:	78 85       	ldd	r23, Y+8	; 0x08
    35b0:	89 85       	ldd	r24, Y+9	; 0x09
    35b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	9a 83       	std	Y+2, r25	; 0x02
    35c6:	89 83       	std	Y+1, r24	; 0x01
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	9a 81       	ldd	r25, Y+2	; 0x02
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <main+0xf8a>
    35d0:	9a 83       	std	Y+2, r25	; 0x02
    35d2:	89 83       	std	Y+1, r24	; 0x01
						}
					}
					/*clear match_login ,so using again*/
					match_login=0;
					/*send password to MC1 to store in EEPROM*/
					for(count=0 ;count<PASSWORD_NUMBER;count++){
    35d4:	de 01       	movw	r26, r28
    35d6:	ae 57       	subi	r26, 0x7E	; 126
    35d8:	bf 4f       	sbci	r27, 0xFF	; 255
    35da:	fe 01       	movw	r30, r28
    35dc:	ee 57       	subi	r30, 0x7E	; 126
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 81       	ld	r24, Z
    35e2:	8f 5f       	subi	r24, 0xFF	; 255
    35e4:	8c 93       	st	X, r24
    35e6:	fe 01       	movw	r30, r28
    35e8:	ee 57       	subi	r30, 0x7E	; 126
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	80 81       	ld	r24, Z
    35ee:	85 30       	cpi	r24, 0x05	; 5
    35f0:	08 f4       	brcc	.+2      	; 0x35f4 <main+0xfb2>
    35f2:	6e cf       	rjmp	.-292    	; 0x34d0 <main+0xe8e>
			/* Wait until MC2 is ready to receive the Byte */
			while(UART_recieveByte() != MC1_READY){}
			/* Send the required Byte to MC2 through UART */
			UART_sendByte(slec_option);
			/*looping until enter correct password,only 3 time enter*/
			while(error<3 && res_match==0){
    35f4:	fe 01       	movw	r30, r28
    35f6:	e1 58       	subi	r30, 0x81	; 129
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 81       	ld	r24, Z
    35fc:	83 30       	cpi	r24, 0x03	; 3
    35fe:	38 f4       	brcc	.+14     	; 0x360e <main+0xfcc>
    3600:	fe 01       	movw	r30, r28
    3602:	e0 58       	subi	r30, 0x80	; 128
    3604:	ff 4f       	sbci	r31, 0xFF	; 255
    3606:	80 81       	ld	r24, Z
    3608:	88 23       	and	r24, r24
    360a:	09 f4       	brne	.+2      	; 0x360e <main+0xfcc>
    360c:	5f cd       	rjmp	.-1346   	; 0x30cc <main+0xa8a>
						UART_sendByte(pass[count]);
						_delay_ms(60);
					}
				}
			}
			error=0;
    360e:	fe 01       	movw	r30, r28
    3610:	e1 58       	subi	r30, 0x81	; 129
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	10 82       	st	Z, r1
			slec_option=0;
    3616:	fe 01       	movw	r30, r28
    3618:	ef 57       	subi	r30, 0x7F	; 127
    361a:	ff 4f       	sbci	r31, 0xFF	; 255
    361c:	10 82       	st	Z, r1
    361e:	53 cb       	rjmp	.-2394   	; 0x2cc6 <main+0x684>

00003620 <__vector_9>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    3620:	1f 92       	push	r1
    3622:	0f 92       	push	r0
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	0f 92       	push	r0
    3628:	11 24       	eor	r1, r1
    362a:	2f 93       	push	r18
    362c:	3f 93       	push	r19
    362e:	4f 93       	push	r20
    3630:	5f 93       	push	r21
    3632:	6f 93       	push	r22
    3634:	7f 93       	push	r23
    3636:	8f 93       	push	r24
    3638:	9f 93       	push	r25
    363a:	af 93       	push	r26
    363c:	bf 93       	push	r27
    363e:	ef 93       	push	r30
    3640:	ff 93       	push	r31
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer0 != NULL_PTR)
    364a:	80 91 45 01 	lds	r24, 0x0145
    364e:	90 91 46 01 	lds	r25, 0x0146
    3652:	00 97       	sbiw	r24, 0x00	; 0
    3654:	29 f0       	breq	.+10     	; 0x3660 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3656:	e0 91 45 01 	lds	r30, 0x0145
    365a:	f0 91 46 01 	lds	r31, 0x0146
    365e:	09 95       	icall
	}

}
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	ff 91       	pop	r31
    3666:	ef 91       	pop	r30
    3668:	bf 91       	pop	r27
    366a:	af 91       	pop	r26
    366c:	9f 91       	pop	r25
    366e:	8f 91       	pop	r24
    3670:	7f 91       	pop	r23
    3672:	6f 91       	pop	r22
    3674:	5f 91       	pop	r21
    3676:	4f 91       	pop	r20
    3678:	3f 91       	pop	r19
    367a:	2f 91       	pop	r18
    367c:	0f 90       	pop	r0
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	0f 90       	pop	r0
    3682:	1f 90       	pop	r1
    3684:	18 95       	reti

00003686 <__vector_19>:

ISR(TIMER0_COMP_vect){
    3686:	1f 92       	push	r1
    3688:	0f 92       	push	r0
    368a:	0f b6       	in	r0, 0x3f	; 63
    368c:	0f 92       	push	r0
    368e:	11 24       	eor	r1, r1
    3690:	2f 93       	push	r18
    3692:	3f 93       	push	r19
    3694:	4f 93       	push	r20
    3696:	5f 93       	push	r21
    3698:	6f 93       	push	r22
    369a:	7f 93       	push	r23
    369c:	8f 93       	push	r24
    369e:	9f 93       	push	r25
    36a0:	af 93       	push	r26
    36a2:	bf 93       	push	r27
    36a4:	ef 93       	push	r30
    36a6:	ff 93       	push	r31
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer0 != NULL_PTR)
    36b0:	80 91 45 01 	lds	r24, 0x0145
    36b4:	90 91 46 01 	lds	r25, 0x0146
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	29 f0       	breq	.+10     	; 0x36c6 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    36bc:	e0 91 45 01 	lds	r30, 0x0145
    36c0:	f0 91 46 01 	lds	r31, 0x0146
    36c4:	09 95       	icall
	}

}
    36c6:	cf 91       	pop	r28
    36c8:	df 91       	pop	r29
    36ca:	ff 91       	pop	r31
    36cc:	ef 91       	pop	r30
    36ce:	bf 91       	pop	r27
    36d0:	af 91       	pop	r26
    36d2:	9f 91       	pop	r25
    36d4:	8f 91       	pop	r24
    36d6:	7f 91       	pop	r23
    36d8:	6f 91       	pop	r22
    36da:	5f 91       	pop	r21
    36dc:	4f 91       	pop	r20
    36de:	3f 91       	pop	r19
    36e0:	2f 91       	pop	r18
    36e2:	0f 90       	pop	r0
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	0f 90       	pop	r0
    36e8:	1f 90       	pop	r1
    36ea:	18 95       	reti

000036ec <__vector_8>:
ISR(TIMER1_OVF_vect){
    36ec:	1f 92       	push	r1
    36ee:	0f 92       	push	r0
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	0f 92       	push	r0
    36f4:	11 24       	eor	r1, r1
    36f6:	2f 93       	push	r18
    36f8:	3f 93       	push	r19
    36fa:	4f 93       	push	r20
    36fc:	5f 93       	push	r21
    36fe:	6f 93       	push	r22
    3700:	7f 93       	push	r23
    3702:	8f 93       	push	r24
    3704:	9f 93       	push	r25
    3706:	af 93       	push	r26
    3708:	bf 93       	push	r27
    370a:	ef 93       	push	r30
    370c:	ff 93       	push	r31
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer1 != NULL_PTR)
    3716:	80 91 47 01 	lds	r24, 0x0147
    371a:	90 91 48 01 	lds	r25, 0x0148
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	29 f0       	breq	.+10     	; 0x372c <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3722:	e0 91 47 01 	lds	r30, 0x0147
    3726:	f0 91 48 01 	lds	r31, 0x0148
    372a:	09 95       	icall
	}

}
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	ff 91       	pop	r31
    3732:	ef 91       	pop	r30
    3734:	bf 91       	pop	r27
    3736:	af 91       	pop	r26
    3738:	9f 91       	pop	r25
    373a:	8f 91       	pop	r24
    373c:	7f 91       	pop	r23
    373e:	6f 91       	pop	r22
    3740:	5f 91       	pop	r21
    3742:	4f 91       	pop	r20
    3744:	3f 91       	pop	r19
    3746:	2f 91       	pop	r18
    3748:	0f 90       	pop	r0
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	0f 90       	pop	r0
    374e:	1f 90       	pop	r1
    3750:	18 95       	reti

00003752 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    3752:	1f 92       	push	r1
    3754:	0f 92       	push	r0
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	0f 92       	push	r0
    375a:	11 24       	eor	r1, r1
    375c:	2f 93       	push	r18
    375e:	3f 93       	push	r19
    3760:	4f 93       	push	r20
    3762:	5f 93       	push	r21
    3764:	6f 93       	push	r22
    3766:	7f 93       	push	r23
    3768:	8f 93       	push	r24
    376a:	9f 93       	push	r25
    376c:	af 93       	push	r26
    376e:	bf 93       	push	r27
    3770:	ef 93       	push	r30
    3772:	ff 93       	push	r31
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer1 != NULL_PTR)
    377c:	80 91 47 01 	lds	r24, 0x0147
    3780:	90 91 48 01 	lds	r25, 0x0148
    3784:	00 97       	sbiw	r24, 0x00	; 0
    3786:	29 f0       	breq	.+10     	; 0x3792 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3788:	e0 91 47 01 	lds	r30, 0x0147
    378c:	f0 91 48 01 	lds	r31, 0x0148
    3790:	09 95       	icall
	}

}
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	ff 91       	pop	r31
    3798:	ef 91       	pop	r30
    379a:	bf 91       	pop	r27
    379c:	af 91       	pop	r26
    379e:	9f 91       	pop	r25
    37a0:	8f 91       	pop	r24
    37a2:	7f 91       	pop	r23
    37a4:	6f 91       	pop	r22
    37a6:	5f 91       	pop	r21
    37a8:	4f 91       	pop	r20
    37aa:	3f 91       	pop	r19
    37ac:	2f 91       	pop	r18
    37ae:	0f 90       	pop	r0
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	0f 90       	pop	r0
    37b4:	1f 90       	pop	r1
    37b6:	18 95       	reti

000037b8 <__vector_4>:
ISR(TIMER2_OVF_vect){
    37b8:	1f 92       	push	r1
    37ba:	0f 92       	push	r0
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	0f 92       	push	r0
    37c0:	11 24       	eor	r1, r1
    37c2:	2f 93       	push	r18
    37c4:	3f 93       	push	r19
    37c6:	4f 93       	push	r20
    37c8:	5f 93       	push	r21
    37ca:	6f 93       	push	r22
    37cc:	7f 93       	push	r23
    37ce:	8f 93       	push	r24
    37d0:	9f 93       	push	r25
    37d2:	af 93       	push	r26
    37d4:	bf 93       	push	r27
    37d6:	ef 93       	push	r30
    37d8:	ff 93       	push	r31
    37da:	df 93       	push	r29
    37dc:	cf 93       	push	r28
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer2 != NULL_PTR)
    37e2:	80 91 49 01 	lds	r24, 0x0149
    37e6:	90 91 4a 01 	lds	r25, 0x014A
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	29 f0       	breq	.+10     	; 0x37f8 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    37ee:	e0 91 49 01 	lds	r30, 0x0149
    37f2:	f0 91 4a 01 	lds	r31, 0x014A
    37f6:	09 95       	icall
	}

}
    37f8:	cf 91       	pop	r28
    37fa:	df 91       	pop	r29
    37fc:	ff 91       	pop	r31
    37fe:	ef 91       	pop	r30
    3800:	bf 91       	pop	r27
    3802:	af 91       	pop	r26
    3804:	9f 91       	pop	r25
    3806:	8f 91       	pop	r24
    3808:	7f 91       	pop	r23
    380a:	6f 91       	pop	r22
    380c:	5f 91       	pop	r21
    380e:	4f 91       	pop	r20
    3810:	3f 91       	pop	r19
    3812:	2f 91       	pop	r18
    3814:	0f 90       	pop	r0
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	0f 90       	pop	r0
    381a:	1f 90       	pop	r1
    381c:	18 95       	reti

0000381e <__vector_3>:

ISR(TIMER2_COMP_vect){
    381e:	1f 92       	push	r1
    3820:	0f 92       	push	r0
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	0f 92       	push	r0
    3826:	11 24       	eor	r1, r1
    3828:	2f 93       	push	r18
    382a:	3f 93       	push	r19
    382c:	4f 93       	push	r20
    382e:	5f 93       	push	r21
    3830:	6f 93       	push	r22
    3832:	7f 93       	push	r23
    3834:	8f 93       	push	r24
    3836:	9f 93       	push	r25
    3838:	af 93       	push	r26
    383a:	bf 93       	push	r27
    383c:	ef 93       	push	r30
    383e:	ff 93       	push	r31
    3840:	df 93       	push	r29
    3842:	cf 93       	push	r28
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer2 != NULL_PTR)
    3848:	80 91 49 01 	lds	r24, 0x0149
    384c:	90 91 4a 01 	lds	r25, 0x014A
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	29 f0       	breq	.+10     	; 0x385e <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3854:	e0 91 49 01 	lds	r30, 0x0149
    3858:	f0 91 4a 01 	lds	r31, 0x014A
    385c:	09 95       	icall
	}

}
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	ff 91       	pop	r31
    3864:	ef 91       	pop	r30
    3866:	bf 91       	pop	r27
    3868:	af 91       	pop	r26
    386a:	9f 91       	pop	r25
    386c:	8f 91       	pop	r24
    386e:	7f 91       	pop	r23
    3870:	6f 91       	pop	r22
    3872:	5f 91       	pop	r21
    3874:	4f 91       	pop	r20
    3876:	3f 91       	pop	r19
    3878:	2f 91       	pop	r18
    387a:	0f 90       	pop	r0
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	0f 90       	pop	r0
    3880:	1f 90       	pop	r1
    3882:	18 95       	reti

00003884 <Timer_intit>:
 * 1.set required timer type (timer0,timer1,timer2)
 * 2. set required timer mode (overflow or compare )
 * 3. Set the required clock.
 * 4. set required Intial value.
 */
void Timer_intit(const Timer_ConfigType * Config_Ptr){
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	2a 97       	sbiw	r28, 0x0a	; 10
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	9a 83       	std	Y+2, r25	; 0x02
    389a:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_type){/*choose timer type*/
    389c:	e9 81       	ldd	r30, Y+1	; 0x01
    389e:	fa 81       	ldd	r31, Y+2	; 0x02
    38a0:	80 85       	ldd	r24, Z+8	; 0x08
    38a2:	28 2f       	mov	r18, r24
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	3a 87       	std	Y+10, r19	; 0x0a
    38a8:	29 87       	std	Y+9, r18	; 0x09
    38aa:	89 85       	ldd	r24, Y+9	; 0x09
    38ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ae:	81 30       	cpi	r24, 0x01	; 1
    38b0:	91 05       	cpc	r25, r1
    38b2:	09 f4       	brne	.+2      	; 0x38b6 <Timer_intit+0x32>
    38b4:	66 c0       	rjmp	.+204    	; 0x3982 <Timer_intit+0xfe>
    38b6:	e9 85       	ldd	r30, Y+9	; 0x09
    38b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    38ba:	e2 30       	cpi	r30, 0x02	; 2
    38bc:	f1 05       	cpc	r31, r1
    38be:	09 f4       	brne	.+2      	; 0x38c2 <Timer_intit+0x3e>
    38c0:	c0 c0       	rjmp	.+384    	; 0x3a42 <Timer_intit+0x1be>
    38c2:	29 85       	ldd	r18, Y+9	; 0x09
    38c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    38c6:	21 15       	cp	r18, r1
    38c8:	31 05       	cpc	r19, r1
    38ca:	09 f0       	breq	.+2      	; 0x38ce <Timer_intit+0x4a>
    38cc:	12 c1       	rjmp	.+548    	; 0x3af2 <Timer_intit+0x26e>
	/*timer 0*/
	case 0:
		/*choosing required timer0 mode*/
		switch(Config_Ptr->timer_mode){
    38ce:	e9 81       	ldd	r30, Y+1	; 0x01
    38d0:	fa 81       	ldd	r31, Y+2	; 0x02
    38d2:	82 85       	ldd	r24, Z+10	; 0x0a
    38d4:	e8 2f       	mov	r30, r24
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	f8 87       	std	Y+8, r31	; 0x08
    38da:	ef 83       	std	Y+7, r30	; 0x07
    38dc:	2f 81       	ldd	r18, Y+7	; 0x07
    38de:	38 85       	ldd	r19, Y+8	; 0x08
    38e0:	21 15       	cp	r18, r1
    38e2:	31 05       	cpc	r19, r1
    38e4:	31 f0       	breq	.+12     	; 0x38f2 <Timer_intit+0x6e>
    38e6:	8f 81       	ldd	r24, Y+7	; 0x07
    38e8:	98 85       	ldd	r25, Y+8	; 0x08
    38ea:	81 30       	cpi	r24, 0x01	; 1
    38ec:	91 05       	cpc	r25, r1
    38ee:	01 f1       	breq	.+64     	; 0x3930 <Timer_intit+0xac>
    38f0:	00 c1       	rjmp	.+512    	; 0x3af2 <Timer_intit+0x26e>
			/* Configure the timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. clock as required
			 */
			TCCR0 =(1<<FOC0);
    38f2:	e3 e5       	ldi	r30, 0x53	; 83
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 e8       	ldi	r24, 0x80	; 128
    38f8:	80 83       	st	Z, r24
			TCCR0 =(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    38fa:	a3 e5       	ldi	r26, 0x53	; 83
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	e3 e5       	ldi	r30, 0x53	; 83
    3900:	f0 e0       	ldi	r31, 0x00	; 0
    3902:	80 81       	ld	r24, Z
    3904:	98 2f       	mov	r25, r24
    3906:	98 7f       	andi	r25, 0xF8	; 248
    3908:	e9 81       	ldd	r30, Y+1	; 0x01
    390a:	fa 81       	ldd	r31, Y+2	; 0x02
    390c:	81 85       	ldd	r24, Z+9	; 0x09
    390e:	89 2b       	or	r24, r25
    3910:	8c 93       	st	X, r24
			/*Set Timer0 initial value as required*/
			TCNT0=Config_Ptr->Intial_value;
    3912:	22 e5       	ldi	r18, 0x52	; 82
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	e9 81       	ldd	r30, Y+1	; 0x01
    3918:	fa 81       	ldd	r31, Y+2	; 0x02
    391a:	80 81       	ld	r24, Z
    391c:	91 81       	ldd	r25, Z+1	; 0x01
    391e:	a2 81       	ldd	r26, Z+2	; 0x02
    3920:	b3 81       	ldd	r27, Z+3	; 0x03
    3922:	f9 01       	movw	r30, r18
    3924:	80 83       	st	Z, r24
			/*Enable Timer0 Overflow Interrupt*/
			TIMSK=(1<<TOIE0);
    3926:	e9 e5       	ldi	r30, 0x59	; 89
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	80 83       	st	Z, r24
    392e:	e1 c0       	rjmp	.+450    	; 0x3af2 <Timer_intit+0x26e>
			/* Configure the timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. clock as required
			 */
			TCCR0 =(1<<FOC0)|(1<<WGM01);
    3930:	e3 e5       	ldi	r30, 0x53	; 83
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	88 e8       	ldi	r24, 0x88	; 136
    3936:	80 83       	st	Z, r24
			TCCR0 =(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    3938:	a3 e5       	ldi	r26, 0x53	; 83
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e3 e5       	ldi	r30, 0x53	; 83
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	80 81       	ld	r24, Z
    3942:	98 2f       	mov	r25, r24
    3944:	98 7f       	andi	r25, 0xF8	; 248
    3946:	e9 81       	ldd	r30, Y+1	; 0x01
    3948:	fa 81       	ldd	r31, Y+2	; 0x02
    394a:	81 85       	ldd	r24, Z+9	; 0x09
    394c:	89 2b       	or	r24, r25
    394e:	8c 93       	st	X, r24
			/*Set Timer0 initial value as required*/
			TCNT0=Config_Ptr->Intial_value;
    3950:	22 e5       	ldi	r18, 0x52	; 82
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	e9 81       	ldd	r30, Y+1	; 0x01
    3956:	fa 81       	ldd	r31, Y+2	; 0x02
    3958:	80 81       	ld	r24, Z
    395a:	91 81       	ldd	r25, Z+1	; 0x01
    395c:	a2 81       	ldd	r26, Z+2	; 0x02
    395e:	b3 81       	ldd	r27, Z+3	; 0x03
    3960:	f9 01       	movw	r30, r18
    3962:	80 83       	st	Z, r24
			/*Set Timer0 Compare match as required*/
			OCR0=Config_Ptr->Comare_value;
    3964:	2c e5       	ldi	r18, 0x5C	; 92
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	e9 81       	ldd	r30, Y+1	; 0x01
    396a:	fa 81       	ldd	r31, Y+2	; 0x02
    396c:	84 81       	ldd	r24, Z+4	; 0x04
    396e:	95 81       	ldd	r25, Z+5	; 0x05
    3970:	a6 81       	ldd	r26, Z+6	; 0x06
    3972:	b7 81       	ldd	r27, Z+7	; 0x07
    3974:	f9 01       	movw	r30, r18
    3976:	80 83       	st	Z, r24
			/*Enable Timer0 Compare match Interrupt*/
			TIMSK=(1<<OCIE0);
    3978:	e9 e5       	ldi	r30, 0x59	; 89
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	80 83       	st	Z, r24
    3980:	b8 c0       	rjmp	.+368    	; 0x3af2 <Timer_intit+0x26e>
		}
		break;
		/*timer 1*/
		case 1:
			/*choosing required timer0 mode*/
			switch(Config_Ptr->timer_mode){
    3982:	e9 81       	ldd	r30, Y+1	; 0x01
    3984:	fa 81       	ldd	r31, Y+2	; 0x02
    3986:	82 85       	ldd	r24, Z+10	; 0x0a
    3988:	28 2f       	mov	r18, r24
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	3e 83       	std	Y+6, r19	; 0x06
    398e:	2d 83       	std	Y+5, r18	; 0x05
    3990:	8d 81       	ldd	r24, Y+5	; 0x05
    3992:	9e 81       	ldd	r25, Y+6	; 0x06
    3994:	00 97       	sbiw	r24, 0x00	; 0
    3996:	31 f0       	breq	.+12     	; 0x39a4 <Timer_intit+0x120>
    3998:	ed 81       	ldd	r30, Y+5	; 0x05
    399a:	fe 81       	ldd	r31, Y+6	; 0x06
    399c:	e1 30       	cpi	r30, 0x01	; 1
    399e:	f1 05       	cpc	r31, r1
    39a0:	09 f1       	breq	.+66     	; 0x39e4 <Timer_intit+0x160>
    39a2:	a7 c0       	rjmp	.+334    	; 0x3af2 <Timer_intit+0x26e>

				/* Configure the timer control register TCCR1A
				 * 1. Non PWM mode FOC1A=1 & FOC1B=1
				 * 2. Normal Mode WGM10=0 & WGM11=0
				 */
				TCCR1A=(1<<FOC1A) |(1<<FOC1B);
    39a4:	ef e4       	ldi	r30, 0x4F	; 79
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	8c e0       	ldi	r24, 0x0C	; 12
    39aa:	80 83       	st	Z, r24
				/*Configure the timer control register TCCR1B
				 * 1. Normal Mode WGM12=0 & WGM13=0
				 * 2. clock as required CS12,CS11,CS10
				 */
				TCCR1B=(TCCR1B&0xf8)|(Config_Ptr->timer_clock);
    39ac:	ae e4       	ldi	r26, 0x4E	; 78
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	ee e4       	ldi	r30, 0x4E	; 78
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	98 2f       	mov	r25, r24
    39b8:	98 7f       	andi	r25, 0xF8	; 248
    39ba:	e9 81       	ldd	r30, Y+1	; 0x01
    39bc:	fa 81       	ldd	r31, Y+2	; 0x02
    39be:	81 85       	ldd	r24, Z+9	; 0x09
    39c0:	89 2b       	or	r24, r25
    39c2:	8c 93       	st	X, r24
				/*Set Timer2 initial value as required*/
				TCNT1=Config_Ptr->Intial_value;
    39c4:	2c e4       	ldi	r18, 0x4C	; 76
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	e9 81       	ldd	r30, Y+1	; 0x01
    39ca:	fa 81       	ldd	r31, Y+2	; 0x02
    39cc:	80 81       	ld	r24, Z
    39ce:	91 81       	ldd	r25, Z+1	; 0x01
    39d0:	a2 81       	ldd	r26, Z+2	; 0x02
    39d2:	b3 81       	ldd	r27, Z+3	; 0x03
    39d4:	f9 01       	movw	r30, r18
    39d6:	91 83       	std	Z+1, r25	; 0x01
    39d8:	80 83       	st	Z, r24

				/*Enable Timer1 Overflow Interrupt*/
				TIMSK=(1<<TOIE1);
    39da:	e9 e5       	ldi	r30, 0x59	; 89
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	84 e0       	ldi	r24, 0x04	; 4
    39e0:	80 83       	st	Z, r24
    39e2:	87 c0       	rjmp	.+270    	; 0x3af2 <Timer_intit+0x26e>
			case 1:/*Compare mode initialization*/
				/* Configure the timer control register TCCR1A
				 * 1. Non PWM mode FOC1A=1 & FOC1B=1
				 * 2. CTC Mode WGM10=0 & WGM11=0
				 */
				TCCR1A=(1<<FOC1A) |(1<<FOC1B);
    39e4:	ef e4       	ldi	r30, 0x4F	; 79
    39e6:	f0 e0       	ldi	r31, 0x00	; 0
    39e8:	8c e0       	ldi	r24, 0x0C	; 12
    39ea:	80 83       	st	Z, r24
				/*Configure the timer control register TCCR1B
				 * 1. CTC Mode WGM12=1 & WGM13=0
				 * 2. clock as required CS12,CS11,CS10
				 */
				TCCR1B=(1<<WGM12);
    39ec:	ee e4       	ldi	r30, 0x4E	; 78
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	88 e0       	ldi	r24, 0x08	; 8
    39f2:	80 83       	st	Z, r24
				TCCR1B=(TCCR1B&0xf8)|(Config_Ptr->timer_clock);
    39f4:	ae e4       	ldi	r26, 0x4E	; 78
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	ee e4       	ldi	r30, 0x4E	; 78
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	98 2f       	mov	r25, r24
    3a00:	98 7f       	andi	r25, 0xF8	; 248
    3a02:	e9 81       	ldd	r30, Y+1	; 0x01
    3a04:	fa 81       	ldd	r31, Y+2	; 0x02
    3a06:	81 85       	ldd	r24, Z+9	; 0x09
    3a08:	89 2b       	or	r24, r25
    3a0a:	8c 93       	st	X, r24
				/*Set Timer1 initial value as required*/
				TCNT1=Config_Ptr->Intial_value;
    3a0c:	2c e4       	ldi	r18, 0x4C	; 76
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	e9 81       	ldd	r30, Y+1	; 0x01
    3a12:	fa 81       	ldd	r31, Y+2	; 0x02
    3a14:	80 81       	ld	r24, Z
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	a2 81       	ldd	r26, Z+2	; 0x02
    3a1a:	b3 81       	ldd	r27, Z+3	; 0x03
    3a1c:	f9 01       	movw	r30, r18
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
				/*Set Timer1 Compare match as required*/
				OCR1A=Config_Ptr->Comare_value;
    3a22:	2a e4       	ldi	r18, 0x4A	; 74
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	e9 81       	ldd	r30, Y+1	; 0x01
    3a28:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2a:	84 81       	ldd	r24, Z+4	; 0x04
    3a2c:	95 81       	ldd	r25, Z+5	; 0x05
    3a2e:	a6 81       	ldd	r26, Z+6	; 0x06
    3a30:	b7 81       	ldd	r27, Z+7	; 0x07
    3a32:	f9 01       	movw	r30, r18
    3a34:	91 83       	std	Z+1, r25	; 0x01
    3a36:	80 83       	st	Z, r24
				/*Enable Timer1 Compare match Interrupt*/
				TIMSK=(1<<OCIE1A);
    3a38:	e9 e5       	ldi	r30, 0x59	; 89
    3a3a:	f0 e0       	ldi	r31, 0x00	; 0
    3a3c:	80 e1       	ldi	r24, 0x10	; 16
    3a3e:	80 83       	st	Z, r24
    3a40:	58 c0       	rjmp	.+176    	; 0x3af2 <Timer_intit+0x26e>
			}
			break;
			/*timer 2*/
			case 2:
				/*choosing required timer2 mode*/
				switch(Config_Ptr->timer_mode){
    3a42:	e9 81       	ldd	r30, Y+1	; 0x01
    3a44:	fa 81       	ldd	r31, Y+2	; 0x02
    3a46:	82 85       	ldd	r24, Z+10	; 0x0a
    3a48:	28 2f       	mov	r18, r24
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	3c 83       	std	Y+4, r19	; 0x04
    3a4e:	2b 83       	std	Y+3, r18	; 0x03
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	9c 81       	ldd	r25, Y+4	; 0x04
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	31 f0       	breq	.+12     	; 0x3a64 <Timer_intit+0x1e0>
    3a58:	eb 81       	ldd	r30, Y+3	; 0x03
    3a5a:	fc 81       	ldd	r31, Y+4	; 0x04
    3a5c:	e1 30       	cpi	r30, 0x01	; 1
    3a5e:	f1 05       	cpc	r31, r1
    3a60:	01 f1       	breq	.+64     	; 0x3aa2 <Timer_intit+0x21e>
    3a62:	47 c0       	rjmp	.+142    	; 0x3af2 <Timer_intit+0x26e>
					/* Configure the timer control register TCCR2
					 * 1. Non PWM mode FOC2=1
					 * 2. Normal Mode WGM20=0 & WGM21=0
					 * 3. clock as required CS20,CS21,CS22
					 */
					TCCR2=(1<<FOC2);
    3a64:	e5 e4       	ldi	r30, 0x45	; 69
    3a66:	f0 e0       	ldi	r31, 0x00	; 0
    3a68:	80 e8       	ldi	r24, 0x80	; 128
    3a6a:	80 83       	st	Z, r24
					TCCR2=(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    3a6c:	a5 e4       	ldi	r26, 0x45	; 69
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	e3 e5       	ldi	r30, 0x53	; 83
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	98 2f       	mov	r25, r24
    3a78:	98 7f       	andi	r25, 0xF8	; 248
    3a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a7e:	81 85       	ldd	r24, Z+9	; 0x09
    3a80:	89 2b       	or	r24, r25
    3a82:	8c 93       	st	X, r24
					/*Set Timer2 initial value as required*/
					TCNT2=Config_Ptr->Intial_value;
    3a84:	24 e4       	ldi	r18, 0x44	; 68
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	e9 81       	ldd	r30, Y+1	; 0x01
    3a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a8c:	80 81       	ld	r24, Z
    3a8e:	91 81       	ldd	r25, Z+1	; 0x01
    3a90:	a2 81       	ldd	r26, Z+2	; 0x02
    3a92:	b3 81       	ldd	r27, Z+3	; 0x03
    3a94:	f9 01       	movw	r30, r18
    3a96:	80 83       	st	Z, r24
					/*Enable Timer1 Overflow Interrupt*/
					TIMSK=(1<<TOIE2);
    3a98:	e9 e5       	ldi	r30, 0x59	; 89
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 e4       	ldi	r24, 0x40	; 64
    3a9e:	80 83       	st	Z, r24
    3aa0:	28 c0       	rjmp	.+80     	; 0x3af2 <Timer_intit+0x26e>
					/* Configure the timer control register TCCR2
					 * 1. Non PWM mode FOC2=1
					 * 2. CTC Mode WGM20=0 & WGM21=1
					 * 3. clock as required CS20,CS21,CS22
					 */
					TCCR2=(1<<FOC2)|(1<<WGM21);
    3aa2:	e5 e4       	ldi	r30, 0x45	; 69
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	88 e8       	ldi	r24, 0x88	; 136
    3aa8:	80 83       	st	Z, r24
					TCCR2=(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    3aaa:	a5 e4       	ldi	r26, 0x45	; 69
    3aac:	b0 e0       	ldi	r27, 0x00	; 0
    3aae:	e3 e5       	ldi	r30, 0x53	; 83
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	80 81       	ld	r24, Z
    3ab4:	98 2f       	mov	r25, r24
    3ab6:	98 7f       	andi	r25, 0xF8	; 248
    3ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aba:	fa 81       	ldd	r31, Y+2	; 0x02
    3abc:	81 85       	ldd	r24, Z+9	; 0x09
    3abe:	89 2b       	or	r24, r25
    3ac0:	8c 93       	st	X, r24
					/*Set Timer2 initial value as required*/
					TCNT2=Config_Ptr->Intial_value;
    3ac2:	24 e4       	ldi	r18, 0x44	; 68
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    3aca:	80 81       	ld	r24, Z
    3acc:	91 81       	ldd	r25, Z+1	; 0x01
    3ace:	a2 81       	ldd	r26, Z+2	; 0x02
    3ad0:	b3 81       	ldd	r27, Z+3	; 0x03
    3ad2:	f9 01       	movw	r30, r18
    3ad4:	80 83       	st	Z, r24
					/*Set Timer2 Compare match as required*/
					OCR2=Config_Ptr->Comare_value;
    3ad6:	23 e4       	ldi	r18, 0x43	; 67
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	e9 81       	ldd	r30, Y+1	; 0x01
    3adc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ade:	84 81       	ldd	r24, Z+4	; 0x04
    3ae0:	95 81       	ldd	r25, Z+5	; 0x05
    3ae2:	a6 81       	ldd	r26, Z+6	; 0x06
    3ae4:	b7 81       	ldd	r27, Z+7	; 0x07
    3ae6:	f9 01       	movw	r30, r18
    3ae8:	80 83       	st	Z, r24
					/*Enable Timer2 Compare match Interrupt*/
					TIMSK=(1<<OCIE2);
    3aea:	e9 e5       	ldi	r30, 0x59	; 89
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	80 e8       	ldi	r24, 0x80	; 128
    3af0:	80 83       	st	Z, r24
					break;
				}
				break;
	}
}
    3af2:	2a 96       	adiw	r28, 0x0a	; 10
    3af4:	0f b6       	in	r0, 0x3f	; 63
    3af6:	f8 94       	cli
    3af8:	de bf       	out	0x3e, r29	; 62
    3afa:	0f be       	out	0x3f, r0	; 63
    3afc:	cd bf       	out	0x3d, r28	; 61
    3afe:	cf 91       	pop	r28
    3b00:	df 91       	pop	r29
    3b02:	08 95       	ret

00003b04 <Timer_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void),Timer_Type timer_Type){
    3b04:	df 93       	push	r29
    3b06:	cf 93       	push	r28
    3b08:	00 d0       	rcall	.+0      	; 0x3b0a <Timer_setCallBack+0x6>
    3b0a:	00 d0       	rcall	.+0      	; 0x3b0c <Timer_setCallBack+0x8>
    3b0c:	0f 92       	push	r0
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	9a 83       	std	Y+2, r25	; 0x02
    3b14:	89 83       	std	Y+1, r24	; 0x01
    3b16:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_Type){
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	28 2f       	mov	r18, r24
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	3d 83       	std	Y+5, r19	; 0x05
    3b20:	2c 83       	std	Y+4, r18	; 0x04
    3b22:	8c 81       	ldd	r24, Y+4	; 0x04
    3b24:	9d 81       	ldd	r25, Y+5	; 0x05
    3b26:	81 30       	cpi	r24, 0x01	; 1
    3b28:	91 05       	cpc	r25, r1
    3b2a:	81 f0       	breq	.+32     	; 0x3b4c <Timer_setCallBack+0x48>
    3b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    3b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    3b30:	22 30       	cpi	r18, 0x02	; 2
    3b32:	31 05       	cpc	r19, r1
    3b34:	91 f0       	breq	.+36     	; 0x3b5a <Timer_setCallBack+0x56>
    3b36:	8c 81       	ldd	r24, Y+4	; 0x04
    3b38:	9d 81       	ldd	r25, Y+5	; 0x05
    3b3a:	00 97       	sbiw	r24, 0x00	; 0
    3b3c:	a1 f4       	brne	.+40     	; 0x3b66 <Timer_setCallBack+0x62>
	case 0:
		g_callBackPtr_Timer0=a_ptr;
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	9a 81       	ldd	r25, Y+2	; 0x02
    3b42:	90 93 46 01 	sts	0x0146, r25
    3b46:	80 93 45 01 	sts	0x0145, r24
    3b4a:	0d c0       	rjmp	.+26     	; 0x3b66 <Timer_setCallBack+0x62>
		break;
	case 1:
		g_callBackPtr_Timer1=a_ptr;
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	90 93 48 01 	sts	0x0148, r25
    3b54:	80 93 47 01 	sts	0x0147, r24
    3b58:	06 c0       	rjmp	.+12     	; 0x3b66 <Timer_setCallBack+0x62>
		break;
	case 2:
		g_callBackPtr_Timer2=a_ptr;
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5e:	90 93 4a 01 	sts	0x014A, r25
    3b62:	80 93 49 01 	sts	0x0149, r24
		break;
	}
}
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	cf 91       	pop	r28
    3b72:	df 91       	pop	r29
    3b74:	08 95       	ret

00003b76 <Timer_deInit>:
/*Description:Function to DeInit the timer */
void Timer_deInit(Timer_Type timer_Type){
    3b76:	df 93       	push	r29
    3b78:	cf 93       	push	r28
    3b7a:	00 d0       	rcall	.+0      	; 0x3b7c <Timer_deInit+0x6>
    3b7c:	0f 92       	push	r0
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_Type){
    3b84:	89 81       	ldd	r24, Y+1	; 0x01
    3b86:	28 2f       	mov	r18, r24
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	3b 83       	std	Y+3, r19	; 0x03
    3b8c:	2a 83       	std	Y+2, r18	; 0x02
    3b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b90:	9b 81       	ldd	r25, Y+3	; 0x03
    3b92:	81 30       	cpi	r24, 0x01	; 1
    3b94:	91 05       	cpc	r25, r1
    3b96:	f1 f0       	breq	.+60     	; 0x3bd4 <Timer_deInit+0x5e>
    3b98:	2a 81       	ldd	r18, Y+2	; 0x02
    3b9a:	3b 81       	ldd	r19, Y+3	; 0x03
    3b9c:	22 30       	cpi	r18, 0x02	; 2
    3b9e:	31 05       	cpc	r19, r1
    3ba0:	79 f1       	breq	.+94     	; 0x3c00 <Timer_deInit+0x8a>
    3ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	d9 f5       	brne	.+118    	; 0x3c20 <Timer_deInit+0xaa>
	case 0:
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    3baa:	e3 e5       	ldi	r30, 0x53	; 83
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	10 82       	st	Z, r1
		TCNT0 = 0;
    3bb0:	e2 e5       	ldi	r30, 0x52	; 82
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	10 82       	st	Z, r1
		OCR0=0;
    3bb6:	ec e5       	ldi	r30, 0x5C	; 92
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	10 82       	st	Z, r1
		ICR1 = 0;
    3bbc:	e6 e4       	ldi	r30, 0x46	; 70
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	11 82       	std	Z+1, r1	; 0x01
    3bc2:	10 82       	st	Z, r1

		/* Disable the Timer0 interrupt */
		TIMSK &=~(1<<TOIE0)&~(1<<OCIE0);
    3bc4:	a9 e5       	ldi	r26, 0x59	; 89
    3bc6:	b0 e0       	ldi	r27, 0x00	; 0
    3bc8:	e9 e5       	ldi	r30, 0x59	; 89
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	80 81       	ld	r24, Z
    3bce:	8c 7f       	andi	r24, 0xFC	; 252
    3bd0:	8c 93       	st	X, r24
    3bd2:	26 c0       	rjmp	.+76     	; 0x3c20 <Timer_deInit+0xaa>
		break;
	case 1:
		/* Clear All Timer1Registers */
		TCNT1=0;
    3bd4:	ec e4       	ldi	r30, 0x4C	; 76
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	11 82       	std	Z+1, r1	; 0x01
    3bda:	10 82       	st	Z, r1
		TCCR1A=0;
    3bdc:	ef e4       	ldi	r30, 0x4F	; 79
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	10 82       	st	Z, r1
		TCCR1B=0;
    3be2:	ee e4       	ldi	r30, 0x4E	; 78
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	10 82       	st	Z, r1
		OCR1A=0;
    3be8:	ea e4       	ldi	r30, 0x4A	; 74
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	11 82       	std	Z+1, r1	; 0x01
    3bee:	10 82       	st	Z, r1
		/* Disable the Timer1 interrupt */
		TIMSK &=~(1<<TOIE1)&~(1<<OCIE1A);
    3bf0:	a9 e5       	ldi	r26, 0x59	; 89
    3bf2:	b0 e0       	ldi	r27, 0x00	; 0
    3bf4:	e9 e5       	ldi	r30, 0x59	; 89
    3bf6:	f0 e0       	ldi	r31, 0x00	; 0
    3bf8:	80 81       	ld	r24, Z
    3bfa:	8b 7e       	andi	r24, 0xEB	; 235
    3bfc:	8c 93       	st	X, r24
    3bfe:	10 c0       	rjmp	.+32     	; 0x3c20 <Timer_deInit+0xaa>
		break;
	case 2:
		/* Clear All Timer2 Registers */
		TCCR2=0;
    3c00:	e5 e4       	ldi	r30, 0x45	; 69
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	10 82       	st	Z, r1
		TCNT2 = 0;
    3c06:	e4 e4       	ldi	r30, 0x44	; 68
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	10 82       	st	Z, r1
		OCR0=0;
    3c0c:	ec e5       	ldi	r30, 0x5C	; 92
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	10 82       	st	Z, r1
		/* Disable the Timer2 interrupt */
		TIMSK&=~(1<<TOIE2) &~(1<<OCIE2);
    3c12:	a9 e5       	ldi	r26, 0x59	; 89
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	e9 e5       	ldi	r30, 0x59	; 89
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	80 81       	ld	r24, Z
    3c1c:	8f 73       	andi	r24, 0x3F	; 63
    3c1e:	8c 93       	st	X, r24
		break;
	}
}
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	08 95       	ret

00003c2c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    3c2c:	df 93       	push	r29
    3c2e:	cf 93       	push	r28
    3c30:	00 d0       	rcall	.+0      	; 0x3c32 <UART_init+0x6>
    3c32:	00 d0       	rcall	.+0      	; 0x3c34 <UART_init+0x8>
    3c34:	cd b7       	in	r28, 0x3d	; 61
    3c36:	de b7       	in	r29, 0x3e	; 62
    3c38:	9c 83       	std	Y+4, r25	; 0x04
    3c3a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3c3c:	1a 82       	std	Y+2, r1	; 0x02
    3c3e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3c40:	eb e2       	ldi	r30, 0x2B	; 43
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3c48:	ea e2       	ldi	r30, 0x2A	; 42
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	88 e1       	ldi	r24, 0x18	; 24
    3c4e:	80 83       	st	Z, r24
	 * UPM1:0  parity mode set as required
	 * USBS    stop bit select set as required
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    3c50:	e0 e4       	ldi	r30, 0x40	; 64
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	80 e8       	ldi	r24, 0x80	; 128
    3c56:	80 83       	st	Z, r24
	/*select required parity mode*/
	UCSRC=(UCSRC&0xcf) |(Config_Ptr->parity_mode<<4);
    3c58:	a0 e4       	ldi	r26, 0x40	; 64
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	e0 e4       	ldi	r30, 0x40	; 64
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	80 81       	ld	r24, Z
    3c62:	28 2f       	mov	r18, r24
    3c64:	2f 7c       	andi	r18, 0xCF	; 207
    3c66:	eb 81       	ldd	r30, Y+3	; 0x03
    3c68:	fc 81       	ldd	r31, Y+4	; 0x04
    3c6a:	82 81       	ldd	r24, Z+2	; 0x02
    3c6c:	88 2f       	mov	r24, r24
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	82 95       	swap	r24
    3c72:	92 95       	swap	r25
    3c74:	90 7f       	andi	r25, 0xF0	; 240
    3c76:	98 27       	eor	r25, r24
    3c78:	80 7f       	andi	r24, 0xF0	; 240
    3c7a:	98 27       	eor	r25, r24
    3c7c:	82 2b       	or	r24, r18
    3c7e:	8c 93       	st	X, r24
	/*select required number of data bit*/
	UCSRC=(UCSRC&0xf9)| ((Config_Ptr->numer_of_data_bit)<<1);
    3c80:	a0 e4       	ldi	r26, 0x40	; 64
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e0 e4       	ldi	r30, 0x40	; 64
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	28 2f       	mov	r18, r24
    3c8c:	29 7f       	andi	r18, 0xF9	; 249
    3c8e:	eb 81       	ldd	r30, Y+3	; 0x03
    3c90:	fc 81       	ldd	r31, Y+4	; 0x04
    3c92:	81 81       	ldd	r24, Z+1	; 0x01
    3c94:	88 2f       	mov	r24, r24
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	88 0f       	add	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	82 2b       	or	r24, r18
    3c9e:	8c 93       	st	X, r24
	/*select required number of stop bit*/
	UCSRC=(UCSRC&0xf7)|(Config_Ptr->numer_of_stop_bit<<3);
    3ca0:	a0 e4       	ldi	r26, 0x40	; 64
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	e0 e4       	ldi	r30, 0x40	; 64
    3ca6:	f0 e0       	ldi	r31, 0x00	; 0
    3ca8:	80 81       	ld	r24, Z
    3caa:	28 2f       	mov	r18, r24
    3cac:	27 7f       	andi	r18, 0xF7	; 247
    3cae:	eb 81       	ldd	r30, Y+3	; 0x03
    3cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    3cb2:	80 81       	ld	r24, Z
    3cb4:	88 2f       	mov	r24, r24
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	88 0f       	add	r24, r24
    3cba:	99 1f       	adc	r25, r25
    3cbc:	88 0f       	add	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	88 0f       	add	r24, r24
    3cc2:	99 1f       	adc	r25, r25
    3cc4:	82 2b       	or	r24, r18
    3cc6:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (BUAD_RATE * 8UL))) - 1);
    3cc8:	87 e6       	ldi	r24, 0x67	; 103
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	9a 83       	std	Y+2, r25	; 0x02
    3cce:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3cd0:	e0 e4       	ldi	r30, 0x40	; 64
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd8:	89 2f       	mov	r24, r25
    3cda:	99 27       	eor	r25, r25
    3cdc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3cde:	e9 e2       	ldi	r30, 0x29	; 41
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	80 83       	st	Z, r24
}
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3cf4:	df 93       	push	r29
    3cf6:	cf 93       	push	r28
    3cf8:	0f 92       	push	r0
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    3cfe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3d00:	eb e2       	ldi	r30, 0x2B	; 43
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 81       	ld	r24, Z
    3d06:	88 2f       	mov	r24, r24
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	80 72       	andi	r24, 0x20	; 32
    3d0c:	90 70       	andi	r25, 0x00	; 0
    3d0e:	00 97       	sbiw	r24, 0x00	; 0
    3d10:	b9 f3       	breq	.-18     	; 0x3d00 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3d12:	ec e2       	ldi	r30, 0x2C	; 44
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
    3d18:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3d1a:	0f 90       	pop	r0
    3d1c:	cf 91       	pop	r28
    3d1e:	df 91       	pop	r29
    3d20:	08 95       	ret

00003d22 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3d22:	df 93       	push	r29
    3d24:	cf 93       	push	r28
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3d2a:	eb e2       	ldi	r30, 0x2B	; 43
    3d2c:	f0 e0       	ldi	r31, 0x00	; 0
    3d2e:	80 81       	ld	r24, Z
    3d30:	88 23       	and	r24, r24
    3d32:	dc f7       	brge	.-10     	; 0x3d2a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3d34:	ec e2       	ldi	r30, 0x2C	; 44
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	80 81       	ld	r24, Z
}
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	00 d0       	rcall	.+0      	; 0x3d46 <UART_sendString+0x6>
    3d46:	0f 92       	push	r0
    3d48:	cd b7       	in	r28, 0x3d	; 61
    3d4a:	de b7       	in	r29, 0x3e	; 62
    3d4c:	9b 83       	std	Y+3, r25	; 0x03
    3d4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3d50:	19 82       	std	Y+1, r1	; 0x01
    3d52:	0e c0       	rjmp	.+28     	; 0x3d70 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5e:	fc 01       	movw	r30, r24
    3d60:	e2 0f       	add	r30, r18
    3d62:	f3 1f       	adc	r31, r19
    3d64:	80 81       	ld	r24, Z
    3d66:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <UART_sendByte>
		i++;
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	8f 5f       	subi	r24, 0xFF	; 255
    3d6e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	28 2f       	mov	r18, r24
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	8a 81       	ldd	r24, Y+2	; 0x02
    3d78:	9b 81       	ldd	r25, Y+3	; 0x03
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	e2 0f       	add	r30, r18
    3d7e:	f3 1f       	adc	r31, r19
    3d80:	80 81       	ld	r24, Z
    3d82:	88 23       	and	r24, r24
    3d84:	39 f7       	brne	.-50     	; 0x3d54 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	cf 91       	pop	r28
    3d8e:	df 91       	pop	r29
    3d90:	08 95       	ret

00003d92 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3d92:	0f 93       	push	r16
    3d94:	1f 93       	push	r17
    3d96:	df 93       	push	r29
    3d98:	cf 93       	push	r28
    3d9a:	00 d0       	rcall	.+0      	; 0x3d9c <UART_receiveString+0xa>
    3d9c:	0f 92       	push	r0
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	9b 83       	std	Y+3, r25	; 0x03
    3da4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3da6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	28 2f       	mov	r18, r24
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	9b 81       	ldd	r25, Y+3	; 0x03
    3db2:	8c 01       	movw	r16, r24
    3db4:	02 0f       	add	r16, r18
    3db6:	13 1f       	adc	r17, r19
    3db8:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	80 83       	st	Z, r24
    3dc0:	0f c0       	rjmp	.+30     	; 0x3de0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	8f 5f       	subi	r24, 0xFF	; 255
    3dc6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	28 2f       	mov	r18, r24
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd2:	8c 01       	movw	r16, r24
    3dd4:	02 0f       	add	r16, r18
    3dd6:	13 1f       	adc	r17, r19
    3dd8:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <UART_recieveByte>
    3ddc:	f8 01       	movw	r30, r16
    3dde:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	28 2f       	mov	r18, r24
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	8a 81       	ldd	r24, Y+2	; 0x02
    3de8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dea:	fc 01       	movw	r30, r24
    3dec:	e2 0f       	add	r30, r18
    3dee:	f3 1f       	adc	r31, r19
    3df0:	80 81       	ld	r24, Z
    3df2:	83 32       	cpi	r24, 0x23	; 35
    3df4:	31 f7       	brne	.-52     	; 0x3dc2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	28 2f       	mov	r18, r24
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3e00:	fc 01       	movw	r30, r24
    3e02:	e2 0f       	add	r30, r18
    3e04:	f3 1f       	adc	r31, r19
    3e06:	10 82       	st	Z, r1
}
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	cf 91       	pop	r28
    3e10:	df 91       	pop	r29
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	08 95       	ret

00003e18 <__prologue_saves__>:
    3e18:	2f 92       	push	r2
    3e1a:	3f 92       	push	r3
    3e1c:	4f 92       	push	r4
    3e1e:	5f 92       	push	r5
    3e20:	6f 92       	push	r6
    3e22:	7f 92       	push	r7
    3e24:	8f 92       	push	r8
    3e26:	9f 92       	push	r9
    3e28:	af 92       	push	r10
    3e2a:	bf 92       	push	r11
    3e2c:	cf 92       	push	r12
    3e2e:	df 92       	push	r13
    3e30:	ef 92       	push	r14
    3e32:	ff 92       	push	r15
    3e34:	0f 93       	push	r16
    3e36:	1f 93       	push	r17
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	cd b7       	in	r28, 0x3d	; 61
    3e3e:	de b7       	in	r29, 0x3e	; 62
    3e40:	ca 1b       	sub	r28, r26
    3e42:	db 0b       	sbc	r29, r27
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	de bf       	out	0x3e, r29	; 62
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	cd bf       	out	0x3d, r28	; 61
    3e4e:	09 94       	ijmp

00003e50 <__epilogue_restores__>:
    3e50:	2a 88       	ldd	r2, Y+18	; 0x12
    3e52:	39 88       	ldd	r3, Y+17	; 0x11
    3e54:	48 88       	ldd	r4, Y+16	; 0x10
    3e56:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e58:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e60:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e62:	b9 84       	ldd	r11, Y+9	; 0x09
    3e64:	c8 84       	ldd	r12, Y+8	; 0x08
    3e66:	df 80       	ldd	r13, Y+7	; 0x07
    3e68:	ee 80       	ldd	r14, Y+6	; 0x06
    3e6a:	fd 80       	ldd	r15, Y+5	; 0x05
    3e6c:	0c 81       	ldd	r16, Y+4	; 0x04
    3e6e:	1b 81       	ldd	r17, Y+3	; 0x03
    3e70:	aa 81       	ldd	r26, Y+2	; 0x02
    3e72:	b9 81       	ldd	r27, Y+1	; 0x01
    3e74:	ce 0f       	add	r28, r30
    3e76:	d1 1d       	adc	r29, r1
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	ed 01       	movw	r28, r26
    3e84:	08 95       	ret

00003e86 <itoa>:
    3e86:	fb 01       	movw	r30, r22
    3e88:	9f 01       	movw	r18, r30
    3e8a:	e8 94       	clt
    3e8c:	42 30       	cpi	r20, 0x02	; 2
    3e8e:	c4 f0       	brlt	.+48     	; 0x3ec0 <itoa+0x3a>
    3e90:	45 32       	cpi	r20, 0x25	; 37
    3e92:	b4 f4       	brge	.+44     	; 0x3ec0 <itoa+0x3a>
    3e94:	4a 30       	cpi	r20, 0x0A	; 10
    3e96:	29 f4       	brne	.+10     	; 0x3ea2 <itoa+0x1c>
    3e98:	97 fb       	bst	r25, 7
    3e9a:	1e f4       	brtc	.+6      	; 0x3ea2 <itoa+0x1c>
    3e9c:	90 95       	com	r25
    3e9e:	81 95       	neg	r24
    3ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea2:	64 2f       	mov	r22, r20
    3ea4:	77 27       	eor	r23, r23
    3ea6:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <__udivmodhi4>
    3eaa:	80 5d       	subi	r24, 0xD0	; 208
    3eac:	8a 33       	cpi	r24, 0x3A	; 58
    3eae:	0c f0       	brlt	.+2      	; 0x3eb2 <itoa+0x2c>
    3eb0:	89 5d       	subi	r24, 0xD9	; 217
    3eb2:	81 93       	st	Z+, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	a1 f7       	brne	.-24     	; 0x3ea2 <itoa+0x1c>
    3eba:	16 f4       	brtc	.+4      	; 0x3ec0 <itoa+0x3a>
    3ebc:	5d e2       	ldi	r21, 0x2D	; 45
    3ebe:	51 93       	st	Z+, r21
    3ec0:	10 82       	st	Z, r1
    3ec2:	c9 01       	movw	r24, r18
    3ec4:	0c 94 64 1f 	jmp	0x3ec8	; 0x3ec8 <strrev>

00003ec8 <strrev>:
    3ec8:	dc 01       	movw	r26, r24
    3eca:	fc 01       	movw	r30, r24
    3ecc:	67 2f       	mov	r22, r23
    3ece:	71 91       	ld	r23, Z+
    3ed0:	77 23       	and	r23, r23
    3ed2:	e1 f7       	brne	.-8      	; 0x3ecc <strrev+0x4>
    3ed4:	32 97       	sbiw	r30, 0x02	; 2
    3ed6:	04 c0       	rjmp	.+8      	; 0x3ee0 <strrev+0x18>
    3ed8:	7c 91       	ld	r23, X
    3eda:	6d 93       	st	X+, r22
    3edc:	70 83       	st	Z, r23
    3ede:	62 91       	ld	r22, -Z
    3ee0:	ae 17       	cp	r26, r30
    3ee2:	bf 07       	cpc	r27, r31
    3ee4:	c8 f3       	brcs	.-14     	; 0x3ed8 <strrev+0x10>
    3ee6:	08 95       	ret

00003ee8 <__udivmodhi4>:
    3ee8:	aa 1b       	sub	r26, r26
    3eea:	bb 1b       	sub	r27, r27
    3eec:	51 e1       	ldi	r21, 0x11	; 17
    3eee:	07 c0       	rjmp	.+14     	; 0x3efe <__udivmodhi4_ep>

00003ef0 <__udivmodhi4_loop>:
    3ef0:	aa 1f       	adc	r26, r26
    3ef2:	bb 1f       	adc	r27, r27
    3ef4:	a6 17       	cp	r26, r22
    3ef6:	b7 07       	cpc	r27, r23
    3ef8:	10 f0       	brcs	.+4      	; 0x3efe <__udivmodhi4_ep>
    3efa:	a6 1b       	sub	r26, r22
    3efc:	b7 0b       	sbc	r27, r23

00003efe <__udivmodhi4_ep>:
    3efe:	88 1f       	adc	r24, r24
    3f00:	99 1f       	adc	r25, r25
    3f02:	5a 95       	dec	r21
    3f04:	a9 f7       	brne	.-22     	; 0x3ef0 <__udivmodhi4_loop>
    3f06:	80 95       	com	r24
    3f08:	90 95       	com	r25
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	cd 01       	movw	r24, r26
    3f0e:	08 95       	ret

00003f10 <_exit>:
    3f10:	f8 94       	cli

00003f12 <__stop_program>:
    3f12:	ff cf       	rjmp	.-2      	; 0x3f12 <__stop_program>
