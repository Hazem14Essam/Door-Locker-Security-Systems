
ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000033e6  0000347a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080007a  0080007a  00003494  2**0
                  ALLOC
  3 .stab         000034b0  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014e3  00000000  00000000  00006944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__vector_3>
      10:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__vector_8>
      24:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <main>
      8a:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <chech_match_password>:
 * second password which enter by the user
 * result of compare is
 * '1':the two password is equal
 * '0':the two password is not equal
 */
uint8 chech_match_password(uint8 *pass1,uint8 *pass2){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <chech_match_password+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <chech_match_password+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <chech_match_password+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	7e 83       	std	Y+6, r23	; 0x06
     b5a:	6d 83       	std	Y+5, r22	; 0x05
	uint8 res=1,count;/*local variable*/
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	8a 83       	std	Y+2, r24	; 0x02
	/*compare between two password*/
	for(count=0 ; count<5;count++){
     b60:	19 82       	std	Y+1, r1	; 0x01
     b62:	18 c0       	rjmp	.+48     	; 0xb94 <chech_match_password+0x4e>
		if(pass1[count]!=pass2[count]){
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	28 2f       	mov	r18, r24
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	fc 01       	movw	r30, r24
     b70:	e2 0f       	add	r30, r18
     b72:	f3 1f       	adc	r31, r19
     b74:	40 81       	ld	r20, Z
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	fc 01       	movw	r30, r24
     b82:	e2 0f       	add	r30, r18
     b84:	f3 1f       	adc	r31, r19
     b86:	80 81       	ld	r24, Z
     b88:	48 17       	cp	r20, r24
     b8a:	09 f0       	breq	.+2      	; 0xb8e <chech_match_password+0x48>
			res=0;/*in case of two password not equal*/
     b8c:	1a 82       	std	Y+2, r1	; 0x02
 * '0':the two password is not equal
 */
uint8 chech_match_password(uint8 *pass1,uint8 *pass2){
	uint8 res=1,count;/*local variable*/
	/*compare between two password*/
	for(count=0 ; count<5;count++){
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	85 30       	cpi	r24, 0x05	; 5
     b98:	28 f3       	brcs	.-54     	; 0xb64 <chech_match_password+0x1e>
		if(pass1[count]!=pass2[count]){
			res=0;/*in case of two password not equal*/
		}
	}
	/*return the result*/
	return res;
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b9c:	26 96       	adiw	r28, 0x06	; 6
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <open_door>:
/*
 * Description:
 * function to turn on motor
 */
void open_door(void){
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	g_tick++;/*increment every 1 second*/
     bb6:	80 91 7a 00 	lds	r24, 0x007A
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	80 93 7a 00 	sts	0x007A, r24

	if(g_tick>=0 &&g_tick < 15){
     bc0:	80 91 7a 00 	lds	r24, 0x007A
     bc4:	8f 30       	cpi	r24, 0x0F	; 15
     bc6:	20 f4       	brcc	.+8      	; 0xbd0 <open_door+0x22>
		/*Rotate the motor --> clock wise for 15 second*/
		DCMotor_Rotate(CW);
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	0e 94 72 06 	call	0xce4	; 0xce4 <DCMotor_Rotate>
     bce:	27 c0       	rjmp	.+78     	; 0xc1e <open_door+0x70>
	}else if(g_tick>=15&&g_tick<18){
     bd0:	80 91 7a 00 	lds	r24, 0x007A
     bd4:	8f 30       	cpi	r24, 0x0F	; 15
     bd6:	40 f0       	brcs	.+16     	; 0xbe8 <open_door+0x3a>
     bd8:	80 91 7a 00 	lds	r24, 0x007A
     bdc:	82 31       	cpi	r24, 0x12	; 18
     bde:	20 f4       	brcc	.+8      	; 0xbe8 <open_door+0x3a>
		/*turn off motor for 3 second*/
		DCMotor_Rotate(Stop);
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 72 06 	call	0xce4	; 0xce4 <DCMotor_Rotate>
     be6:	1b c0       	rjmp	.+54     	; 0xc1e <open_door+0x70>
	}else if(g_tick>=18&&g_tick<33){
     be8:	80 91 7a 00 	lds	r24, 0x007A
     bec:	82 31       	cpi	r24, 0x12	; 18
     bee:	40 f0       	brcs	.+16     	; 0xc00 <open_door+0x52>
     bf0:	80 91 7a 00 	lds	r24, 0x007A
     bf4:	81 32       	cpi	r24, 0x21	; 33
     bf6:	20 f4       	brcc	.+8      	; 0xc00 <open_door+0x52>
		/*Rotate the motor --> anti-clock wise for 15 second*/
		DCMotor_Rotate(A_CW);
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	0e 94 72 06 	call	0xce4	; 0xce4 <DCMotor_Rotate>
     bfe:	0f c0       	rjmp	.+30     	; 0xc1e <open_door+0x70>
	}else if(g_tick==33){
     c00:	80 91 7a 00 	lds	r24, 0x007A
     c04:	81 32       	cpi	r24, 0x21	; 33
     c06:	59 f4       	brne	.+22     	; 0xc1e <open_door+0x70>
		/*turn off motor*/
		DCMotor_Rotate(Stop);
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 72 06 	call	0xce4	; 0xce4 <DCMotor_Rotate>
		/*deInit timer 1*/
		Timer_deInit(Timer_1);
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	0e 94 24 18 	call	0x3048	; 0x3048 <Timer_deInit>
		/*clear g_tick*/
		g_tick=0;
     c14:	10 92 7a 00 	sts	0x007A, r1
		/*set holed_system*/
		holed_system=1;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 93 7b 00 	sts	0x007B, r24
	}

}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <BUZZER_turnOn>:
/*
 * Description:
 * function to turn on BUZZER
 */
void BUZZER_turnOn(){
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;/*increment every 1 second*/
     c2c:	80 91 7a 00 	lds	r24, 0x007A
     c30:	8f 5f       	subi	r24, 0xFF	; 255
     c32:	80 93 7a 00 	sts	0x007A, r24
	if(g_tick>=0 &&g_tick < 60){
     c36:	80 91 7a 00 	lds	r24, 0x007A
     c3a:	8c 33       	cpi	r24, 0x3C	; 60
     c3c:	18 f4       	brcc	.+6      	; 0xc44 <BUZZER_turnOn+0x20>
		/*turn on buzzer for 60 second*/
		BUZZER_on();
     c3e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <BUZZER_on>
     c42:	0e c0       	rjmp	.+28     	; 0xc60 <BUZZER_turnOn+0x3c>
	}else if(g_tick==60){/*after 60 second*/
     c44:	80 91 7a 00 	lds	r24, 0x007A
     c48:	8c 33       	cpi	r24, 0x3C	; 60
     c4a:	51 f4       	brne	.+20     	; 0xc60 <BUZZER_turnOn+0x3c>
		/*turn off buzzer*/
		BUZZER_off();
     c4c:	0e 94 4b 06 	call	0xc96	; 0xc96 <BUZZER_off>
		/*deInit timer 1*/
		Timer_deInit(Timer_1);
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 24 18 	call	0x3048	; 0x3048 <Timer_deInit>
		/*clear g_tick*/
		g_tick=0;
     c56:	10 92 7a 00 	sts	0x007A, r1
		/*set holed_system*/
		holed_system=1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 7b 00 	sts	0x007B, r24
	}
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <BUZZER_intit>:

/*
 * Description:
 * initialize BUZZER pin
 */
void BUZZER_intit(void){
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT); /*initialize required pin as output*/
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	64 e0       	ldi	r22, 0x04	; 4
     c72:	41 e0       	ldi	r20, 0x01	; 1
     c74:	0e 94 51 07 	call	0xea2	; 0xea2 <GPIO_setupPinDirection>
}
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <BUZZER_on>:
/*
 * Description:
 * function to turn ON BUZZER
 */
void BUZZER_on(void){
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);/*set required pin as HIGH*/
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	64 e0       	ldi	r22, 0x04	; 4
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <BUZZER_off>:
/*
 * Description:
 * function to turn OFF BUZZER
 */
void BUZZER_off(void){
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);/*set required pin as LOW*/
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	64 e0       	ldi	r22, 0x04	; 4
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <DcMotor_Init>:

/*
 * Description:
 * The Function responsible for setup the direction for the one motor pins through the GPIO driver.
 * */
void DcMotor_Init(){
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT,MOTER_INPUT1,PIN_OUTPUT);
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	63 e0       	ldi	r22, 0x03	; 3
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 51 07 	call	0xea2	; 0xea2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT,MOTER_INPUT2,PIN_OUTPUT);
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	64 e0       	ldi	r22, 0x04	; 4
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 51 07 	call	0xea2	; 0xea2 <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT,MOTER_INPUT1,LOGIC_LOW);
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	63 e0       	ldi	r22, 0x03	; 3
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT,MOTER_INPUT2,LOGIC_LOW);
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	64 e0       	ldi	r22, 0x04	; 4
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <DCMotor_Rotate>:
/*
 * Description:
 * rotate motor as required
 */
void DCMotor_Rotate(DcMotor_State state){
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	0f 92       	push	r0
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	89 83       	std	Y+1, r24	; 0x01
	if(state == CW)
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	59 f4       	brne	.+22     	; 0xd0c <DCMotor_Rotate+0x28>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(MOTOR_PORT,MOTER_INPUT1,LOGIC_LOW);
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	63 e0       	ldi	r22, 0x03	; 3
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTER_INPUT2,LOGIC_HIGH);
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
     d0a:	1b c0       	rjmp	.+54     	; 0xd42 <DCMotor_Rotate+0x5e>


	}
	else if(state == A_CW)
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	59 f4       	brne	.+22     	; 0xd28 <DCMotor_Rotate+0x44>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(MOTOR_PORT,MOTER_INPUT1,LOGIC_HIGH);
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	63 e0       	ldi	r22, 0x03	; 3
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTER_INPUT2,LOGIC_LOW);
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	64 e0       	ldi	r22, 0x04	; 4
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
     d26:	0d c0       	rjmp	.+26     	; 0xd42 <DCMotor_Rotate+0x5e>


	}
	else if(state == Stop)
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	88 23       	and	r24, r24
     d2c:	51 f4       	brne	.+20     	; 0xd42 <DCMotor_Rotate+0x5e>
	{
		/* Stop the Motor */
		GPIO_writePin(MOTOR_PORT,MOTER_INPUT1,LOGIC_LOW);
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	63 e0       	ldi	r22, 0x03	; 3
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT,MOTER_INPUT2,LOGIC_LOW);
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	64 e0       	ldi	r22, 0x04	; 4
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <EEPROM_intit>:
/* Create configuration structure for I2C driver */
TWI_ConfigType Config={0x01,0x02,prescaler_1};
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void EEPROM_intit(void){
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	TWI_init(&Config);
     d52:	88 e6       	ldi	r24, 0x68	; 104
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 8f 0a 	call	0x151e	; 0x151e <TWI_init>
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <EEPROM_writeByte>:
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <EEPROM_writeByte+0x6>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <EEPROM_writeByte+0x8>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d72:	0e 94 c1 0a 	call	0x1582	; 0x1582 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d76:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     d7a:	88 30       	cpi	r24, 0x08	; 8
     d7c:	11 f0       	breq	.+4      	; 0xd82 <EEPROM_writeByte+0x22>
        return ERROR;
     d7e:	1c 82       	std	Y+4, r1	; 0x04
     d80:	28 c0       	rjmp	.+80     	; 0xdd2 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	80 70       	andi	r24, 0x00	; 0
     d88:	97 70       	andi	r25, 0x07	; 7
     d8a:	88 0f       	add	r24, r24
     d8c:	89 2f       	mov	r24, r25
     d8e:	88 1f       	adc	r24, r24
     d90:	99 0b       	sbc	r25, r25
     d92:	91 95       	neg	r25
     d94:	80 6a       	ori	r24, 0xA0	; 160
     d96:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d9a:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     d9e:	88 31       	cpi	r24, 0x18	; 24
     da0:	11 f0       	breq	.+4      	; 0xda6 <EEPROM_writeByte+0x46>
        return ERROR;
     da2:	1c 82       	std	Y+4, r1	; 0x04
     da4:	16 c0       	rjmp	.+44     	; 0xdd2 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dac:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     db0:	88 32       	cpi	r24, 0x28	; 40
     db2:	11 f0       	breq	.+4      	; 0xdb8 <EEPROM_writeByte+0x58>
        return ERROR;
     db4:	1c 82       	std	Y+4, r1	; 0x04
     db6:	0d c0       	rjmp	.+26     	; 0xdd2 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dbe:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     dc2:	88 32       	cpi	r24, 0x28	; 40
     dc4:	11 f0       	breq	.+4      	; 0xdca <EEPROM_writeByte+0x6a>
        return ERROR;
     dc6:	1c 82       	std	Y+4, r1	; 0x04
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     dca:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <TWI_stop>

    return SUCCESS;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	8c 83       	std	Y+4, r24	; 0x04
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
}
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <EEPROM_readByte+0x6>
     de8:	00 d0       	rcall	.+0      	; 0xdea <EEPROM_readByte+0x8>
     dea:	0f 92       	push	r0
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	7c 83       	std	Y+4, r23	; 0x04
     df6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     df8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     dfc:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	11 f0       	breq	.+4      	; 0xe08 <EEPROM_readByte+0x26>
        return ERROR;
     e04:	1d 82       	std	Y+5, r1	; 0x05
     e06:	44 c0       	rjmp	.+136    	; 0xe90 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	9a 81       	ldd	r25, Y+2	; 0x02
     e0c:	80 70       	andi	r24, 0x00	; 0
     e0e:	97 70       	andi	r25, 0x07	; 7
     e10:	88 0f       	add	r24, r24
     e12:	89 2f       	mov	r24, r25
     e14:	88 1f       	adc	r24, r24
     e16:	99 0b       	sbc	r25, r25
     e18:	91 95       	neg	r25
     e1a:	80 6a       	ori	r24, 0xA0	; 160
     e1c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e20:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     e24:	88 31       	cpi	r24, 0x18	; 24
     e26:	11 f0       	breq	.+4      	; 0xe2c <EEPROM_readByte+0x4a>
        return ERROR;
     e28:	1d 82       	std	Y+5, r1	; 0x05
     e2a:	32 c0       	rjmp	.+100    	; 0xe90 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e32:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     e36:	88 32       	cpi	r24, 0x28	; 40
     e38:	11 f0       	breq	.+4      	; 0xe3e <EEPROM_readByte+0x5c>
        return ERROR;
     e3a:	1d 82       	std	Y+5, r1	; 0x05
     e3c:	29 c0       	rjmp	.+82     	; 0xe90 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     e3e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     e42:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     e46:	80 31       	cpi	r24, 0x10	; 16
     e48:	11 f0       	breq	.+4      	; 0xe4e <EEPROM_readByte+0x6c>
        return ERROR;
     e4a:	1d 82       	std	Y+5, r1	; 0x05
     e4c:	21 c0       	rjmp	.+66     	; 0xe90 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	80 70       	andi	r24, 0x00	; 0
     e54:	97 70       	andi	r25, 0x07	; 7
     e56:	88 0f       	add	r24, r24
     e58:	89 2f       	mov	r24, r25
     e5a:	88 1f       	adc	r24, r24
     e5c:	99 0b       	sbc	r25, r25
     e5e:	91 95       	neg	r25
     e60:	81 6a       	ori	r24, 0xA1	; 161
     e62:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     e66:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     e6a:	80 34       	cpi	r24, 0x40	; 64
     e6c:	11 f0       	breq	.+4      	; 0xe72 <EEPROM_readByte+0x90>
        return ERROR;
     e6e:	1d 82       	std	Y+5, r1	; 0x05
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     e72:	0e 94 06 0b 	call	0x160c	; 0x160c <TWI_readByteWithNACK>
     e76:	eb 81       	ldd	r30, Y+3	; 0x03
     e78:	fc 81       	ldd	r31, Y+4	; 0x04
     e7a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     e7c:	0e 94 19 0b 	call	0x1632	; 0x1632 <TWI_getStatus>
     e80:	88 35       	cpi	r24, 0x58	; 88
     e82:	11 f0       	breq	.+4      	; 0xe88 <EEPROM_readByte+0xa6>
        return ERROR;
     e84:	1d 82       	std	Y+5, r1	; 0x05
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     e88:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <TWI_stop>

    return SUCCESS;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	8d 83       	std	Y+5, r24	; 0x05
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <GPIO_setupPinDirection+0x6>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <GPIO_setupPinDirection+0x8>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	6a 83       	std	Y+2, r22	; 0x02
     eb4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	88 30       	cpi	r24, 0x08	; 8
     eba:	08 f0       	brcs	.+2      	; 0xebe <GPIO_setupPinDirection+0x1c>
     ebc:	d5 c0       	rjmp	.+426    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <GPIO_setupPinDirection+0x24>
     ec4:	d1 c0       	rjmp	.+418    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	3d 83       	std	Y+5, r19	; 0x05
     ece:	2c 83       	std	Y+4, r18	; 0x04
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	9d 81       	ldd	r25, Y+5	; 0x05
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <GPIO_setupPinDirection+0x3a>
     eda:	43 c0       	rjmp	.+134    	; 0xf62 <GPIO_setupPinDirection+0xc0>
     edc:	2c 81       	ldd	r18, Y+4	; 0x04
     ede:	3d 81       	ldd	r19, Y+5	; 0x05
     ee0:	22 30       	cpi	r18, 0x02	; 2
     ee2:	31 05       	cpc	r19, r1
     ee4:	2c f4       	brge	.+10     	; 0xef0 <GPIO_setupPinDirection+0x4e>
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	9d 81       	ldd	r25, Y+5	; 0x05
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	71 f0       	breq	.+28     	; 0xf0a <GPIO_setupPinDirection+0x68>
     eee:	bc c0       	rjmp	.+376    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
     ef0:	2c 81       	ldd	r18, Y+4	; 0x04
     ef2:	3d 81       	ldd	r19, Y+5	; 0x05
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	31 05       	cpc	r19, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <GPIO_setupPinDirection+0x5a>
     efa:	5f c0       	rjmp	.+190    	; 0xfba <GPIO_setupPinDirection+0x118>
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	83 30       	cpi	r24, 0x03	; 3
     f02:	91 05       	cpc	r25, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <GPIO_setupPinDirection+0x66>
     f06:	85 c0       	rjmp	.+266    	; 0x1012 <GPIO_setupPinDirection+0x170>
     f08:	af c0       	rjmp	.+350    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f4       	brne	.+40     	; 0xf38 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f10:	aa e3       	ldi	r26, 0x3A	; 58
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea e3       	ldi	r30, 0x3A	; 58
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <GPIO_setupPinDirection+0x8c>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <GPIO_setupPinDirection+0x88>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	98 c0       	rjmp	.+304    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f38:	aa e3       	ldi	r26, 0x3A	; 58
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ea e3       	ldi	r30, 0x3A	; 58
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <GPIO_setupPinDirection+0xb4>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <GPIO_setupPinDirection+0xb0>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	83 c0       	rjmp	.+262    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	a1 f4       	brne	.+40     	; 0xf90 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f68:	a7 e3       	ldi	r26, 0x37	; 55
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e7 e3       	ldi	r30, 0x37	; 55
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <GPIO_setupPinDirection+0xe4>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <GPIO_setupPinDirection+0xe0>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	6c c0       	rjmp	.+216    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f90:	a7 e3       	ldi	r26, 0x37	; 55
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e7 e3       	ldi	r30, 0x37	; 55
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <GPIO_setupPinDirection+0x10c>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <GPIO_setupPinDirection+0x108>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	57 c0       	rjmp	.+174    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	a1 f4       	brne	.+40     	; 0xfe8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fc0:	a4 e3       	ldi	r26, 0x34	; 52
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e4 e3       	ldi	r30, 0x34	; 52
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <GPIO_setupPinDirection+0x13c>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <GPIO_setupPinDirection+0x138>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	40 c0       	rjmp	.+128    	; 0x1068 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fe8:	a4 e3       	ldi	r26, 0x34	; 52
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e4 e3       	ldi	r30, 0x34	; 52
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <GPIO_setupPinDirection+0x164>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <GPIO_setupPinDirection+0x160>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	2b c0       	rjmp	.+86     	; 0x1068 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	a1 f4       	brne	.+40     	; 0x1040 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1018:	a1 e3       	ldi	r26, 0x31	; 49
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e1 e3       	ldi	r30, 0x31	; 49
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_setupPinDirection+0x194>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_setupPinDirection+0x190>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	14 c0       	rjmp	.+40     	; 0x1068 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1040:	a1 e3       	ldi	r26, 0x31	; 49
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e1 e3       	ldi	r30, 0x31	; 49
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <GPIO_setupPinDirection+0x1bc>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <GPIO_setupPinDirection+0x1b8>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	00 d0       	rcall	.+0      	; 0x107e <GPIO_writePin+0x6>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <GPIO_writePin+0x8>
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	6a 83       	std	Y+2, r22	; 0x02
    108a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 30       	cpi	r24, 0x08	; 8
    1090:	08 f0       	brcs	.+2      	; 0x1094 <GPIO_writePin+0x1c>
    1092:	d5 c0       	rjmp	.+426    	; 0x123e <GPIO_writePin+0x1c6>
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	08 f0       	brcs	.+2      	; 0x109c <GPIO_writePin+0x24>
    109a:	d1 c0       	rjmp	.+418    	; 0x123e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3d 83       	std	Y+5, r19	; 0x05
    10a4:	2c 83       	std	Y+4, r18	; 0x04
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	9d 81       	ldd	r25, Y+5	; 0x05
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <GPIO_writePin+0x3a>
    10b0:	43 c0       	rjmp	.+134    	; 0x1138 <GPIO_writePin+0xc0>
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <GPIO_writePin+0x4e>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <GPIO_writePin+0x68>
    10c4:	bc c0       	rjmp	.+376    	; 0x123e <GPIO_writePin+0x1c6>
    10c6:	2c 81       	ldd	r18, Y+4	; 0x04
    10c8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	31 05       	cpc	r19, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <GPIO_writePin+0x5a>
    10d0:	5f c0       	rjmp	.+190    	; 0x1190 <GPIO_writePin+0x118>
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	91 05       	cpc	r25, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <GPIO_writePin+0x66>
    10dc:	85 c0       	rjmp	.+266    	; 0x11e8 <GPIO_writePin+0x170>
    10de:	af c0       	rjmp	.+350    	; 0x123e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	a1 f4       	brne	.+40     	; 0x110e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10e6:	ab e3       	ldi	r26, 0x3B	; 59
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	eb e3       	ldi	r30, 0x3B	; 59
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <GPIO_writePin+0x8c>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <GPIO_writePin+0x88>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	98 c0       	rjmp	.+304    	; 0x123e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    110e:	ab e3       	ldi	r26, 0x3B	; 59
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	eb e3       	ldi	r30, 0x3B	; 59
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <GPIO_writePin+0xb4>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <GPIO_writePin+0xb0>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	83 c0       	rjmp	.+262    	; 0x123e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	a1 f4       	brne	.+40     	; 0x1166 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    113e:	a8 e3       	ldi	r26, 0x38	; 56
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e8 e3       	ldi	r30, 0x38	; 56
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <GPIO_writePin+0xe4>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <GPIO_writePin+0xe0>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	6c c0       	rjmp	.+216    	; 0x123e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1166:	a8 e3       	ldi	r26, 0x38	; 56
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e8 e3       	ldi	r30, 0x38	; 56
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_writePin+0x10c>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_writePin+0x108>
    1188:	80 95       	com	r24
    118a:	84 23       	and	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	57 c0       	rjmp	.+174    	; 0x123e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	a1 f4       	brne	.+40     	; 0x11be <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1196:	a5 e3       	ldi	r26, 0x35	; 53
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e5 e3       	ldi	r30, 0x35	; 53
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_writePin+0x13c>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_writePin+0x138>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	40 c0       	rjmp	.+128    	; 0x123e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11be:	a5 e3       	ldi	r26, 0x35	; 53
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e3       	ldi	r30, 0x35	; 53
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_writePin+0x164>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_writePin+0x160>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	2b c0       	rjmp	.+86     	; 0x123e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	a1 f4       	brne	.+40     	; 0x1216 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11ee:	a2 e3       	ldi	r26, 0x32	; 50
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e2 e3       	ldi	r30, 0x32	; 50
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_writePin+0x194>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_writePin+0x190>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	14 c0       	rjmp	.+40     	; 0x123e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1216:	a2 e3       	ldi	r26, 0x32	; 50
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e2 e3       	ldi	r30, 0x32	; 50
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <GPIO_writePin+0x1bc>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <GPIO_writePin+0x1b8>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <GPIO_readPin+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <GPIO_readPin+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	8a 83       	std	Y+2, r24	; 0x02
    125e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1260:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 30       	cpi	r24, 0x08	; 8
    1266:	08 f0       	brcs	.+2      	; 0x126a <GPIO_readPin+0x1c>
    1268:	84 c0       	rjmp	.+264    	; 0x1372 <GPIO_readPin+0x124>
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	08 f0       	brcs	.+2      	; 0x1272 <GPIO_readPin+0x24>
    1270:	80 c0       	rjmp	.+256    	; 0x1372 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3d 83       	std	Y+5, r19	; 0x05
    127a:	2c 83       	std	Y+4, r18	; 0x04
    127c:	4c 81       	ldd	r20, Y+4	; 0x04
    127e:	5d 81       	ldd	r21, Y+5	; 0x05
    1280:	41 30       	cpi	r20, 0x01	; 1
    1282:	51 05       	cpc	r21, r1
    1284:	79 f1       	breq	.+94     	; 0x12e4 <GPIO_readPin+0x96>
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	91 05       	cpc	r25, r1
    128e:	34 f4       	brge	.+12     	; 0x129c <GPIO_readPin+0x4e>
    1290:	2c 81       	ldd	r18, Y+4	; 0x04
    1292:	3d 81       	ldd	r19, Y+5	; 0x05
    1294:	21 15       	cp	r18, r1
    1296:	31 05       	cpc	r19, r1
    1298:	69 f0       	breq	.+26     	; 0x12b4 <GPIO_readPin+0x66>
    129a:	6b c0       	rjmp	.+214    	; 0x1372 <GPIO_readPin+0x124>
    129c:	4c 81       	ldd	r20, Y+4	; 0x04
    129e:	5d 81       	ldd	r21, Y+5	; 0x05
    12a0:	42 30       	cpi	r20, 0x02	; 2
    12a2:	51 05       	cpc	r21, r1
    12a4:	b9 f1       	breq	.+110    	; 0x1314 <GPIO_readPin+0xc6>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <GPIO_readPin+0x64>
    12b0:	49 c0       	rjmp	.+146    	; 0x1344 <GPIO_readPin+0xf6>
    12b2:	5f c0       	rjmp	.+190    	; 0x1372 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12b4:	e9 e3       	ldi	r30, 0x39	; 57
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a9 01       	movw	r20, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_readPin+0x7e>
    12c8:	55 95       	asr	r21
    12ca:	47 95       	ror	r20
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_readPin+0x7a>
    12d0:	ca 01       	movw	r24, r20
    12d2:	81 70       	andi	r24, 0x01	; 1
    12d4:	90 70       	andi	r25, 0x00	; 0
    12d6:	88 23       	and	r24, r24
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	49 c0       	rjmp	.+146    	; 0x1372 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12e0:	19 82       	std	Y+1, r1	; 0x01
    12e2:	47 c0       	rjmp	.+142    	; 0x1372 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12e4:	e6 e3       	ldi	r30, 0x36	; 54
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a9 01       	movw	r20, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_readPin+0xae>
    12f8:	55 95       	asr	r21
    12fa:	47 95       	ror	r20
    12fc:	8a 95       	dec	r24
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_readPin+0xaa>
    1300:	ca 01       	movw	r24, r20
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	90 70       	andi	r25, 0x00	; 0
    1306:	88 23       	and	r24, r24
    1308:	19 f0       	breq	.+6      	; 0x1310 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	31 c0       	rjmp	.+98     	; 0x1372 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1310:	19 82       	std	Y+1, r1	; 0x01
    1312:	2f c0       	rjmp	.+94     	; 0x1372 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1314:	e3 e3       	ldi	r30, 0x33	; 51
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_readPin+0xde>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_readPin+0xda>
    1330:	ca 01       	movw	r24, r20
    1332:	81 70       	andi	r24, 0x01	; 1
    1334:	90 70       	andi	r25, 0x00	; 0
    1336:	88 23       	and	r24, r24
    1338:	19 f0       	breq	.+6      	; 0x1340 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	19 c0       	rjmp	.+50     	; 0x1372 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	17 c0       	rjmp	.+46     	; 0x1372 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1344:	e0 e3       	ldi	r30, 0x30	; 48
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <GPIO_readPin+0x10e>
    1358:	55 95       	asr	r21
    135a:	47 95       	ror	r20
    135c:	8a 95       	dec	r24
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <GPIO_readPin+0x10a>
    1360:	ca 01       	movw	r24, r20
    1362:	81 70       	andi	r24, 0x01	; 1
    1364:	90 70       	andi	r25, 0x00	; 0
    1366:	88 23       	and	r24, r24
    1368:	19 f0       	breq	.+6      	; 0x1370 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1370:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <GPIO_setupPortDirection+0x6>
    138a:	00 d0       	rcall	.+0      	; 0x138c <GPIO_setupPortDirection+0x8>
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	90 f5       	brcc	.+100    	; 0x13fe <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3c 83       	std	Y+4, r19	; 0x04
    13a2:	2b 83       	std	Y+3, r18	; 0x03
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	d1 f0       	breq	.+52     	; 0x13e2 <GPIO_setupPortDirection+0x5e>
    13ae:	2b 81       	ldd	r18, Y+3	; 0x03
    13b0:	3c 81       	ldd	r19, Y+4	; 0x04
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <GPIO_setupPortDirection+0x3e>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	61 f0       	breq	.+24     	; 0x13d8 <GPIO_setupPortDirection+0x54>
    13c0:	1e c0       	rjmp	.+60     	; 0x13fe <GPIO_setupPortDirection+0x7a>
    13c2:	2b 81       	ldd	r18, Y+3	; 0x03
    13c4:	3c 81       	ldd	r19, Y+4	; 0x04
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	81 f0       	breq	.+32     	; 0x13ec <GPIO_setupPortDirection+0x68>
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	81 f0       	breq	.+32     	; 0x13f6 <GPIO_setupPortDirection+0x72>
    13d6:	13 c0       	rjmp	.+38     	; 0x13fe <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13d8:	ea e3       	ldi	r30, 0x3A	; 58
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	80 83       	st	Z, r24
    13e0:	0e c0       	rjmp	.+28     	; 0x13fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13e2:	e7 e3       	ldi	r30, 0x37	; 55
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	80 83       	st	Z, r24
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13ec:	e4 e3       	ldi	r30, 0x34	; 52
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	80 83       	st	Z, r24
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13f6:	e1 e3       	ldi	r30, 0x31	; 49
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <GPIO_writePort+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <GPIO_writePort+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	84 30       	cpi	r24, 0x04	; 4
    1420:	90 f5       	brcc	.+100    	; 0x1486 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3c 83       	std	Y+4, r19	; 0x04
    142a:	2b 83       	std	Y+3, r18	; 0x03
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	d1 f0       	breq	.+52     	; 0x146a <GPIO_writePort+0x5e>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	2c f4       	brge	.+10     	; 0x144a <GPIO_writePort+0x3e>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	61 f0       	breq	.+24     	; 0x1460 <GPIO_writePort+0x54>
    1448:	1e c0       	rjmp	.+60     	; 0x1486 <GPIO_writePort+0x7a>
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	81 f0       	breq	.+32     	; 0x1474 <GPIO_writePort+0x68>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	91 05       	cpc	r25, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <GPIO_writePort+0x72>
    145e:	13 c0       	rjmp	.+38     	; 0x1486 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1460:	eb e3       	ldi	r30, 0x3B	; 59
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	80 83       	st	Z, r24
    1468:	0e c0       	rjmp	.+28     	; 0x1486 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    146a:	e8 e3       	ldi	r30, 0x38	; 56
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1474:	e5 e3       	ldi	r30, 0x35	; 53
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	80 83       	st	Z, r24
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    147e:	e2 e3       	ldi	r30, 0x32	; 50
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	80 83       	st	Z, r24
			break;
		}
	}
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <GPIO_readPort+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <GPIO_readPort+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14a2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	90 f5       	brcc	.+100    	; 0x150e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <GPIO_readPort+0x5e>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <GPIO_readPort+0x3e>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <GPIO_readPort+0x54>
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <GPIO_readPort+0x7a>
    14d2:	2b 81       	ldd	r18, Y+3	; 0x03
    14d4:	3c 81       	ldd	r19, Y+4	; 0x04
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <GPIO_readPort+0x68>
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <GPIO_readPort+0x72>
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14e8:	e9 e3       	ldi	r30, 0x39	; 57
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14f2:	e6 e3       	ldi	r30, 0x36	; 54
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14fc:	e3 e3       	ldi	r30, 0x33	; 51
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	04 c0       	rjmp	.+8      	; 0x150e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1506:	e0 e3       	ldi	r30, 0x30	; 48
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <TWI_init>:
#include <avr/io.h>
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <TWI_init+0x6>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
	/*set Bit Rate as required*/
    TWBR = Config_Ptr->rate;
    152c:	a0 e2       	ldi	r26, 0x20	; 32
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	81 81       	ldd	r24, Z+1	; 0x01
    1536:	8c 93       	st	X, r24
    /*set pre-scaler  as required*/
	TWSR =(TWSR &0xfc) | (Config_Ptr->prescaler);
    1538:	a1 e2       	ldi	r26, 0x21	; 33
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e1 e2       	ldi	r30, 0x21	; 33
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	98 2f       	mov	r25, r24
    1544:	9c 7f       	andi	r25, 0xFC	; 252
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	89 2b       	or	r24, r25
    154e:	8c 93       	st	X, r24


	/*set master address required*/
    TWAR =(TWAR&0x01) |(Config_Ptr->Mastr_address<<1);
    1550:	a2 e2       	ldi	r26, 0x22	; 34
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e2 e2       	ldi	r30, 0x22	; 34
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	21 70       	andi	r18, 0x01	; 1
    155e:	e9 81       	ldd	r30, Y+1	; 0x01
    1560:	fa 81       	ldd	r31, Y+2	; 0x02
    1562:	80 81       	ld	r24, Z
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	82 2b       	or	r24, r18
    156e:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1570:	e6 e5       	ldi	r30, 0x56	; 86
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	84 e0       	ldi	r24, 0x04	; 4
    1576:	80 83       	st	Z, r24
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <TWI_start>:

void TWI_start(void)
{
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    158a:	e6 e5       	ldi	r30, 0x56	; 86
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	84 ea       	ldi	r24, 0xA4	; 164
    1590:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1592:	e6 e5       	ldi	r30, 0x56	; 86
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	88 23       	and	r24, r24
    159a:	dc f7       	brge	.-10     	; 0x1592 <TWI_start+0x10>
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <TWI_stop>:

void TWI_stop(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    15aa:	e6 e5       	ldi	r30, 0x56	; 86
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	84 e9       	ldi	r24, 0x94	; 148
    15b0:	80 83       	st	Z, r24
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    15c4:	e3 e2       	ldi	r30, 0x23	; 35
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    15cc:	e6 e5       	ldi	r30, 0x56	; 86
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	84 e8       	ldi	r24, 0x84	; 132
    15d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    15d4:	e6 e5       	ldi	r30, 0x56	; 86
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	88 23       	and	r24, r24
    15dc:	dc f7       	brge	.-10     	; 0x15d4 <TWI_writeByte+0x1c>
}
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    15ee:	e6 e5       	ldi	r30, 0x56	; 86
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	84 ec       	ldi	r24, 0xC4	; 196
    15f4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    15f6:	e6 e5       	ldi	r30, 0x56	; 86
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	dc f7       	brge	.-10     	; 0x15f6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1600:	e3 e2       	ldi	r30, 0x23	; 35
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1614:	e6 e5       	ldi	r30, 0x56	; 86
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	84 e8       	ldi	r24, 0x84	; 132
    161a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    161c:	e6 e5       	ldi	r30, 0x56	; 86
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	88 23       	and	r24, r24
    1624:	dc f7       	brge	.-10     	; 0x161c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1626:	e3 e2       	ldi	r30, 0x23	; 35
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    163c:	e1 e2       	ldi	r30, 0x21	; 33
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	88 7f       	andi	r24, 0xF8	; 248
    1644:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1646:	89 81       	ldd	r24, Y+1	; 0x01
}
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <LCD_init>:
#include "commen_macros.h" /* To use the macros like SET_BIT */
#include "lcd.h"
#include "gpio.h"

void LCD_init(void)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1658:	83 e0       	ldi	r24, 0x03	; 3
    165a:	65 e0       	ldi	r22, 0x05	; 5
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	0e 94 51 07 	call	0xea2	; 0xea2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	66 e0       	ldi	r22, 0x06	; 6
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 51 07 	call	0xea2	; 0xea2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	67 e0       	ldi	r22, 0x07	; 7
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	0e 94 51 07 	call	0xea2	; 0xea2 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	6f ef       	ldi	r22, 0xFF	; 255
    167a:	0e 94 c2 09 	call	0x1384	; 0x1384 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    167e:	88 e3       	ldi	r24, 0x38	; 56
    1680:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1684:	8c e0       	ldi	r24, 0x0C	; 12
    1686:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_sendCommand>
}
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	e9 97       	sbiw	r28, 0x39	; 57
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	65 e0       	ldi	r22, 0x05	; 5
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	66 e0       	ldi	r22, 0x06	; 6
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e8       	ldi	r26, 0x80	; 128
    16c6:	bf e3       	ldi	r27, 0x3F	; 63
    16c8:	8d ab       	std	Y+53, r24	; 0x35
    16ca:	9e ab       	std	Y+54, r25	; 0x36
    16cc:	af ab       	std	Y+55, r26	; 0x37
    16ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6d a9       	ldd	r22, Y+53	; 0x35
    16d2:	7e a9       	ldd	r23, Y+54	; 0x36
    16d4:	8f a9       	ldd	r24, Y+55	; 0x37
    16d6:	98 ad       	ldd	r25, Y+56	; 0x38
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	89 ab       	std	Y+49, r24	; 0x31
    16ea:	9a ab       	std	Y+50, r25	; 0x32
    16ec:	ab ab       	std	Y+51, r26	; 0x33
    16ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16f0:	69 a9       	ldd	r22, Y+49	; 0x31
    16f2:	7a a9       	ldd	r23, Y+50	; 0x32
    16f4:	8b a9       	ldd	r24, Y+51	; 0x33
    16f6:	9c a9       	ldd	r25, Y+52	; 0x34
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	98 ab       	std	Y+48, r25	; 0x30
    170e:	8f a7       	std	Y+47, r24	; 0x2f
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1712:	69 a9       	ldd	r22, Y+49	; 0x31
    1714:	7a a9       	ldd	r23, Y+50	; 0x32
    1716:	8b a9       	ldd	r24, Y+51	; 0x33
    1718:	9c a9       	ldd	r25, Y+52	; 0x34
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6d a9       	ldd	r22, Y+53	; 0x35
    172c:	7e a9       	ldd	r23, Y+54	; 0x36
    172e:	8f a9       	ldd	r24, Y+55	; 0x37
    1730:	98 ad       	ldd	r25, Y+56	; 0x38
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	98 ab       	std	Y+48, r25	; 0x30
    1750:	8f a7       	std	Y+47, r24	; 0x2f
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <LCD_sendCommand+0xdc>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e a7       	std	Y+46, r25	; 0x2e
    175a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    175c:	8d a5       	ldd	r24, Y+45	; 0x2d
    175e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_sendCommand+0xca>
    1764:	9e a7       	std	Y+46, r25	; 0x2e
    1766:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	8f a5       	ldd	r24, Y+47	; 0x2f
    176a:	98 a9       	ldd	r25, Y+48	; 0x30
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	98 ab       	std	Y+48, r25	; 0x30
    1770:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	8f a5       	ldd	r24, Y+47	; 0x2f
    1774:	98 a9       	ldd	r25, Y+48	; 0x30
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <LCD_sendCommand+0xbe>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	69 a9       	ldd	r22, Y+49	; 0x31
    177e:	7a a9       	ldd	r23, Y+50	; 0x32
    1780:	8b a9       	ldd	r24, Y+51	; 0x33
    1782:	9c a9       	ldd	r25, Y+52	; 0x34
    1784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	98 ab       	std	Y+48, r25	; 0x30
    178e:	8f a7       	std	Y+47, r24	; 0x2f
    1790:	8f a5       	ldd	r24, Y+47	; 0x2f
    1792:	98 a9       	ldd	r25, Y+48	; 0x30
    1794:	9c a7       	std	Y+44, r25	; 0x2c
    1796:	8b a7       	std	Y+43, r24	; 0x2b
    1798:	8b a5       	ldd	r24, Y+43	; 0x2b
    179a:	9c a5       	ldd	r25, Y+44	; 0x2c
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_sendCommand+0x106>
    17a0:	9c a7       	std	Y+44, r25	; 0x2c
    17a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	67 e0       	ldi	r22, 0x07	; 7
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e8       	ldi	r26, 0x80	; 128
    17b4:	bf e3       	ldi	r27, 0x3F	; 63
    17b6:	8f a3       	std	Y+39, r24	; 0x27
    17b8:	98 a7       	std	Y+40, r25	; 0x28
    17ba:	a9 a7       	std	Y+41, r26	; 0x29
    17bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6f a1       	ldd	r22, Y+39	; 0x27
    17c0:	78 a5       	ldd	r23, Y+40	; 0x28
    17c2:	89 a5       	ldd	r24, Y+41	; 0x29
    17c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a ef       	ldi	r20, 0xFA	; 250
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8b a3       	std	Y+35, r24	; 0x23
    17d8:	9c a3       	std	Y+36, r25	; 0x24
    17da:	ad a3       	std	Y+37, r26	; 0x25
    17dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <LCD_sendCommand+0x16a>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1800:	6b a1       	ldd	r22, Y+35	; 0x23
    1802:	7c a1       	ldd	r23, Y+36	; 0x24
    1804:	8d a1       	ldd	r24, Y+37	; 0x25
    1806:	9e a1       	ldd	r25, Y+38	; 0x26
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6f a1       	ldd	r22, Y+39	; 0x27
    181a:	78 a5       	ldd	r23, Y+40	; 0x28
    181c:	89 a5       	ldd	r24, Y+41	; 0x29
    181e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9a a3       	std	Y+34, r25	; 0x22
    183e:	89 a3       	std	Y+33, r24	; 0x21
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <LCD_sendCommand+0x1ca>
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	98 a3       	std	Y+32, r25	; 0x20
    1848:	8f 8f       	std	Y+31, r24	; 0x1f
    184a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    184c:	98 a1       	ldd	r25, Y+32	; 0x20
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_sendCommand+0x1b8>
    1852:	98 a3       	std	Y+32, r25	; 0x20
    1854:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	89 a1       	ldd	r24, Y+33	; 0x21
    1858:	9a a1       	ldd	r25, Y+34	; 0x22
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9a a3       	std	Y+34, r25	; 0x22
    185e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	89 a1       	ldd	r24, Y+33	; 0x21
    1862:	9a a1       	ldd	r25, Y+34	; 0x22
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <LCD_sendCommand+0x1ac>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6b a1       	ldd	r22, Y+35	; 0x23
    186c:	7c a1       	ldd	r23, Y+36	; 0x24
    186e:	8d a1       	ldd	r24, Y+37	; 0x25
    1870:	9e a1       	ldd	r25, Y+38	; 0x26
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	89 a1       	ldd	r24, Y+33	; 0x21
    1880:	9a a1       	ldd	r25, Y+34	; 0x22
    1882:	9e 8f       	std	Y+30, r25	; 0x1e
    1884:	8d 8f       	std	Y+29, r24	; 0x1d
    1886:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1888:	9e 8d       	ldd	r25, Y+30	; 0x1e
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_sendCommand+0x1f4>
    188e:	9e 8f       	std	Y+30, r25	; 0x1e
    1890:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	69 ad       	ldd	r22, Y+57	; 0x39
    1896:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_writePort>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e8       	ldi	r26, 0x80	; 128
    18a0:	bf e3       	ldi	r27, 0x3F	; 63
    18a2:	89 8f       	std	Y+25, r24	; 0x19
    18a4:	9a 8f       	std	Y+26, r25	; 0x1a
    18a6:	ab 8f       	std	Y+27, r26	; 0x1b
    18a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18aa:	69 8d       	ldd	r22, Y+25	; 0x19
    18ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4a ef       	ldi	r20, 0xFA	; 250
    18b8:	54 e4       	ldi	r21, 0x44	; 68
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	8d 8b       	std	Y+21, r24	; 0x15
    18c4:	9e 8b       	std	Y+22, r25	; 0x16
    18c6:	af 8b       	std	Y+23, r26	; 0x17
    18c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18ca:	6d 89       	ldd	r22, Y+21	; 0x15
    18cc:	7e 89       	ldd	r23, Y+22	; 0x16
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	2c f4       	brge	.+10     	; 0x18ec <LCD_sendCommand+0x256>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9c 8b       	std	Y+20, r25	; 0x14
    18e8:	8b 8b       	std	Y+19, r24	; 0x13
    18ea:	3f c0       	rjmp	.+126    	; 0x196a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    18ec:	6d 89       	ldd	r22, Y+21	; 0x15
    18ee:	7e 89       	ldd	r23, Y+22	; 0x16
    18f0:	8f 89       	ldd	r24, Y+23	; 0x17
    18f2:	98 8d       	ldd	r25, Y+24	; 0x18
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	3f ef       	ldi	r19, 0xFF	; 255
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	57 e4       	ldi	r21, 0x47	; 71
    18fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	4c f5       	brge	.+82     	; 0x1956 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1904:	69 8d       	ldd	r22, Y+25	; 0x19
    1906:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1908:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e2       	ldi	r20, 0x20	; 32
    1912:	51 e4       	ldi	r21, 0x41	; 65
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	0f c0       	rjmp	.+30     	; 0x194c <LCD_sendCommand+0x2b6>
    192e:	88 ec       	ldi	r24, 0xC8	; 200
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9a 8b       	std	Y+18, r25	; 0x12
    1934:	89 8b       	std	Y+17, r24	; 0x11
    1936:	89 89       	ldd	r24, Y+17	; 0x11
    1938:	9a 89       	ldd	r25, Y+18	; 0x12
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <LCD_sendCommand+0x2a4>
    193e:	9a 8b       	std	Y+18, r25	; 0x12
    1940:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1942:	8b 89       	ldd	r24, Y+19	; 0x13
    1944:	9c 89       	ldd	r25, Y+20	; 0x14
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	9c 8b       	std	Y+20, r25	; 0x14
    194a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	8b 89       	ldd	r24, Y+19	; 0x13
    194e:	9c 89       	ldd	r25, Y+20	; 0x14
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	69 f7       	brne	.-38     	; 0x192e <LCD_sendCommand+0x298>
    1954:	14 c0       	rjmp	.+40     	; 0x197e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	98 8b       	std	Y+16, r25	; 0x10
    1970:	8f 87       	std	Y+15, r24	; 0x0f
    1972:	8f 85       	ldd	r24, Y+15	; 0x0f
    1974:	98 89       	ldd	r25, Y+16	; 0x10
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	f1 f7       	brne	.-4      	; 0x1976 <LCD_sendCommand+0x2e0>
    197a:	98 8b       	std	Y+16, r25	; 0x10
    197c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	67 e0       	ldi	r22, 0x07	; 7
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 e8       	ldi	r26, 0x80	; 128
    198e:	bf e3       	ldi	r27, 0x3F	; 63
    1990:	8b 87       	std	Y+11, r24	; 0x0b
    1992:	9c 87       	std	Y+12, r25	; 0x0c
    1994:	ad 87       	std	Y+13, r26	; 0x0d
    1996:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1998:	6b 85       	ldd	r22, Y+11	; 0x0b
    199a:	7c 85       	ldd	r23, Y+12	; 0x0c
    199c:	8d 85       	ldd	r24, Y+13	; 0x0d
    199e:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a ef       	ldi	r20, 0xFA	; 250
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	8f 83       	std	Y+7, r24	; 0x07
    19b2:	98 87       	std	Y+8, r25	; 0x08
    19b4:	a9 87       	std	Y+9, r26	; 0x09
    19b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	2c f4       	brge	.+10     	; 0x19da <LCD_sendCommand+0x344>
		__ticks = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	3f c0       	rjmp	.+126    	; 0x1a58 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	4c f5       	brge	.+82     	; 0x1a44 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e2       	ldi	r20, 0x20	; 32
    1a00:	51 e4       	ldi	r21, 0x41	; 65
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <LCD_sendCommand+0x3a4>
    1a1c:	88 ec       	ldi	r24, 0xC8	; 200
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_sendCommand+0x392>
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	69 f7       	brne	.-38     	; 0x1a1c <LCD_sendCommand+0x386>
    1a42:	14 c0       	rjmp	.+40     	; 0x1a6c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	6f 81       	ldd	r22, Y+7	; 0x07
    1a46:	78 85       	ldd	r23, Y+8	; 0x08
    1a48:	89 85       	ldd	r24, Y+9	; 0x09
    1a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <LCD_sendCommand+0x3ce>
    1a68:	9a 83       	std	Y+2, r25	; 0x02
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a6c:	e9 96       	adiw	r28, 0x39	; 57
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data){
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	e9 97       	sbiw	r28, 0x39	; 57
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	65 e0       	ldi	r22, 0x05	; 5
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	66 e0       	ldi	r22, 0x06	; 6
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	a0 e8       	ldi	r26, 0x80	; 128
    1aae:	bf e3       	ldi	r27, 0x3F	; 63
    1ab0:	8d ab       	std	Y+53, r24	; 0x35
    1ab2:	9e ab       	std	Y+54, r25	; 0x36
    1ab4:	af ab       	std	Y+55, r26	; 0x37
    1ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aba:	7e a9       	ldd	r23, Y+54	; 0x36
    1abc:	8f a9       	ldd	r24, Y+55	; 0x37
    1abe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	4a ef       	ldi	r20, 0xFA	; 250
    1ac6:	54 e4       	ldi	r21, 0x44	; 68
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	89 ab       	std	Y+49, r24	; 0x31
    1ad2:	9a ab       	std	Y+50, r25	; 0x32
    1ad4:	ab ab       	std	Y+51, r26	; 0x33
    1ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    1ada:	7a a9       	ldd	r23, Y+50	; 0x32
    1adc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ade:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	2c f4       	brge	.+10     	; 0x1afa <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
    1af8:	3f c0       	rjmp	.+126    	; 0x1b78 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1afa:	69 a9       	ldd	r22, Y+49	; 0x31
    1afc:	7a a9       	ldd	r23, Y+50	; 0x32
    1afe:	8b a9       	ldd	r24, Y+51	; 0x33
    1b00:	9c a9       	ldd	r25, Y+52	; 0x34
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0e:	18 16       	cp	r1, r24
    1b10:	4c f5       	brge	.+82     	; 0x1b64 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b12:	6d a9       	ldd	r22, Y+53	; 0x35
    1b14:	7e a9       	ldd	r23, Y+54	; 0x36
    1b16:	8f a9       	ldd	r24, Y+55	; 0x37
    1b18:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	98 ab       	std	Y+48, r25	; 0x30
    1b38:	8f a7       	std	Y+47, r24	; 0x2f
    1b3a:	0f c0       	rjmp	.+30     	; 0x1b5a <LCD_displayCharacter+0xdc>
    1b3c:	88 ec       	ldi	r24, 0xC8	; 200
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e a7       	std	Y+46, r25	; 0x2e
    1b42:	8d a7       	std	Y+45, r24	; 0x2d
    1b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <LCD_displayCharacter+0xca>
    1b4c:	9e a7       	std	Y+46, r25	; 0x2e
    1b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b52:	98 a9       	ldd	r25, Y+48	; 0x30
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	98 ab       	std	Y+48, r25	; 0x30
    1b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	69 f7       	brne	.-38     	; 0x1b3c <LCD_displayCharacter+0xbe>
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b64:	69 a9       	ldd	r22, Y+49	; 0x31
    1b66:	7a a9       	ldd	r23, Y+50	; 0x32
    1b68:	8b a9       	ldd	r24, Y+51	; 0x33
    1b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	98 ab       	std	Y+48, r25	; 0x30
    1b76:	8f a7       	std	Y+47, r24	; 0x2f
    1b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7c:	9c a7       	std	Y+44, r25	; 0x2c
    1b7e:	8b a7       	std	Y+43, r24	; 0x2b
    1b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_displayCharacter+0x106>
    1b88:	9c a7       	std	Y+44, r25	; 0x2c
    1b8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	67 e0       	ldi	r22, 0x07	; 7
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e8       	ldi	r26, 0x80	; 128
    1b9c:	bf e3       	ldi	r27, 0x3F	; 63
    1b9e:	8f a3       	std	Y+39, r24	; 0x27
    1ba0:	98 a7       	std	Y+40, r25	; 0x28
    1ba2:	a9 a7       	std	Y+41, r26	; 0x29
    1ba4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba8:	78 a5       	ldd	r23, Y+40	; 0x28
    1baa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a ef       	ldi	r20, 0xFA	; 250
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8b a3       	std	Y+35, r24	; 0x23
    1bc0:	9c a3       	std	Y+36, r25	; 0x24
    1bc2:	ad a3       	std	Y+37, r26	; 0x25
    1bc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bca:	8d a1       	ldd	r24, Y+37	; 0x25
    1bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9a a3       	std	Y+34, r25	; 0x22
    1be4:	89 a3       	std	Y+33, r24	; 0x21
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1be8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bea:	7c a1       	ldd	r23, Y+36	; 0x24
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6f a1       	ldd	r22, Y+39	; 0x27
    1c02:	78 a5       	ldd	r23, Y+40	; 0x28
    1c04:	89 a5       	ldd	r24, Y+41	; 0x29
    1c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9a a3       	std	Y+34, r25	; 0x22
    1c26:	89 a3       	std	Y+33, r24	; 0x21
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_displayCharacter+0x1ca>
    1c2a:	88 ec       	ldi	r24, 0xC8	; 200
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	98 a3       	std	Y+32, r25	; 0x20
    1c30:	8f 8f       	std	Y+31, r24	; 0x1f
    1c32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c34:	98 a1       	ldd	r25, Y+32	; 0x20
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_displayCharacter+0x1b8>
    1c3a:	98 a3       	std	Y+32, r25	; 0x20
    1c3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c40:	9a a1       	ldd	r25, Y+34	; 0x22
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	9a a3       	std	Y+34, r25	; 0x22
    1c46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <LCD_displayCharacter+0x1ac>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	6b a1       	ldd	r22, Y+35	; 0x23
    1c54:	7c a1       	ldd	r23, Y+36	; 0x24
    1c56:	8d a1       	ldd	r24, Y+37	; 0x25
    1c58:	9e a1       	ldd	r25, Y+38	; 0x26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9a a3       	std	Y+34, r25	; 0x22
    1c64:	89 a3       	std	Y+33, r24	; 0x21
    1c66:	89 a1       	ldd	r24, Y+33	; 0x21
    1c68:	9a a1       	ldd	r25, Y+34	; 0x22
    1c6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_displayCharacter+0x1f4>
    1c76:	9e 8f       	std	Y+30, r25	; 0x1e
    1c78:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	69 ad       	ldd	r22, Y+57	; 0x39
    1c7e:	0e 94 06 0a 	call	0x140c	; 0x140c <GPIO_writePort>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	89 8f       	std	Y+25, r24	; 0x19
    1c8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	69 8d       	ldd	r22, Y+25	; 0x19
    1c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8d 8b       	std	Y+21, r24	; 0x15
    1cac:	9e 8b       	std	Y+22, r25	; 0x16
    1cae:	af 8b       	std	Y+23, r26	; 0x17
    1cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 8b       	std	Y+20, r25	; 0x14
    1cd0:	8b 8b       	std	Y+19, r24	; 0x13
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cda:	98 8d       	ldd	r25, Y+24	; 0x18
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	69 8d       	ldd	r22, Y+25	; 0x19
    1cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_displayCharacter+0x2b6>
    1d16:	88 ec       	ldi	r24, 0xC8	; 200
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9a 8b       	std	Y+18, r25	; 0x12
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
    1d1e:	89 89       	ldd	r24, Y+17	; 0x11
    1d20:	9a 89       	ldd	r25, Y+18	; 0x12
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_displayCharacter+0x2a4>
    1d26:	9a 8b       	std	Y+18, r25	; 0x12
    1d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9c 8b       	std	Y+20, r25	; 0x14
    1d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8b 89       	ldd	r24, Y+19	; 0x13
    1d36:	9c 89       	ldd	r25, Y+20	; 0x14
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_displayCharacter+0x298>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d40:	7e 89       	ldd	r23, Y+22	; 0x16
    1d42:	8f 89       	ldd	r24, Y+23	; 0x17
    1d44:	98 8d       	ldd	r25, Y+24	; 0x18
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	8b 89       	ldd	r24, Y+19	; 0x13
    1d54:	9c 89       	ldd	r25, Y+20	; 0x14
    1d56:	98 8b       	std	Y+16, r25	; 0x10
    1d58:	8f 87       	std	Y+15, r24	; 0x0f
    1d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5c:	98 89       	ldd	r25, Y+16	; 0x10
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_displayCharacter+0x2e0>
    1d62:	98 8b       	std	Y+16, r25	; 0x10
    1d64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	67 e0       	ldi	r22, 0x07	; 7
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 3c 08 	call	0x1078	; 0x1078 <GPIO_writePin>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 e8       	ldi	r26, 0x80	; 128
    1d76:	bf e3       	ldi	r27, 0x3F	; 63
    1d78:	8b 87       	std	Y+11, r24	; 0x0b
    1d7a:	9c 87       	std	Y+12, r25	; 0x0c
    1d7c:	ad 87       	std	Y+13, r26	; 0x0d
    1d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	a9 87       	std	Y+9, r26	; 0x09
    1d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <LCD_displayCharacter+0x3a4>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_displayCharacter+0x392>
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <LCD_displayCharacter+0x386>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_displayCharacter+0x3ce>
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1e54:	e9 96       	adiw	r28, 0x39	; 57
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <LCD_displayString>:
/*
 * Description:
 * function display required string
 */
void LCD_displayString(const char *Str){
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <LCD_displayString+0x6>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count=0;
    1e76:	19 82       	std	Y+1, r1	; 0x01
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <LCD_displayString+0x30>
	while(Str[count]!='\0'){
		LCD_displayCharacter(Str[count]);
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03
    1e84:	fc 01       	movw	r30, r24
    1e86:	e2 0f       	add	r30, r18
    1e88:	f3 1f       	adc	r31, r19
    1e8a:	80 81       	ld	r24, Z
    1e8c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <LCD_displayCharacter>
		count++;
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	89 83       	std	Y+1, r24	; 0x01
 * Description:
 * function display required string
 */
void LCD_displayString(const char *Str){
	uint8 count=0;
	while(Str[count]!='\0'){
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	80 81       	ld	r24, Z
    1ea8:	88 23       	and	r24, r24
    1eaa:	39 f7       	brne	.-50     	; 0x1e7a <LCD_displayString+0x14>
		LCD_displayCharacter(Str[count]);
		count++;
	}
}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <LCD_moveCursor>:
/*
 * Description:
 * move cursor in specific position
 */
void LCD_moveCursor(uint8 row,uint8 col){
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <LCD_moveCursor+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LCD_moveCursor+0x8>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_adress;
	switch(row){
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3d 83       	std	Y+5, r19	; 0x05
    1ed2:	2c 83       	std	Y+4, r18	; 0x04
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	91 05       	cpc	r25, r1
    1edc:	c1 f0       	breq	.+48     	; 0x1f0e <LCD_moveCursor+0x56>
    1ede:	2c 81       	ldd	r18, Y+4	; 0x04
    1ee0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ee2:	22 30       	cpi	r18, 0x02	; 2
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_moveCursor+0x3a>
    1ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eea:	9d 81       	ldd	r25, Y+5	; 0x05
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	61 f0       	breq	.+24     	; 0x1f08 <LCD_moveCursor+0x50>
    1ef0:	19 c0       	rjmp	.+50     	; 0x1f24 <LCD_moveCursor+0x6c>
    1ef2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	69 f0       	breq	.+26     	; 0x1f16 <LCD_moveCursor+0x5e>
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	83 30       	cpi	r24, 0x03	; 3
    1f02:	91 05       	cpc	r25, r1
    1f04:	61 f0       	breq	.+24     	; 0x1f1e <LCD_moveCursor+0x66>
    1f06:	0e c0       	rjmp	.+28     	; 0x1f24 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_adress=col;
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	0b c0       	rjmp	.+22     	; 0x1f24 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_adress=col+0x040;
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	80 5c       	subi	r24, 0xC0	; 192
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	07 c0       	rjmp	.+14     	; 0x1f24 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_adress=col+0x10;
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	80 5f       	subi	r24, 0xF0	; 240
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_adress=col+0x50;
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	80 5b       	subi	r24, 0xB0	; 176
    1f22:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*move cursor*/
	LCD_sendCommand(lcd_memory_adress|LCD_SET_CURSOR_LOCATION);
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	80 68       	ori	r24, 0x80	; 128
    1f28:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_sendCommand>
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <LCD_displayStringRowColumn>:
/*
 * Description:
 * display required string in required row and column index
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <LCD_displayStringRowColumn+0x6>
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <LCD_displayStringRowColumn+0x8>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	6a 83       	std	Y+2, r22	; 0x02
    1f4c:	5c 83       	std	Y+4, r21	; 0x04
    1f4e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	6a 81       	ldd	r22, Y+2	; 0x02
    1f54:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_moveCursor>
	LCD_displayString(Str);
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_displayString>
}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	62 97       	sbiw	r28, 0x12	; 18
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	9a 8b       	std	Y+18, r25	; 0x12
    1f84:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f86:	89 89       	ldd	r24, Y+17	; 0x11
    1f88:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8a:	9e 01       	movw	r18, r28
    1f8c:	2f 5f       	subi	r18, 0xFF	; 255
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	b9 01       	movw	r22, r18
    1f92:	4a e0       	ldi	r20, 0x0A	; 10
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	0e 94 ac 19 	call	0x3358	; 0x3358 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f9a:	ce 01       	movw	r24, r28
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <LCD_displayString>
}
    1fa2:	62 96       	adiw	r28, 0x12	; 18
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	0e 94 4b 0b 	call	0x1696	; 0x1696 <LCD_sendCommand>
}
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <main>:

uint8 pass[PASSWORD_NUMBER];/*array of 5 element ,use to store password in EEPROM*/
uint8 pass_comp[PASSWORD_NUMBER];/*array of 5 element ,use as a compare password with stored in EEPROM*/
extern uint8 holed_system;

int main(void){
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	c1 57       	subi	r28, 0x71	; 113
    1fd6:	d0 40       	sbci	r29, 0x00	; 0
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61

	/*local variable*/
	uint8 count,option,res_match,error=0;
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	eb 5a       	subi	r30, 0xAB	; 171
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	10 82       	st	Z, r1
	uint8 condition;
	/* Enable Global Interrupt I-Bit */
	SREG=(1<<7);
    1fea:	ef e5       	ldi	r30, 0x5F	; 95
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 e8       	ldi	r24, 0x80	; 128
    1ff0:	80 83       	st	Z, r24

	/* Initialize the EEPROM Driver */
	EEPROM_intit();
    1ff2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <EEPROM_intit>
	/*
	 * Create configuration structure for timer1 driver
	 * this configuration make interrupt every 1 second
	 */
	Timer_ConfigType config_time={0,7813,Timer_1,F_CPU_CLOCK_1024,Compare};
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	86 5a       	subi	r24, 0xA6	; 166
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	aa 96       	adiw	r28, 0x2a	; 42
    1ffe:	9f af       	std	Y+63, r25	; 0x3f
    2000:	8e af       	std	Y+62, r24	; 0x3e
    2002:	aa 97       	sbiw	r28, 0x2a	; 42
    2004:	8e e6       	ldi	r24, 0x6E	; 110
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	ac 96       	adiw	r28, 0x2c	; 44
    200a:	9f af       	std	Y+63, r25	; 0x3f
    200c:	8e af       	std	Y+62, r24	; 0x3e
    200e:	ac 97       	sbiw	r28, 0x2c	; 44
    2010:	9b e0       	ldi	r25, 0x0B	; 11
    2012:	ad 96       	adiw	r28, 0x2d	; 45
    2014:	9f af       	std	Y+63, r25	; 0x3f
    2016:	ad 97       	sbiw	r28, 0x2d	; 45
    2018:	ac 96       	adiw	r28, 0x2c	; 44
    201a:	ee ad       	ldd	r30, Y+62	; 0x3e
    201c:	ff ad       	ldd	r31, Y+63	; 0x3f
    201e:	ac 97       	sbiw	r28, 0x2c	; 44
    2020:	00 80       	ld	r0, Z
    2022:	ac 96       	adiw	r28, 0x2c	; 44
    2024:	8e ad       	ldd	r24, Y+62	; 0x3e
    2026:	9f ad       	ldd	r25, Y+63	; 0x3f
    2028:	ac 97       	sbiw	r28, 0x2c	; 44
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	ac 96       	adiw	r28, 0x2c	; 44
    202e:	9f af       	std	Y+63, r25	; 0x3f
    2030:	8e af       	std	Y+62, r24	; 0x3e
    2032:	ac 97       	sbiw	r28, 0x2c	; 44
    2034:	aa 96       	adiw	r28, 0x2a	; 42
    2036:	ee ad       	ldd	r30, Y+62	; 0x3e
    2038:	ff ad       	ldd	r31, Y+63	; 0x3f
    203a:	aa 97       	sbiw	r28, 0x2a	; 42
    203c:	00 82       	st	Z, r0
    203e:	aa 96       	adiw	r28, 0x2a	; 42
    2040:	8e ad       	ldd	r24, Y+62	; 0x3e
    2042:	9f ad       	ldd	r25, Y+63	; 0x3f
    2044:	aa 97       	sbiw	r28, 0x2a	; 42
    2046:	01 96       	adiw	r24, 0x01	; 1
    2048:	aa 96       	adiw	r28, 0x2a	; 42
    204a:	9f af       	std	Y+63, r25	; 0x3f
    204c:	8e af       	std	Y+62, r24	; 0x3e
    204e:	aa 97       	sbiw	r28, 0x2a	; 42
    2050:	ad 96       	adiw	r28, 0x2d	; 45
    2052:	9f ad       	ldd	r25, Y+63	; 0x3f
    2054:	ad 97       	sbiw	r28, 0x2d	; 45
    2056:	91 50       	subi	r25, 0x01	; 1
    2058:	ad 96       	adiw	r28, 0x2d	; 45
    205a:	9f af       	std	Y+63, r25	; 0x3f
    205c:	ad 97       	sbiw	r28, 0x2d	; 45
    205e:	ad 96       	adiw	r28, 0x2d	; 45
    2060:	ef ad       	ldd	r30, Y+63	; 0x3f
    2062:	ad 97       	sbiw	r28, 0x2d	; 45
    2064:	ee 23       	and	r30, r30
    2066:	c1 f6       	brne	.-80     	; 0x2018 <main+0x50>
	/* Initialize the BUZZER Driver */
	BUZZER_intit();
    2068:	0e 94 33 06 	call	0xc66	; 0xc66 <BUZZER_intit>
	/* Initialize the DcMotor Driver */
	DcMotor_Init();
    206c:	0e 94 57 06 	call	0xcae	; 0xcae <DcMotor_Init>
	/* Create configuration structure for URT driver */
	Uart_ConfigType config={STOP_BIT_1,BIT_8,DISABLED};
    2070:	ce 01       	movw	r24, r28
    2072:	8b 59       	subi	r24, 0x9B	; 155
    2074:	9f 4f       	sbci	r25, 0xFF	; 255
    2076:	af 96       	adiw	r28, 0x2f	; 47
    2078:	9f af       	std	Y+63, r25	; 0x3f
    207a:	8e af       	std	Y+62, r24	; 0x3e
    207c:	af 97       	sbiw	r28, 0x2f	; 47
    207e:	8b e6       	ldi	r24, 0x6B	; 107
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	e1 96       	adiw	r28, 0x31	; 49
    2084:	9f af       	std	Y+63, r25	; 0x3f
    2086:	8e af       	std	Y+62, r24	; 0x3e
    2088:	e1 97       	sbiw	r28, 0x31	; 49
    208a:	93 e0       	ldi	r25, 0x03	; 3
    208c:	e2 96       	adiw	r28, 0x32	; 50
    208e:	9f af       	std	Y+63, r25	; 0x3f
    2090:	e2 97       	sbiw	r28, 0x32	; 50
    2092:	e1 96       	adiw	r28, 0x31	; 49
    2094:	ee ad       	ldd	r30, Y+62	; 0x3e
    2096:	ff ad       	ldd	r31, Y+63	; 0x3f
    2098:	e1 97       	sbiw	r28, 0x31	; 49
    209a:	00 80       	ld	r0, Z
    209c:	e1 96       	adiw	r28, 0x31	; 49
    209e:	8e ad       	ldd	r24, Y+62	; 0x3e
    20a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    20a2:	e1 97       	sbiw	r28, 0x31	; 49
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	e1 96       	adiw	r28, 0x31	; 49
    20a8:	9f af       	std	Y+63, r25	; 0x3f
    20aa:	8e af       	std	Y+62, r24	; 0x3e
    20ac:	e1 97       	sbiw	r28, 0x31	; 49
    20ae:	af 96       	adiw	r28, 0x2f	; 47
    20b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    20b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    20b4:	af 97       	sbiw	r28, 0x2f	; 47
    20b6:	00 82       	st	Z, r0
    20b8:	af 96       	adiw	r28, 0x2f	; 47
    20ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    20bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    20be:	af 97       	sbiw	r28, 0x2f	; 47
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	af 96       	adiw	r28, 0x2f	; 47
    20c4:	9f af       	std	Y+63, r25	; 0x3f
    20c6:	8e af       	std	Y+62, r24	; 0x3e
    20c8:	af 97       	sbiw	r28, 0x2f	; 47
    20ca:	e2 96       	adiw	r28, 0x32	; 50
    20cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ce:	e2 97       	sbiw	r28, 0x32	; 50
    20d0:	91 50       	subi	r25, 0x01	; 1
    20d2:	e2 96       	adiw	r28, 0x32	; 50
    20d4:	9f af       	std	Y+63, r25	; 0x3f
    20d6:	e2 97       	sbiw	r28, 0x32	; 50
    20d8:	e2 96       	adiw	r28, 0x32	; 50
    20da:	ef ad       	ldd	r30, Y+63	; 0x3f
    20dc:	e2 97       	sbiw	r28, 0x32	; 50
    20de:	ee 23       	and	r30, r30
    20e0:	c1 f6       	brne	.-80     	; 0x2092 <main+0xca>
	/* Initialize the URT Driver */
	UART_init(&config);
    20e2:	ce 01       	movw	r24, r28
    20e4:	8b 59       	subi	r24, 0x9B	; 155
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	0e 94 7f 18 	call	0x30fe	; 0x30fe <UART_init>
    //write on first address 0xff
	EEPROM_writeByte(0x0000, 0xff);
	_delay_ms(50);
*/
	/*read first address on EEPROM*/
	EEPROM_readByte(0x0000, &condition);
    20ec:	9e 01       	movw	r18, r28
    20ee:	27 5a       	subi	r18, 0xA7	; 167
    20f0:	3f 4f       	sbci	r19, 0xFF	; 255
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	b9 01       	movw	r22, r18
    20f8:	0e 94 f1 06 	call	0xde2	; 0xde2 <EEPROM_readByte>

	/* Wait until MC2 is ready to receive the Byte */
	while(UART_recieveByte() != MC1_READY){}
    20fc:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    2100:	80 31       	cpi	r24, 0x10	; 16
    2102:	e1 f7       	brne	.-8      	; 0x20fc <main+0x134>
	/* Send the required Byte to MC2 through UART */
	UART_sendByte(condition);
    2104:	fe 01       	movw	r30, r28
    2106:	e7 5a       	subi	r30, 0xA7	; 167
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>

	/*at first ,check if 0xff store in EEPROM ,so no password store in EEPROM
 and ask user to enter password for system */
	if(condition==0xff){/*no password store in EEPROM*/
    2110:	fe 01       	movw	r30, r28
    2112:	e7 5a       	subi	r30, 0xA7	; 167
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	80 81       	ld	r24, Z
    2118:	8f 3f       	cpi	r24, 0xFF	; 255
    211a:	09 f0       	breq	.+2      	; 0x211e <main+0x156>
    211c:	eb c0       	rjmp	.+470    	; 0x22f4 <main+0x32c>
		/*Recieve password from MC1 ,and store password in EEPROM*/
		for(count=0 ;count<PASSWORD_NUMBER;count++){
    211e:	fe 01       	movw	r30, r28
    2120:	e8 5a       	subi	r30, 0xA8	; 168
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	10 82       	st	Z, r1
    2126:	df c0       	rjmp	.+446    	; 0x22e6 <main+0x31e>
			/* Send MC2_READY byte to MC2 to ask it to send the Byte */
			UART_sendByte(MC1_READY);
    2128:	80 e1       	ldi	r24, 0x10	; 16
    212a:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
			/* Receive Byte from MC1 through UART*/
			pass[count]=UART_recieveByte();
    212e:	fe 01       	movw	r30, r28
    2130:	e8 5a       	subi	r30, 0xA8	; 168
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	08 2f       	mov	r16, r24
    2138:	10 e0       	ldi	r17, 0x00	; 0
    213a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    213e:	f8 01       	movw	r30, r16
    2140:	ee 57       	subi	r30, 0x7E	; 126
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 83       	st	Z, r24
			/*store Byte Byte in EEPROM*/
			EEPROM_writeByte(0x0000|count, pass[count]);
    2146:	fe 01       	movw	r30, r28
    2148:	e8 5a       	subi	r30, 0xA8	; 168
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	48 2f       	mov	r20, r24
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	fe 01       	movw	r30, r28
    2154:	e8 5a       	subi	r30, 0xA8	; 168
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	fc 01       	movw	r30, r24
    2160:	ee 57       	subi	r30, 0x7E	; 126
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	20 81       	ld	r18, Z
    2166:	ca 01       	movw	r24, r20
    2168:	62 2f       	mov	r22, r18
    216a:	0e 94 b0 06 	call	0xd60	; 0xd60 <EEPROM_writeByte>
    216e:	fe 01       	movw	r30, r28
    2170:	ef 5a       	subi	r30, 0xAF	; 175
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e7       	ldi	r26, 0x70	; 112
    217a:	b2 e4       	ldi	r27, 0x42	; 66
    217c:	80 83       	st	Z, r24
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	a2 83       	std	Z+2, r26	; 0x02
    2182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	8e 01       	movw	r16, r28
    2186:	03 5b       	subi	r16, 0xB3	; 179
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	fe 01       	movw	r30, r28
    218c:	ef 5a       	subi	r30, 0xAF	; 175
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	54 e4       	ldi	r21, 0x44	; 68
    21a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	f8 01       	movw	r30, r16
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	a2 83       	std	Z+2, r26	; 0x02
    21b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b2:	fe 01       	movw	r30, r28
    21b4:	e3 5b       	subi	r30, 0xB3	; 179
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e8       	ldi	r20, 0x80	; 128
    21c6:	5f e3       	ldi	r21, 0x3F	; 63
    21c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21cc:	88 23       	and	r24, r24
    21ce:	44 f4       	brge	.+16     	; 0x21e0 <main+0x218>
		__ticks = 1;
    21d0:	fe 01       	movw	r30, r28
    21d2:	e5 5b       	subi	r30, 0xB5	; 181
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	64 c0       	rjmp	.+200    	; 0x22a8 <main+0x2e0>
	else if (__tmp > 65535)
    21e0:	fe 01       	movw	r30, r28
    21e2:	e3 5b       	subi	r30, 0xB3	; 179
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	0c f0       	brlt	.+2      	; 0x2200 <main+0x238>
    21fe:	43 c0       	rjmp	.+134    	; 0x2286 <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	fe 01       	movw	r30, r28
    2202:	ef 5a       	subi	r30, 0xAF	; 175
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8e 01       	movw	r16, r28
    2220:	05 5b       	subi	r16, 0xB5	; 181
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	1f c0       	rjmp	.+62     	; 0x2276 <main+0x2ae>
    2238:	fe 01       	movw	r30, r28
    223a:	e7 5b       	subi	r30, 0xB7	; 183
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	88 ec       	ldi	r24, 0xC8	; 200
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    2246:	fe 01       	movw	r30, r28
    2248:	e7 5b       	subi	r30, 0xB7	; 183
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <main+0x288>
    2254:	fe 01       	movw	r30, r28
    2256:	e7 5b       	subi	r30, 0xB7	; 183
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	de 01       	movw	r26, r28
    2260:	a5 5b       	subi	r26, 0xB5	; 181
    2262:	bf 4f       	sbci	r27, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e5 5b       	subi	r30, 0xB5	; 181
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	80 81       	ld	r24, Z
    226c:	91 81       	ldd	r25, Z+1	; 0x01
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	11 96       	adiw	r26, 0x01	; 1
    2272:	9c 93       	st	X, r25
    2274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	fe 01       	movw	r30, r28
    2278:	e5 5b       	subi	r30, 0xB5	; 181
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	d1 f6       	brne	.-76     	; 0x2238 <main+0x270>
    2284:	27 c0       	rjmp	.+78     	; 0x22d4 <main+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2286:	8e 01       	movw	r16, r28
    2288:	05 5b       	subi	r16, 0xB5	; 181
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e3 5b       	subi	r30, 0xB3	; 179
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	f8 01       	movw	r30, r16
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24
    22a8:	de 01       	movw	r26, r28
    22aa:	a9 5b       	subi	r26, 0xB9	; 185
    22ac:	bf 4f       	sbci	r27, 0xFF	; 255
    22ae:	fe 01       	movw	r30, r28
    22b0:	e5 5b       	subi	r30, 0xB5	; 181
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	8d 93       	st	X+, r24
    22ba:	9c 93       	st	X, r25
    22bc:	fe 01       	movw	r30, r28
    22be:	e9 5b       	subi	r30, 0xB9	; 185
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	f1 f7       	brne	.-4      	; 0x22c6 <main+0x2fe>
    22ca:	fe 01       	movw	r30, r28
    22cc:	e9 5b       	subi	r30, 0xB9	; 185
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24

	/*at first ,check if 0xff store in EEPROM ,so no password store in EEPROM
 and ask user to enter password for system */
	if(condition==0xff){/*no password store in EEPROM*/
		/*Recieve password from MC1 ,and store password in EEPROM*/
		for(count=0 ;count<PASSWORD_NUMBER;count++){
    22d4:	de 01       	movw	r26, r28
    22d6:	a8 5a       	subi	r26, 0xA8	; 168
    22d8:	bf 4f       	sbci	r27, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	e8 5a       	subi	r30, 0xA8	; 168
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	8c 93       	st	X, r24
    22e6:	fe 01       	movw	r30, r28
    22e8:	e8 5a       	subi	r30, 0xA8	; 168
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	80 81       	ld	r24, Z
    22ee:	85 30       	cpi	r24, 0x05	; 5
    22f0:	08 f4       	brcc	.+2      	; 0x22f4 <main+0x32c>
    22f2:	1a cf       	rjmp	.-460    	; 0x2128 <main+0x160>
	}

	while(1){

		/* Send MC2_READY byte to MC2 to ask it to send the Byte */
		UART_sendByte(MC1_READY);
    22f4:	80 e1       	ldi	r24, 0x10	; 16
    22f6:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
		/* Receive Byte from MC1 through UA*/
		option=UART_recieveByte();
    22fa:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    22fe:	fe 01       	movw	r30, r28
    2300:	e9 5a       	subi	r30, 0xA9	; 169
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 83       	st	Z, r24
		 */
		/*clear res_match as default ,
		 * when res_match = 1 ,the enter password from user is equal the password in EEPROM
		 * when res_match = 0 ,the enter password from user is not equal the password in EEPROM
		 */
		res_match=0;
    2306:	fe 01       	movw	r30, r28
    2308:	ea 5a       	subi	r30, 0xAA	; 170
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	10 82       	st	Z, r1
		if(option=='+'){/*open door*/
    230e:	fe 01       	movw	r30, r28
    2310:	e9 5a       	subi	r30, 0xA9	; 169
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	8b 32       	cpi	r24, 0x2B	; 43
    2318:	09 f0       	breq	.+2      	; 0x231c <main+0x354>
    231a:	ad c1       	rjmp	.+858    	; 0x2676 <main+0x6ae>
    231c:	9a c1       	rjmp	.+820    	; 0x2652 <main+0x68a>
			/*looping until enter correct password,only 3 time enter*/
			while(error<3&&res_match==0){
				/* Send MC2_READY byte to MC2 to ask it to send the Byte */
				UART_sendByte(MC1_READY);
    231e:	80 e1       	ldi	r24, 0x10	; 16
    2320:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
				/*recieve password from MC1*/
				for(count=0 ;count<PASSWORD_NUMBER;count++){
    2324:	fe 01       	movw	r30, r28
    2326:	e8 5a       	subi	r30, 0xA8	; 168
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	10 82       	st	Z, r1
    232c:	9a c0       	rjmp	.+308    	; 0x2462 <main+0x49a>
					/* Receive Byte from MC1 through UA*/
					/*store Byte first at array (pass_comp)*/
					pass_comp[count]=UART_recieveByte();
    232e:	fe 01       	movw	r30, r28
    2330:	e8 5a       	subi	r30, 0xA8	; 168
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 81       	ld	r24, Z
    2336:	08 2f       	mov	r16, r24
    2338:	10 e0       	ldi	r17, 0x00	; 0
    233a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    233e:	f8 01       	movw	r30, r16
    2340:	e9 57       	subi	r30, 0x79	; 121
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 83       	st	Z, r24
    2346:	fe 01       	movw	r30, r28
    2348:	ed 5b       	subi	r30, 0xBD	; 189
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e7       	ldi	r26, 0x70	; 112
    2352:	b2 e4       	ldi	r27, 0x42	; 66
    2354:	80 83       	st	Z, r24
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	a2 83       	std	Z+2, r26	; 0x02
    235a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	8e 01       	movw	r16, r28
    235e:	01 5c       	subi	r16, 0xC1	; 193
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	fe 01       	movw	r30, r28
    2364:	ed 5b       	subi	r30, 0xBD	; 189
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a ef       	ldi	r20, 0xFA	; 250
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	f8 01       	movw	r30, r16
    2382:	80 83       	st	Z, r24
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	a2 83       	std	Z+2, r26	; 0x02
    2388:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    238a:	fe 01       	movw	r30, r28
    238c:	ff 96       	adiw	r30, 0x3f	; 63
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	2c f4       	brge	.+10     	; 0x23b0 <main+0x3e8>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9e af       	std	Y+62, r25	; 0x3e
    23ac:	8d af       	std	Y+61, r24	; 0x3d
    23ae:	46 c0       	rjmp	.+140    	; 0x243c <main+0x474>
	else if (__tmp > 65535)
    23b0:	fe 01       	movw	r30, r28
    23b2:	ff 96       	adiw	r30, 0x3f	; 63
    23b4:	60 81       	ld	r22, Z
    23b6:	71 81       	ldd	r23, Z+1	; 0x01
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	64 f5       	brge	.+88     	; 0x2424 <main+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	fe 01       	movw	r30, r28
    23ce:	ed 5b       	subi	r30, 0xBD	; 189
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	9e af       	std	Y+62, r25	; 0x3e
    23f8:	8d af       	std	Y+61, r24	; 0x3d
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <main+0x452>
    23fc:	88 ec       	ldi	r24, 0xC8	; 200
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9c af       	std	Y+60, r25	; 0x3c
    2402:	8b af       	std	Y+59, r24	; 0x3b
    2404:	8b ad       	ldd	r24, Y+59	; 0x3b
    2406:	9c ad       	ldd	r25, Y+60	; 0x3c
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0x440>
    240c:	9c af       	std	Y+60, r25	; 0x3c
    240e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	8d ad       	ldd	r24, Y+61	; 0x3d
    2412:	9e ad       	ldd	r25, Y+62	; 0x3e
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	9e af       	std	Y+62, r25	; 0x3e
    2418:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	8d ad       	ldd	r24, Y+61	; 0x3d
    241c:	9e ad       	ldd	r25, Y+62	; 0x3e
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <main+0x434>
    2422:	16 c0       	rjmp	.+44     	; 0x2450 <main+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	fe 01       	movw	r30, r28
    2426:	ff 96       	adiw	r30, 0x3f	; 63
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9e af       	std	Y+62, r25	; 0x3e
    243a:	8d af       	std	Y+61, r24	; 0x3d
    243c:	8d ad       	ldd	r24, Y+61	; 0x3d
    243e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2440:	9a af       	std	Y+58, r25	; 0x3a
    2442:	89 af       	std	Y+57, r24	; 0x39
    2444:	89 ad       	ldd	r24, Y+57	; 0x39
    2446:	9a ad       	ldd	r25, Y+58	; 0x3a
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <main+0x480>
    244c:	9a af       	std	Y+58, r25	; 0x3a
    244e:	89 af       	std	Y+57, r24	; 0x39
			/*looping until enter correct password,only 3 time enter*/
			while(error<3&&res_match==0){
				/* Send MC2_READY byte to MC2 to ask it to send the Byte */
				UART_sendByte(MC1_READY);
				/*recieve password from MC1*/
				for(count=0 ;count<PASSWORD_NUMBER;count++){
    2450:	de 01       	movw	r26, r28
    2452:	a8 5a       	subi	r26, 0xA8	; 168
    2454:	bf 4f       	sbci	r27, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	e8 5a       	subi	r30, 0xA8	; 168
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	8c 93       	st	X, r24
    2462:	fe 01       	movw	r30, r28
    2464:	e8 5a       	subi	r30, 0xA8	; 168
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	85 30       	cpi	r24, 0x05	; 5
    246c:	08 f4       	brcc	.+2      	; 0x2470 <main+0x4a8>
    246e:	5f cf       	rjmp	.-322    	; 0x232e <main+0x366>
					/*store Byte first at array (pass_comp)*/
					pass_comp[count]=UART_recieveByte();
					_delay_ms(60);
				}
				/*read from EEPROM the store password ,and store it at array (pass)*/
				for(count=0;count<PASSWORD_NUMBER;count++){
    2470:	fe 01       	movw	r30, r28
    2472:	e8 5a       	subi	r30, 0xA8	; 168
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	10 82       	st	Z, r1
    2478:	8e c0       	rjmp	.+284    	; 0x2596 <main+0x5ce>
					/*Recieve password from EEPROM*/
					EEPROM_readByte(0x0000|count, &pass[count]);
    247a:	fe 01       	movw	r30, r28
    247c:	e8 5a       	subi	r30, 0xA8	; 168
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	48 2f       	mov	r20, r24
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	fe 01       	movw	r30, r28
    2488:	e8 5a       	subi	r30, 0xA8	; 168
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9c 01       	movw	r18, r24
    2494:	2e 57       	subi	r18, 0x7E	; 126
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	ca 01       	movw	r24, r20
    249a:	b9 01       	movw	r22, r18
    249c:	0e 94 f1 06 	call	0xde2	; 0xde2 <EEPROM_readByte>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	a0 e7       	ldi	r26, 0x70	; 112
    24a6:	b2 e4       	ldi	r27, 0x42	; 66
    24a8:	8d ab       	std	Y+53, r24	; 0x35
    24aa:	9e ab       	std	Y+54, r25	; 0x36
    24ac:	af ab       	std	Y+55, r26	; 0x37
    24ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b0:	6d a9       	ldd	r22, Y+53	; 0x35
    24b2:	7e a9       	ldd	r23, Y+54	; 0x36
    24b4:	8f a9       	ldd	r24, Y+55	; 0x37
    24b6:	98 ad       	ldd	r25, Y+56	; 0x38
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	4a ef       	ldi	r20, 0xFA	; 250
    24be:	54 e4       	ldi	r21, 0x44	; 68
    24c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	89 ab       	std	Y+49, r24	; 0x31
    24ca:	9a ab       	std	Y+50, r25	; 0x32
    24cc:	ab ab       	std	Y+51, r26	; 0x33
    24ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d0:	69 a9       	ldd	r22, Y+49	; 0x31
    24d2:	7a a9       	ldd	r23, Y+50	; 0x32
    24d4:	8b a9       	ldd	r24, Y+51	; 0x33
    24d6:	9c a9       	ldd	r25, Y+52	; 0x34
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e8       	ldi	r20, 0x80	; 128
    24de:	5f e3       	ldi	r21, 0x3F	; 63
    24e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e4:	88 23       	and	r24, r24
    24e6:	2c f4       	brge	.+10     	; 0x24f2 <main+0x52a>
		__ticks = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	98 ab       	std	Y+48, r25	; 0x30
    24ee:	8f a7       	std	Y+47, r24	; 0x2f
    24f0:	3f c0       	rjmp	.+126    	; 0x2570 <main+0x5a8>
	else if (__tmp > 65535)
    24f2:	69 a9       	ldd	r22, Y+49	; 0x31
    24f4:	7a a9       	ldd	r23, Y+50	; 0x32
    24f6:	8b a9       	ldd	r24, Y+51	; 0x33
    24f8:	9c a9       	ldd	r25, Y+52	; 0x34
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	4f e7       	ldi	r20, 0x7F	; 127
    2500:	57 e4       	ldi	r21, 0x47	; 71
    2502:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2506:	18 16       	cp	r1, r24
    2508:	4c f5       	brge	.+82     	; 0x255c <main+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250a:	6d a9       	ldd	r22, Y+53	; 0x35
    250c:	7e a9       	ldd	r23, Y+54	; 0x36
    250e:	8f a9       	ldd	r24, Y+55	; 0x37
    2510:	98 ad       	ldd	r25, Y+56	; 0x38
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e2       	ldi	r20, 0x20	; 32
    2518:	51 e4       	ldi	r21, 0x41	; 65
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	bc 01       	movw	r22, r24
    2524:	cd 01       	movw	r24, r26
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	98 ab       	std	Y+48, r25	; 0x30
    2530:	8f a7       	std	Y+47, r24	; 0x2f
    2532:	0f c0       	rjmp	.+30     	; 0x2552 <main+0x58a>
    2534:	88 ec       	ldi	r24, 0xC8	; 200
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9e a7       	std	Y+46, r25	; 0x2e
    253a:	8d a7       	std	Y+45, r24	; 0x2d
    253c:	8d a5       	ldd	r24, Y+45	; 0x2d
    253e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <main+0x578>
    2544:	9e a7       	std	Y+46, r25	; 0x2e
    2546:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2548:	8f a5       	ldd	r24, Y+47	; 0x2f
    254a:	98 a9       	ldd	r25, Y+48	; 0x30
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	98 ab       	std	Y+48, r25	; 0x30
    2550:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2552:	8f a5       	ldd	r24, Y+47	; 0x2f
    2554:	98 a9       	ldd	r25, Y+48	; 0x30
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	69 f7       	brne	.-38     	; 0x2534 <main+0x56c>
    255a:	14 c0       	rjmp	.+40     	; 0x2584 <main+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255c:	69 a9       	ldd	r22, Y+49	; 0x31
    255e:	7a a9       	ldd	r23, Y+50	; 0x32
    2560:	8b a9       	ldd	r24, Y+51	; 0x33
    2562:	9c a9       	ldd	r25, Y+52	; 0x34
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	98 ab       	std	Y+48, r25	; 0x30
    256e:	8f a7       	std	Y+47, r24	; 0x2f
    2570:	8f a5       	ldd	r24, Y+47	; 0x2f
    2572:	98 a9       	ldd	r25, Y+48	; 0x30
    2574:	9c a7       	std	Y+44, r25	; 0x2c
    2576:	8b a7       	std	Y+43, r24	; 0x2b
    2578:	8b a5       	ldd	r24, Y+43	; 0x2b
    257a:	9c a5       	ldd	r25, Y+44	; 0x2c
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	f1 f7       	brne	.-4      	; 0x257c <main+0x5b4>
    2580:	9c a7       	std	Y+44, r25	; 0x2c
    2582:	8b a7       	std	Y+43, r24	; 0x2b
					/*store Byte first at array (pass_comp)*/
					pass_comp[count]=UART_recieveByte();
					_delay_ms(60);
				}
				/*read from EEPROM the store password ,and store it at array (pass)*/
				for(count=0;count<PASSWORD_NUMBER;count++){
    2584:	de 01       	movw	r26, r28
    2586:	a8 5a       	subi	r26, 0xA8	; 168
    2588:	bf 4f       	sbci	r27, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	e8 5a       	subi	r30, 0xA8	; 168
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 81       	ld	r24, Z
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	8c 93       	st	X, r24
    2596:	fe 01       	movw	r30, r28
    2598:	e8 5a       	subi	r30, 0xA8	; 168
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	85 30       	cpi	r24, 0x05	; 5
    25a0:	08 f4       	brcc	.+2      	; 0x25a4 <main+0x5dc>
    25a2:	6b cf       	rjmp	.-298    	; 0x247a <main+0x4b2>
				}
				/*compare two password and send result to MC1
				 * if res_match =0 the two password not equal
				 * if res_match =1 the two password equal
				 */
				res_match=chech_match_password(pass,pass_comp);
    25a4:	82 e8       	ldi	r24, 0x82	; 130
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	27 e8       	ldi	r18, 0x87	; 135
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	b9 01       	movw	r22, r18
    25ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <chech_match_password>
    25b2:	fe 01       	movw	r30, r28
    25b4:	ea 5a       	subi	r30, 0xAA	; 170
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 83       	st	Z, r24
				/* Wait until MC2 is ready to receive the Byte */
				while(UART_recieveByte() != MC1_READY){}
    25ba:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    25be:	80 31       	cpi	r24, 0x10	; 16
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <main+0x5f2>
				/* Send the required Byte to MC2 through UART */
				UART_sendByte(res_match);
    25c2:	fe 01       	movw	r30, r28
    25c4:	ea 5a       	subi	r30, 0xAA	; 170
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
				if(res_match==0){/*if  password in correct*/
    25ce:	fe 01       	movw	r30, r28
    25d0:	ea 5a       	subi	r30, 0xAA	; 170
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	88 23       	and	r24, r24
    25d8:	31 f5       	brne	.+76     	; 0x2626 <main+0x65e>
					error++;
    25da:	de 01       	movw	r26, r28
    25dc:	ab 5a       	subi	r26, 0xAB	; 171
    25de:	bf 4f       	sbci	r27, 0xFF	; 255
    25e0:	fe 01       	movw	r30, r28
    25e2:	eb 5a       	subi	r30, 0xAB	; 171
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	8f 5f       	subi	r24, 0xFF	; 255
    25ea:	8c 93       	st	X, r24
					if(error<3){
    25ec:	fe 01       	movw	r30, r28
    25ee:	eb 5a       	subi	r30, 0xAB	; 171
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 81       	ld	r24, Z
    25f4:	83 30       	cpi	r24, 0x03	; 3
    25f6:	68 f1       	brcs	.+90     	; 0x2652 <main+0x68a>
						/*Do Nothing*/
					}else if(error==3){
    25f8:	fe 01       	movw	r30, r28
    25fa:	eb 5a       	subi	r30, 0xAB	; 171
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	83 30       	cpi	r24, 0x03	; 3
    2602:	39 f5       	brne	.+78     	; 0x2652 <main+0x68a>
						/* Set the Call back function pointer in the timer0 driver */
						Timer_setCallBack(&BUZZER_turnOn,Timer_1);
    2604:	82 e1       	ldi	r24, 0x12	; 18
    2606:	96 e0       	ldi	r25, 0x06	; 6
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <Timer_setCallBack>
						/* Initialize the timer0 Driver */
						Timer_intit(&config_time);
    260e:	ce 01       	movw	r24, r28
    2610:	86 5a       	subi	r24, 0xA6	; 166
    2612:	9f 4f       	sbci	r25, 0xFF	; 255
    2614:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <Timer_intit>
						/*holed system until finish call back function*/
						while(holed_system==0){}
    2618:	80 91 7b 00 	lds	r24, 0x007B
    261c:	88 23       	and	r24, r24
    261e:	e1 f3       	breq	.-8      	; 0x2618 <main+0x650>
						/*clear holed_system for using again*/
						holed_system=0;
    2620:	10 92 7b 00 	sts	0x007B, r1
    2624:	16 c0       	rjmp	.+44     	; 0x2652 <main+0x68a>
					}

				}else if(res_match==1){/*password correct*/
    2626:	fe 01       	movw	r30, r28
    2628:	ea 5a       	subi	r30, 0xAA	; 170
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 81       	ld	r24, Z
    262e:	81 30       	cpi	r24, 0x01	; 1
    2630:	81 f4       	brne	.+32     	; 0x2652 <main+0x68a>

					/* Set the Call back function pointer in the timer0 driver */
					Timer_setCallBack(&open_door,Timer_1);
    2632:	87 ed       	ldi	r24, 0xD7	; 215
    2634:	95 e0       	ldi	r25, 0x05	; 5
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <Timer_setCallBack>
					/* Initialize the timer0 Driver */
					Timer_intit(&config_time);
    263c:	ce 01       	movw	r24, r28
    263e:	86 5a       	subi	r24, 0xA6	; 166
    2640:	9f 4f       	sbci	r25, 0xFF	; 255
    2642:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <Timer_intit>
					/*holed system until finish call back function*/
					while(holed_system==0){}
    2646:	80 91 7b 00 	lds	r24, 0x007B
    264a:	88 23       	and	r24, r24
    264c:	e1 f3       	breq	.-8      	; 0x2646 <main+0x67e>
					/*clear holed_system for using again*/
					holed_system=0;
    264e:	10 92 7b 00 	sts	0x007B, r1
		 * when res_match = 0 ,the enter password from user is not equal the password in EEPROM
		 */
		res_match=0;
		if(option=='+'){/*open door*/
			/*looping until enter correct password,only 3 time enter*/
			while(error<3&&res_match==0){
    2652:	fe 01       	movw	r30, r28
    2654:	eb 5a       	subi	r30, 0xAB	; 171
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	80 81       	ld	r24, Z
    265a:	83 30       	cpi	r24, 0x03	; 3
    265c:	38 f4       	brcc	.+14     	; 0x266c <main+0x6a4>
    265e:	fe 01       	movw	r30, r28
    2660:	ea 5a       	subi	r30, 0xAA	; 170
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	80 81       	ld	r24, Z
    2666:	88 23       	and	r24, r24
    2668:	09 f4       	brne	.+2      	; 0x266c <main+0x6a4>
    266a:	59 ce       	rjmp	.-846    	; 0x231e <main+0x356>
					while(holed_system==0){}
					/*clear holed_system for using again*/
					holed_system=0;
				}
			}
			error=0;
    266c:	fe 01       	movw	r30, r28
    266e:	eb 5a       	subi	r30, 0xAB	; 171
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	10 82       	st	Z, r1
    2674:	3f ce       	rjmp	.-898    	; 0x22f4 <main+0x32c>
		}
		else if(option=='-'){/*change password*/
    2676:	fe 01       	movw	r30, r28
    2678:	e9 5a       	subi	r30, 0xA9	; 169
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	8d 32       	cpi	r24, 0x2D	; 45
    2680:	09 f0       	breq	.+2      	; 0x2684 <main+0x6bc>
    2682:	38 ce       	rjmp	.-912    	; 0x22f4 <main+0x32c>
    2684:	24 c2       	rjmp	.+1096   	; 0x2ace <main+0xb06>
			/*looping until enter correct password,only 3 time enter*/
			while(error<3&&res_match==0){
				/* Send MC2_READY byte to MC2 to ask it to send the Byte */
				UART_sendByte(MC1_READY);
    2686:	80 e1       	ldi	r24, 0x10	; 16
    2688:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
				/*Recieve password from MC1*/
				for(count=0 ;count<PASSWORD_NUMBER;count++){
    268c:	fe 01       	movw	r30, r28
    268e:	e8 5a       	subi	r30, 0xA8	; 168
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	10 82       	st	Z, r1
    2694:	87 c0       	rjmp	.+270    	; 0x27a4 <main+0x7dc>
					/* Receive Byte from MC1 through UA*/
					/*store Byte first at array (pass_comp)*/
					pass_comp[count]=UART_recieveByte();
    2696:	fe 01       	movw	r30, r28
    2698:	e8 5a       	subi	r30, 0xA8	; 168
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	08 2f       	mov	r16, r24
    26a0:	10 e0       	ldi	r17, 0x00	; 0
    26a2:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    26a6:	f8 01       	movw	r30, r16
    26a8:	e9 57       	subi	r30, 0x79	; 121
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 83       	st	Z, r24
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e7       	ldi	r26, 0x70	; 112
    26b4:	b2 e4       	ldi	r27, 0x42	; 66
    26b6:	8f a3       	std	Y+39, r24	; 0x27
    26b8:	98 a7       	std	Y+40, r25	; 0x28
    26ba:	a9 a7       	std	Y+41, r26	; 0x29
    26bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	6f a1       	ldd	r22, Y+39	; 0x27
    26c0:	78 a5       	ldd	r23, Y+40	; 0x28
    26c2:	89 a5       	ldd	r24, Y+41	; 0x29
    26c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	4a ef       	ldi	r20, 0xFA	; 250
    26cc:	54 e4       	ldi	r21, 0x44	; 68
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8b a3       	std	Y+35, r24	; 0x23
    26d8:	9c a3       	std	Y+36, r25	; 0x24
    26da:	ad a3       	std	Y+37, r26	; 0x25
    26dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26de:	6b a1       	ldd	r22, Y+35	; 0x23
    26e0:	7c a1       	ldd	r23, Y+36	; 0x24
    26e2:	8d a1       	ldd	r24, Y+37	; 0x25
    26e4:	9e a1       	ldd	r25, Y+38	; 0x26
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e8       	ldi	r20, 0x80	; 128
    26ec:	5f e3       	ldi	r21, 0x3F	; 63
    26ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f2:	88 23       	and	r24, r24
    26f4:	2c f4       	brge	.+10     	; 0x2700 <main+0x738>
		__ticks = 1;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9a a3       	std	Y+34, r25	; 0x22
    26fc:	89 a3       	std	Y+33, r24	; 0x21
    26fe:	3f c0       	rjmp	.+126    	; 0x277e <main+0x7b6>
	else if (__tmp > 65535)
    2700:	6b a1       	ldd	r22, Y+35	; 0x23
    2702:	7c a1       	ldd	r23, Y+36	; 0x24
    2704:	8d a1       	ldd	r24, Y+37	; 0x25
    2706:	9e a1       	ldd	r25, Y+38	; 0x26
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	3f ef       	ldi	r19, 0xFF	; 255
    270c:	4f e7       	ldi	r20, 0x7F	; 127
    270e:	57 e4       	ldi	r21, 0x47	; 71
    2710:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2714:	18 16       	cp	r1, r24
    2716:	4c f5       	brge	.+82     	; 0x276a <main+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	6f a1       	ldd	r22, Y+39	; 0x27
    271a:	78 a5       	ldd	r23, Y+40	; 0x28
    271c:	89 a5       	ldd	r24, Y+41	; 0x29
    271e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e2       	ldi	r20, 0x20	; 32
    2726:	51 e4       	ldi	r21, 0x41	; 65
    2728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9a a3       	std	Y+34, r25	; 0x22
    273e:	89 a3       	std	Y+33, r24	; 0x21
    2740:	0f c0       	rjmp	.+30     	; 0x2760 <main+0x798>
    2742:	88 ec       	ldi	r24, 0xC8	; 200
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	98 a3       	std	Y+32, r25	; 0x20
    2748:	8f 8f       	std	Y+31, r24	; 0x1f
    274a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    274c:	98 a1       	ldd	r25, Y+32	; 0x20
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <main+0x786>
    2752:	98 a3       	std	Y+32, r25	; 0x20
    2754:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2756:	89 a1       	ldd	r24, Y+33	; 0x21
    2758:	9a a1       	ldd	r25, Y+34	; 0x22
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	9a a3       	std	Y+34, r25	; 0x22
    275e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2760:	89 a1       	ldd	r24, Y+33	; 0x21
    2762:	9a a1       	ldd	r25, Y+34	; 0x22
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	69 f7       	brne	.-38     	; 0x2742 <main+0x77a>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <main+0x7ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276a:	6b a1       	ldd	r22, Y+35	; 0x23
    276c:	7c a1       	ldd	r23, Y+36	; 0x24
    276e:	8d a1       	ldd	r24, Y+37	; 0x25
    2770:	9e a1       	ldd	r25, Y+38	; 0x26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9a a3       	std	Y+34, r25	; 0x22
    277c:	89 a3       	std	Y+33, r24	; 0x21
    277e:	89 a1       	ldd	r24, Y+33	; 0x21
    2780:	9a a1       	ldd	r25, Y+34	; 0x22
    2782:	9e 8f       	std	Y+30, r25	; 0x1e
    2784:	8d 8f       	std	Y+29, r24	; 0x1d
    2786:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2788:	9e 8d       	ldd	r25, Y+30	; 0x1e
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <main+0x7c2>
    278e:	9e 8f       	std	Y+30, r25	; 0x1e
    2790:	8d 8f       	std	Y+29, r24	; 0x1d
			/*looping until enter correct password,only 3 time enter*/
			while(error<3&&res_match==0){
				/* Send MC2_READY byte to MC2 to ask it to send the Byte */
				UART_sendByte(MC1_READY);
				/*Recieve password from MC1*/
				for(count=0 ;count<PASSWORD_NUMBER;count++){
    2792:	de 01       	movw	r26, r28
    2794:	a8 5a       	subi	r26, 0xA8	; 168
    2796:	bf 4f       	sbci	r27, 0xFF	; 255
    2798:	fe 01       	movw	r30, r28
    279a:	e8 5a       	subi	r30, 0xA8	; 168
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 81       	ld	r24, Z
    27a0:	8f 5f       	subi	r24, 0xFF	; 255
    27a2:	8c 93       	st	X, r24
    27a4:	fe 01       	movw	r30, r28
    27a6:	e8 5a       	subi	r30, 0xA8	; 168
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	85 30       	cpi	r24, 0x05	; 5
    27ae:	08 f4       	brcc	.+2      	; 0x27b2 <main+0x7ea>
    27b0:	72 cf       	rjmp	.-284    	; 0x2696 <main+0x6ce>
					/*store Byte first at array (pass_comp)*/
					pass_comp[count]=UART_recieveByte();
					_delay_ms(60);
				}
				/*read from EEPROM the store password ,and store it at array (pass)*/
				for(count=0;count<PASSWORD_NUMBER;count++){
    27b2:	fe 01       	movw	r30, r28
    27b4:	e8 5a       	subi	r30, 0xA8	; 168
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	10 82       	st	Z, r1
    27ba:	8e c0       	rjmp	.+284    	; 0x28d8 <main+0x910>
					/*Recieve password from EEPROM*/
					EEPROM_readByte(0x0000|count, &pass[count]);
    27bc:	fe 01       	movw	r30, r28
    27be:	e8 5a       	subi	r30, 0xA8	; 168
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	48 2f       	mov	r20, r24
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	fe 01       	movw	r30, r28
    27ca:	e8 5a       	subi	r30, 0xA8	; 168
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 01       	movw	r18, r24
    27d6:	2e 57       	subi	r18, 0x7E	; 126
    27d8:	3f 4f       	sbci	r19, 0xFF	; 255
    27da:	ca 01       	movw	r24, r20
    27dc:	b9 01       	movw	r22, r18
    27de:	0e 94 f1 06 	call	0xde2	; 0xde2 <EEPROM_readByte>
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a0 e7       	ldi	r26, 0x70	; 112
    27e8:	b2 e4       	ldi	r27, 0x42	; 66
    27ea:	89 8f       	std	Y+25, r24	; 0x19
    27ec:	9a 8f       	std	Y+26, r25	; 0x1a
    27ee:	ab 8f       	std	Y+27, r26	; 0x1b
    27f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	69 8d       	ldd	r22, Y+25	; 0x19
    27f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a ef       	ldi	r20, 0xFA	; 250
    2800:	54 e4       	ldi	r21, 0x44	; 68
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	8d 8b       	std	Y+21, r24	; 0x15
    280c:	9e 8b       	std	Y+22, r25	; 0x16
    280e:	af 8b       	std	Y+23, r26	; 0x17
    2810:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2812:	6d 89       	ldd	r22, Y+21	; 0x15
    2814:	7e 89       	ldd	r23, Y+22	; 0x16
    2816:	8f 89       	ldd	r24, Y+23	; 0x17
    2818:	98 8d       	ldd	r25, Y+24	; 0x18
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	2c f4       	brge	.+10     	; 0x2834 <main+0x86c>
		__ticks = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9c 8b       	std	Y+20, r25	; 0x14
    2830:	8b 8b       	std	Y+19, r24	; 0x13
    2832:	3f c0       	rjmp	.+126    	; 0x28b2 <main+0x8ea>
	else if (__tmp > 65535)
    2834:	6d 89       	ldd	r22, Y+21	; 0x15
    2836:	7e 89       	ldd	r23, Y+22	; 0x16
    2838:	8f 89       	ldd	r24, Y+23	; 0x17
    283a:	98 8d       	ldd	r25, Y+24	; 0x18
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	4c f5       	brge	.+82     	; 0x289e <main+0x8d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284c:	69 8d       	ldd	r22, Y+25	; 0x19
    284e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9c 8b       	std	Y+20, r25	; 0x14
    2872:	8b 8b       	std	Y+19, r24	; 0x13
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <main+0x8cc>
    2876:	88 ec       	ldi	r24, 0xC8	; 200
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	9a 8b       	std	Y+18, r25	; 0x12
    287c:	89 8b       	std	Y+17, r24	; 0x11
    287e:	89 89       	ldd	r24, Y+17	; 0x11
    2880:	9a 89       	ldd	r25, Y+18	; 0x12
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <main+0x8ba>
    2886:	9a 8b       	std	Y+18, r25	; 0x12
    2888:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	8b 89       	ldd	r24, Y+19	; 0x13
    288c:	9c 89       	ldd	r25, Y+20	; 0x14
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	9c 8b       	std	Y+20, r25	; 0x14
    2892:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2894:	8b 89       	ldd	r24, Y+19	; 0x13
    2896:	9c 89       	ldd	r25, Y+20	; 0x14
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	69 f7       	brne	.-38     	; 0x2876 <main+0x8ae>
    289c:	14 c0       	rjmp	.+40     	; 0x28c6 <main+0x8fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289e:	6d 89       	ldd	r22, Y+21	; 0x15
    28a0:	7e 89       	ldd	r23, Y+22	; 0x16
    28a2:	8f 89       	ldd	r24, Y+23	; 0x17
    28a4:	98 8d       	ldd	r25, Y+24	; 0x18
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	98 8b       	std	Y+16, r25	; 0x10
    28b8:	8f 87       	std	Y+15, r24	; 0x0f
    28ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    28bc:	98 89       	ldd	r25, Y+16	; 0x10
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <main+0x8f6>
    28c2:	98 8b       	std	Y+16, r25	; 0x10
    28c4:	8f 87       	std	Y+15, r24	; 0x0f
					/*store Byte first at array (pass_comp)*/
					pass_comp[count]=UART_recieveByte();
					_delay_ms(60);
				}
				/*read from EEPROM the store password ,and store it at array (pass)*/
				for(count=0;count<PASSWORD_NUMBER;count++){
    28c6:	de 01       	movw	r26, r28
    28c8:	a8 5a       	subi	r26, 0xA8	; 168
    28ca:	bf 4f       	sbci	r27, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e8 5a       	subi	r30, 0xA8	; 168
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	8c 93       	st	X, r24
    28d8:	fe 01       	movw	r30, r28
    28da:	e8 5a       	subi	r30, 0xA8	; 168
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	85 30       	cpi	r24, 0x05	; 5
    28e2:	08 f4       	brcc	.+2      	; 0x28e6 <main+0x91e>
    28e4:	6b cf       	rjmp	.-298    	; 0x27bc <main+0x7f4>
				}
				/*compare two password and send result to MC1
				 * if res_match =0 the two password not equal
				 * if res_match =1 the two password equal
				 */
				res_match=chech_match_password(pass,pass_comp);
    28e6:	82 e8       	ldi	r24, 0x82	; 130
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	27 e8       	ldi	r18, 0x87	; 135
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	b9 01       	movw	r22, r18
    28f0:	0e 94 a3 05 	call	0xb46	; 0xb46 <chech_match_password>
    28f4:	fe 01       	movw	r30, r28
    28f6:	ea 5a       	subi	r30, 0xAA	; 170
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 83       	st	Z, r24
				/* Wait until MC2 is ready to receive the Byte */
				while(UART_recieveByte() != MC1_READY){}
    28fc:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    2900:	80 31       	cpi	r24, 0x10	; 16
    2902:	e1 f7       	brne	.-8      	; 0x28fc <main+0x934>
				/* Send the required Byte to MC2 through UART */
				UART_sendByte(res_match);
    2904:	fe 01       	movw	r30, r28
    2906:	ea 5a       	subi	r30, 0xAA	; 170
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 81       	ld	r24, Z
    290c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
				if(res_match==0){/*if  password in correct*/
    2910:	fe 01       	movw	r30, r28
    2912:	ea 5a       	subi	r30, 0xAA	; 170
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	88 23       	and	r24, r24
    291a:	41 f5       	brne	.+80     	; 0x296c <main+0x9a4>
					error++;
    291c:	de 01       	movw	r26, r28
    291e:	ab 5a       	subi	r26, 0xAB	; 171
    2920:	bf 4f       	sbci	r27, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	eb 5a       	subi	r30, 0xAB	; 171
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	80 81       	ld	r24, Z
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	8c 93       	st	X, r24
					if(error<3){
    292e:	fe 01       	movw	r30, r28
    2930:	eb 5a       	subi	r30, 0xAB	; 171
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 81       	ld	r24, Z
    2936:	83 30       	cpi	r24, 0x03	; 3
    2938:	08 f4       	brcc	.+2      	; 0x293c <main+0x974>
    293a:	c9 c0       	rjmp	.+402    	; 0x2ace <main+0xb06>
						/*Do Nothing*/

					}else if(error==3){
    293c:	fe 01       	movw	r30, r28
    293e:	eb 5a       	subi	r30, 0xAB	; 171
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 81       	ld	r24, Z
    2944:	83 30       	cpi	r24, 0x03	; 3
    2946:	09 f0       	breq	.+2      	; 0x294a <main+0x982>
    2948:	c2 c0       	rjmp	.+388    	; 0x2ace <main+0xb06>
						/* Set the Call back function pointer in the timer1 driver */
						Timer_setCallBack(&BUZZER_turnOn,Timer_1);
    294a:	82 e1       	ldi	r24, 0x12	; 18
    294c:	96 e0       	ldi	r25, 0x06	; 6
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <Timer_setCallBack>
						/* Initialize the timer1 Driver */
						Timer_intit(&config_time);
    2954:	ce 01       	movw	r24, r28
    2956:	86 5a       	subi	r24, 0xA6	; 166
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <Timer_intit>
						/*holed system until finish call back function*/
						while(holed_system==0){}
    295e:	80 91 7b 00 	lds	r24, 0x007B
    2962:	88 23       	and	r24, r24
    2964:	e1 f3       	breq	.-8      	; 0x295e <main+0x996>
						/*clear holed_system for using again*/
						holed_system=0;
    2966:	10 92 7b 00 	sts	0x007B, r1
    296a:	b1 c0       	rjmp	.+354    	; 0x2ace <main+0xb06>

					}

				}else if(res_match==1){/*password correct*/
    296c:	fe 01       	movw	r30, r28
    296e:	ea 5a       	subi	r30, 0xAA	; 170
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	09 f0       	breq	.+2      	; 0x297a <main+0x9b2>
    2978:	aa c0       	rjmp	.+340    	; 0x2ace <main+0xb06>
					/*Receive password from MC1 ,and store password in EEPROM*/
					for(count=0 ;count<PASSWORD_NUMBER;count++){
    297a:	fe 01       	movw	r30, r28
    297c:	e8 5a       	subi	r30, 0xA8	; 168
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	10 82       	st	Z, r1
    2982:	9e c0       	rjmp	.+316    	; 0x2ac0 <main+0xaf8>
						/* Send MC2_READY byte to MC2 to ask it to send the Byte */
						UART_sendByte(MC1_READY);
    2984:	80 e1       	ldi	r24, 0x10	; 16
    2986:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
						/* Receive Byte from MC1 through UART*/
						pass[count]=UART_recieveByte();
    298a:	fe 01       	movw	r30, r28
    298c:	e8 5a       	subi	r30, 0xA8	; 168
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 81       	ld	r24, Z
    2992:	08 2f       	mov	r16, r24
    2994:	10 e0       	ldi	r17, 0x00	; 0
    2996:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    299a:	f8 01       	movw	r30, r16
    299c:	ee 57       	subi	r30, 0x7E	; 126
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	80 83       	st	Z, r24
						/*store Byte Byte in EEPROM*/
						EEPROM_writeByte(0x0000|count, pass[count]);
    29a2:	fe 01       	movw	r30, r28
    29a4:	e8 5a       	subi	r30, 0xA8	; 168
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	48 2f       	mov	r20, r24
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	fe 01       	movw	r30, r28
    29b0:	e8 5a       	subi	r30, 0xA8	; 168
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	88 2f       	mov	r24, r24
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	fc 01       	movw	r30, r24
    29bc:	ee 57       	subi	r30, 0x7E	; 126
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	20 81       	ld	r18, Z
    29c2:	ca 01       	movw	r24, r20
    29c4:	62 2f       	mov	r22, r18
    29c6:	0e 94 b0 06 	call	0xd60	; 0xd60 <EEPROM_writeByte>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	a0 e7       	ldi	r26, 0x70	; 112
    29d0:	b2 e4       	ldi	r27, 0x42	; 66
    29d2:	8b 87       	std	Y+11, r24	; 0x0b
    29d4:	9c 87       	std	Y+12, r25	; 0x0c
    29d6:	ad 87       	std	Y+13, r26	; 0x0d
    29d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29da:	6b 85       	ldd	r22, Y+11	; 0x0b
    29dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	4a ef       	ldi	r20, 0xFA	; 250
    29e8:	54 e4       	ldi	r21, 0x44	; 68
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	8f 83       	std	Y+7, r24	; 0x07
    29f4:	98 87       	std	Y+8, r25	; 0x08
    29f6:	a9 87       	std	Y+9, r26	; 0x09
    29f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	5f e3       	ldi	r21, 0x3F	; 63
    2a0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0e:	88 23       	and	r24, r24
    2a10:	2c f4       	brge	.+10     	; 0x2a1c <main+0xa54>
		__ticks = 1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9e 83       	std	Y+6, r25	; 0x06
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    2a1a:	3f c0       	rjmp	.+126    	; 0x2a9a <main+0xad2>
	else if (__tmp > 65535)
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	3f ef       	ldi	r19, 0xFF	; 255
    2a28:	4f e7       	ldi	r20, 0x7F	; 127
    2a2a:	57 e4       	ldi	r21, 0x47	; 71
    2a2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a30:	18 16       	cp	r1, r24
    2a32:	4c f5       	brge	.+82     	; 0x2a86 <main+0xabe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e2       	ldi	r20, 0x20	; 32
    2a42:	51 e4       	ldi	r21, 0x41	; 65
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <main+0xab4>
    2a5e:	88 ec       	ldi	r24, 0xC8	; 200
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	9c 83       	std	Y+4, r25	; 0x04
    2a64:	8b 83       	std	Y+3, r24	; 0x03
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <main+0xaa2>
    2a6e:	9c 83       	std	Y+4, r25	; 0x04
    2a70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	69 f7       	brne	.-38     	; 0x2a5e <main+0xa96>
    2a84:	14 c0       	rjmp	.+40     	; 0x2aae <main+0xae6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9e 83       	std	Y+6, r25	; 0x06
    2a98:	8d 83       	std	Y+5, r24	; 0x05
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <main+0xade>
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01

					}

				}else if(res_match==1){/*password correct*/
					/*Receive password from MC1 ,and store password in EEPROM*/
					for(count=0 ;count<PASSWORD_NUMBER;count++){
    2aae:	de 01       	movw	r26, r28
    2ab0:	a8 5a       	subi	r26, 0xA8	; 168
    2ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e8 5a       	subi	r30, 0xA8	; 168
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	8c 93       	st	X, r24
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e8 5a       	subi	r30, 0xA8	; 168
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	85 30       	cpi	r24, 0x05	; 5
    2aca:	08 f4       	brcc	.+2      	; 0x2ace <main+0xb06>
    2acc:	5b cf       	rjmp	.-330    	; 0x2984 <main+0x9bc>
			}
			error=0;
		}
		else if(option=='-'){/*change password*/
			/*looping until enter correct password,only 3 time enter*/
			while(error<3&&res_match==0){
    2ace:	fe 01       	movw	r30, r28
    2ad0:	eb 5a       	subi	r30, 0xAB	; 171
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	83 30       	cpi	r24, 0x03	; 3
    2ad8:	38 f4       	brcc	.+14     	; 0x2ae8 <main+0xb20>
    2ada:	fe 01       	movw	r30, r28
    2adc:	ea 5a       	subi	r30, 0xAA	; 170
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	88 23       	and	r24, r24
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <main+0xb20>
    2ae6:	cf cd       	rjmp	.-1122   	; 0x2686 <main+0x6be>
						_delay_ms(60);
					}
				}

			}
			error=0;
    2ae8:	fe 01       	movw	r30, r28
    2aea:	eb 5a       	subi	r30, 0xAB	; 171
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	10 82       	st	Z, r1
    2af0:	01 cc       	rjmp	.-2046   	; 0x22f4 <main+0x32c>

00002af2 <__vector_9>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    2af2:	1f 92       	push	r1
    2af4:	0f 92       	push	r0
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	0f 92       	push	r0
    2afa:	11 24       	eor	r1, r1
    2afc:	2f 93       	push	r18
    2afe:	3f 93       	push	r19
    2b00:	4f 93       	push	r20
    2b02:	5f 93       	push	r21
    2b04:	6f 93       	push	r22
    2b06:	7f 93       	push	r23
    2b08:	8f 93       	push	r24
    2b0a:	9f 93       	push	r25
    2b0c:	af 93       	push	r26
    2b0e:	bf 93       	push	r27
    2b10:	ef 93       	push	r30
    2b12:	ff 93       	push	r31
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer0 != NULL_PTR)
    2b1c:	80 91 7c 00 	lds	r24, 0x007C
    2b20:	90 91 7d 00 	lds	r25, 0x007D
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	29 f0       	breq	.+10     	; 0x2b32 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b28:	e0 91 7c 00 	lds	r30, 0x007C
    2b2c:	f0 91 7d 00 	lds	r31, 0x007D
    2b30:	09 95       	icall
	}

}
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	ff 91       	pop	r31
    2b38:	ef 91       	pop	r30
    2b3a:	bf 91       	pop	r27
    2b3c:	af 91       	pop	r26
    2b3e:	9f 91       	pop	r25
    2b40:	8f 91       	pop	r24
    2b42:	7f 91       	pop	r23
    2b44:	6f 91       	pop	r22
    2b46:	5f 91       	pop	r21
    2b48:	4f 91       	pop	r20
    2b4a:	3f 91       	pop	r19
    2b4c:	2f 91       	pop	r18
    2b4e:	0f 90       	pop	r0
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	0f 90       	pop	r0
    2b54:	1f 90       	pop	r1
    2b56:	18 95       	reti

00002b58 <__vector_19>:

ISR(TIMER0_COMP_vect){
    2b58:	1f 92       	push	r1
    2b5a:	0f 92       	push	r0
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	0f 92       	push	r0
    2b60:	11 24       	eor	r1, r1
    2b62:	2f 93       	push	r18
    2b64:	3f 93       	push	r19
    2b66:	4f 93       	push	r20
    2b68:	5f 93       	push	r21
    2b6a:	6f 93       	push	r22
    2b6c:	7f 93       	push	r23
    2b6e:	8f 93       	push	r24
    2b70:	9f 93       	push	r25
    2b72:	af 93       	push	r26
    2b74:	bf 93       	push	r27
    2b76:	ef 93       	push	r30
    2b78:	ff 93       	push	r31
    2b7a:	df 93       	push	r29
    2b7c:	cf 93       	push	r28
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer0 != NULL_PTR)
    2b82:	80 91 7c 00 	lds	r24, 0x007C
    2b86:	90 91 7d 00 	lds	r25, 0x007D
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	29 f0       	breq	.+10     	; 0x2b98 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2b8e:	e0 91 7c 00 	lds	r30, 0x007C
    2b92:	f0 91 7d 00 	lds	r31, 0x007D
    2b96:	09 95       	icall
	}

}
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	ff 91       	pop	r31
    2b9e:	ef 91       	pop	r30
    2ba0:	bf 91       	pop	r27
    2ba2:	af 91       	pop	r26
    2ba4:	9f 91       	pop	r25
    2ba6:	8f 91       	pop	r24
    2ba8:	7f 91       	pop	r23
    2baa:	6f 91       	pop	r22
    2bac:	5f 91       	pop	r21
    2bae:	4f 91       	pop	r20
    2bb0:	3f 91       	pop	r19
    2bb2:	2f 91       	pop	r18
    2bb4:	0f 90       	pop	r0
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	0f 90       	pop	r0
    2bba:	1f 90       	pop	r1
    2bbc:	18 95       	reti

00002bbe <__vector_8>:
ISR(TIMER1_OVF_vect){
    2bbe:	1f 92       	push	r1
    2bc0:	0f 92       	push	r0
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	0f 92       	push	r0
    2bc6:	11 24       	eor	r1, r1
    2bc8:	2f 93       	push	r18
    2bca:	3f 93       	push	r19
    2bcc:	4f 93       	push	r20
    2bce:	5f 93       	push	r21
    2bd0:	6f 93       	push	r22
    2bd2:	7f 93       	push	r23
    2bd4:	8f 93       	push	r24
    2bd6:	9f 93       	push	r25
    2bd8:	af 93       	push	r26
    2bda:	bf 93       	push	r27
    2bdc:	ef 93       	push	r30
    2bde:	ff 93       	push	r31
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer1 != NULL_PTR)
    2be8:	80 91 7e 00 	lds	r24, 0x007E
    2bec:	90 91 7f 00 	lds	r25, 0x007F
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	29 f0       	breq	.+10     	; 0x2bfe <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2bf4:	e0 91 7e 00 	lds	r30, 0x007E
    2bf8:	f0 91 7f 00 	lds	r31, 0x007F
    2bfc:	09 95       	icall
	}

}
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	bf 91       	pop	r27
    2c08:	af 91       	pop	r26
    2c0a:	9f 91       	pop	r25
    2c0c:	8f 91       	pop	r24
    2c0e:	7f 91       	pop	r23
    2c10:	6f 91       	pop	r22
    2c12:	5f 91       	pop	r21
    2c14:	4f 91       	pop	r20
    2c16:	3f 91       	pop	r19
    2c18:	2f 91       	pop	r18
    2c1a:	0f 90       	pop	r0
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	0f 90       	pop	r0
    2c20:	1f 90       	pop	r1
    2c22:	18 95       	reti

00002c24 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	2f 93       	push	r18
    2c30:	3f 93       	push	r19
    2c32:	4f 93       	push	r20
    2c34:	5f 93       	push	r21
    2c36:	6f 93       	push	r22
    2c38:	7f 93       	push	r23
    2c3a:	8f 93       	push	r24
    2c3c:	9f 93       	push	r25
    2c3e:	af 93       	push	r26
    2c40:	bf 93       	push	r27
    2c42:	ef 93       	push	r30
    2c44:	ff 93       	push	r31
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer1 != NULL_PTR)
    2c4e:	80 91 7e 00 	lds	r24, 0x007E
    2c52:	90 91 7f 00 	lds	r25, 0x007F
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	29 f0       	breq	.+10     	; 0x2c64 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2c5a:	e0 91 7e 00 	lds	r30, 0x007E
    2c5e:	f0 91 7f 00 	lds	r31, 0x007F
    2c62:	09 95       	icall
	}

}
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	ff 91       	pop	r31
    2c6a:	ef 91       	pop	r30
    2c6c:	bf 91       	pop	r27
    2c6e:	af 91       	pop	r26
    2c70:	9f 91       	pop	r25
    2c72:	8f 91       	pop	r24
    2c74:	7f 91       	pop	r23
    2c76:	6f 91       	pop	r22
    2c78:	5f 91       	pop	r21
    2c7a:	4f 91       	pop	r20
    2c7c:	3f 91       	pop	r19
    2c7e:	2f 91       	pop	r18
    2c80:	0f 90       	pop	r0
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	0f 90       	pop	r0
    2c86:	1f 90       	pop	r1
    2c88:	18 95       	reti

00002c8a <__vector_4>:
ISR(TIMER2_OVF_vect){
    2c8a:	1f 92       	push	r1
    2c8c:	0f 92       	push	r0
    2c8e:	0f b6       	in	r0, 0x3f	; 63
    2c90:	0f 92       	push	r0
    2c92:	11 24       	eor	r1, r1
    2c94:	2f 93       	push	r18
    2c96:	3f 93       	push	r19
    2c98:	4f 93       	push	r20
    2c9a:	5f 93       	push	r21
    2c9c:	6f 93       	push	r22
    2c9e:	7f 93       	push	r23
    2ca0:	8f 93       	push	r24
    2ca2:	9f 93       	push	r25
    2ca4:	af 93       	push	r26
    2ca6:	bf 93       	push	r27
    2ca8:	ef 93       	push	r30
    2caa:	ff 93       	push	r31
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer2 != NULL_PTR)
    2cb4:	80 91 80 00 	lds	r24, 0x0080
    2cb8:	90 91 81 00 	lds	r25, 0x0081
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	29 f0       	breq	.+10     	; 0x2cca <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2cc0:	e0 91 80 00 	lds	r30, 0x0080
    2cc4:	f0 91 81 00 	lds	r31, 0x0081
    2cc8:	09 95       	icall
	}

}
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	ff 91       	pop	r31
    2cd0:	ef 91       	pop	r30
    2cd2:	bf 91       	pop	r27
    2cd4:	af 91       	pop	r26
    2cd6:	9f 91       	pop	r25
    2cd8:	8f 91       	pop	r24
    2cda:	7f 91       	pop	r23
    2cdc:	6f 91       	pop	r22
    2cde:	5f 91       	pop	r21
    2ce0:	4f 91       	pop	r20
    2ce2:	3f 91       	pop	r19
    2ce4:	2f 91       	pop	r18
    2ce6:	0f 90       	pop	r0
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	0f 90       	pop	r0
    2cec:	1f 90       	pop	r1
    2cee:	18 95       	reti

00002cf0 <__vector_3>:

ISR(TIMER2_COMP_vect){
    2cf0:	1f 92       	push	r1
    2cf2:	0f 92       	push	r0
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	0f 92       	push	r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	2f 93       	push	r18
    2cfc:	3f 93       	push	r19
    2cfe:	4f 93       	push	r20
    2d00:	5f 93       	push	r21
    2d02:	6f 93       	push	r22
    2d04:	7f 93       	push	r23
    2d06:	8f 93       	push	r24
    2d08:	9f 93       	push	r25
    2d0a:	af 93       	push	r26
    2d0c:	bf 93       	push	r27
    2d0e:	ef 93       	push	r30
    2d10:	ff 93       	push	r31
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr_Timer2 != NULL_PTR)
    2d1a:	80 91 80 00 	lds	r24, 0x0080
    2d1e:	90 91 81 00 	lds	r25, 0x0081
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	29 f0       	breq	.+10     	; 0x2d30 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after overflow occur*/
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2d26:	e0 91 80 00 	lds	r30, 0x0080
    2d2a:	f0 91 81 00 	lds	r31, 0x0081
    2d2e:	09 95       	icall
	}

}
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	ff 91       	pop	r31
    2d36:	ef 91       	pop	r30
    2d38:	bf 91       	pop	r27
    2d3a:	af 91       	pop	r26
    2d3c:	9f 91       	pop	r25
    2d3e:	8f 91       	pop	r24
    2d40:	7f 91       	pop	r23
    2d42:	6f 91       	pop	r22
    2d44:	5f 91       	pop	r21
    2d46:	4f 91       	pop	r20
    2d48:	3f 91       	pop	r19
    2d4a:	2f 91       	pop	r18
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	0f 90       	pop	r0
    2d52:	1f 90       	pop	r1
    2d54:	18 95       	reti

00002d56 <Timer_intit>:
 * 1.set required timer type (timer0,timer1,timer2)
 * 2. set required timer mode (overflow or compare )
 * 3. Set the required clock.
 * 4. set required Intial value.
 */
void Timer_intit(const Timer_ConfigType * Config_Ptr){
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	2a 97       	sbiw	r28, 0x0a	; 10
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	9a 83       	std	Y+2, r25	; 0x02
    2d6c:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_type){
    2d6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d70:	fa 81       	ldd	r31, Y+2	; 0x02
    2d72:	80 85       	ldd	r24, Z+8	; 0x08
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	3a 87       	std	Y+10, r19	; 0x0a
    2d7a:	29 87       	std	Y+9, r18	; 0x09
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	81 30       	cpi	r24, 0x01	; 1
    2d82:	91 05       	cpc	r25, r1
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <Timer_intit+0x32>
    2d86:	66 c0       	rjmp	.+204    	; 0x2e54 <Timer_intit+0xfe>
    2d88:	e9 85       	ldd	r30, Y+9	; 0x09
    2d8a:	fa 85       	ldd	r31, Y+10	; 0x0a
    2d8c:	e2 30       	cpi	r30, 0x02	; 2
    2d8e:	f1 05       	cpc	r31, r1
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <Timer_intit+0x3e>
    2d92:	c0 c0       	rjmp	.+384    	; 0x2f14 <Timer_intit+0x1be>
    2d94:	29 85       	ldd	r18, Y+9	; 0x09
    2d96:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d98:	21 15       	cp	r18, r1
    2d9a:	31 05       	cpc	r19, r1
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <Timer_intit+0x4a>
    2d9e:	12 c1       	rjmp	.+548    	; 0x2fc4 <Timer_intit+0x26e>
	case 0:
		/*choosing required timer0 mode*/
		switch(Config_Ptr->timer_mode){
    2da0:	e9 81       	ldd	r30, Y+1	; 0x01
    2da2:	fa 81       	ldd	r31, Y+2	; 0x02
    2da4:	82 85       	ldd	r24, Z+10	; 0x0a
    2da6:	e8 2f       	mov	r30, r24
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	f8 87       	std	Y+8, r31	; 0x08
    2dac:	ef 83       	std	Y+7, r30	; 0x07
    2dae:	2f 81       	ldd	r18, Y+7	; 0x07
    2db0:	38 85       	ldd	r19, Y+8	; 0x08
    2db2:	21 15       	cp	r18, r1
    2db4:	31 05       	cpc	r19, r1
    2db6:	31 f0       	breq	.+12     	; 0x2dc4 <Timer_intit+0x6e>
    2db8:	8f 81       	ldd	r24, Y+7	; 0x07
    2dba:	98 85       	ldd	r25, Y+8	; 0x08
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	01 f1       	breq	.+64     	; 0x2e02 <Timer_intit+0xac>
    2dc2:	00 c1       	rjmp	.+512    	; 0x2fc4 <Timer_intit+0x26e>
			/* Configure the timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. clock as required
			 */
			TCCR0 =(1<<FOC0);
    2dc4:	e3 e5       	ldi	r30, 0x53	; 83
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 e8       	ldi	r24, 0x80	; 128
    2dca:	80 83       	st	Z, r24
			TCCR0 =(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    2dcc:	a3 e5       	ldi	r26, 0x53	; 83
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e3 e5       	ldi	r30, 0x53	; 83
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	98 2f       	mov	r25, r24
    2dd8:	98 7f       	andi	r25, 0xF8	; 248
    2dda:	e9 81       	ldd	r30, Y+1	; 0x01
    2ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dde:	81 85       	ldd	r24, Z+9	; 0x09
    2de0:	89 2b       	or	r24, r25
    2de2:	8c 93       	st	X, r24
			/*Set Timer0 initial value as required*/
			TCNT0=Config_Ptr->Intial_value;
    2de4:	22 e5       	ldi	r18, 0x52	; 82
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dea:	fa 81       	ldd	r31, Y+2	; 0x02
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	a2 81       	ldd	r26, Z+2	; 0x02
    2df2:	b3 81       	ldd	r27, Z+3	; 0x03
    2df4:	f9 01       	movw	r30, r18
    2df6:	80 83       	st	Z, r24
			/*Enable Timer0 Overflow Interrupt*/
			TIMSK=(1<<TOIE0);
    2df8:	e9 e5       	ldi	r30, 0x59	; 89
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	80 83       	st	Z, r24
    2e00:	e1 c0       	rjmp	.+450    	; 0x2fc4 <Timer_intit+0x26e>
			/* Configure the timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. clock as required
			 */
			TCCR0 =(1<<FOC0)|(1<<WGM01);
    2e02:	e3 e5       	ldi	r30, 0x53	; 83
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	88 e8       	ldi	r24, 0x88	; 136
    2e08:	80 83       	st	Z, r24
			TCCR0 =(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    2e0a:	a3 e5       	ldi	r26, 0x53	; 83
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e3 e5       	ldi	r30, 0x53	; 83
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	98 2f       	mov	r25, r24
    2e16:	98 7f       	andi	r25, 0xF8	; 248
    2e18:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1c:	81 85       	ldd	r24, Z+9	; 0x09
    2e1e:	89 2b       	or	r24, r25
    2e20:	8c 93       	st	X, r24
			/*Set Timer0 initial value as required*/
			TCNT0=Config_Ptr->Intial_value;
    2e22:	22 e5       	ldi	r18, 0x52	; 82
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	e9 81       	ldd	r30, Y+1	; 0x01
    2e28:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2a:	80 81       	ld	r24, Z
    2e2c:	91 81       	ldd	r25, Z+1	; 0x01
    2e2e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e30:	b3 81       	ldd	r27, Z+3	; 0x03
    2e32:	f9 01       	movw	r30, r18
    2e34:	80 83       	st	Z, r24
			/*Set Timer0 Compare match as required*/
			OCR0=Config_Ptr->Comare_value;
    2e36:	2c e5       	ldi	r18, 0x5C	; 92
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3e:	84 81       	ldd	r24, Z+4	; 0x04
    2e40:	95 81       	ldd	r25, Z+5	; 0x05
    2e42:	a6 81       	ldd	r26, Z+6	; 0x06
    2e44:	b7 81       	ldd	r27, Z+7	; 0x07
    2e46:	f9 01       	movw	r30, r18
    2e48:	80 83       	st	Z, r24
			/*Enable Timer0 Compare match Interrupt*/
			TIMSK=(1<<OCIE0);
    2e4a:	e9 e5       	ldi	r30, 0x59	; 89
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	80 83       	st	Z, r24
    2e52:	b8 c0       	rjmp	.+368    	; 0x2fc4 <Timer_intit+0x26e>
			break;
		}
		break;
		case 1:
			/*choosing required timer0 mode*/
			switch(Config_Ptr->timer_mode){
    2e54:	e9 81       	ldd	r30, Y+1	; 0x01
    2e56:	fa 81       	ldd	r31, Y+2	; 0x02
    2e58:	82 85       	ldd	r24, Z+10	; 0x0a
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	3e 83       	std	Y+6, r19	; 0x06
    2e60:	2d 83       	std	Y+5, r18	; 0x05
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	31 f0       	breq	.+12     	; 0x2e76 <Timer_intit+0x120>
    2e6a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e6c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e6e:	e1 30       	cpi	r30, 0x01	; 1
    2e70:	f1 05       	cpc	r31, r1
    2e72:	09 f1       	breq	.+66     	; 0x2eb6 <Timer_intit+0x160>
    2e74:	a7 c0       	rjmp	.+334    	; 0x2fc4 <Timer_intit+0x26e>

				/* Configure the timer control register TCCR1A
				 * 1. Non PWM mode FOC1A=1 & FOC1B=1
				 * 2. Normal Mode WGM10=0 & WGM11=0
				 */
				TCCR1A=(1<<FOC1A) |(1<<FOC1B);
    2e76:	ef e4       	ldi	r30, 0x4F	; 79
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	8c e0       	ldi	r24, 0x0C	; 12
    2e7c:	80 83       	st	Z, r24
				/*Configure the timer control register TCCR1B
				 * 1. Normal Mode WGM12=0 & WGM13=0
				 * 2. clock as required CS12,CS11,CS10
				 */
				TCCR1B=(TCCR1B&0xf8)|(Config_Ptr->timer_clock);
    2e7e:	ae e4       	ldi	r26, 0x4E	; 78
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	ee e4       	ldi	r30, 0x4E	; 78
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	98 2f       	mov	r25, r24
    2e8a:	98 7f       	andi	r25, 0xF8	; 248
    2e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e90:	81 85       	ldd	r24, Z+9	; 0x09
    2e92:	89 2b       	or	r24, r25
    2e94:	8c 93       	st	X, r24
				/*Set Timer2 initial value as required*/
				TCNT1=Config_Ptr->Intial_value;
    2e96:	2c e4       	ldi	r18, 0x4C	; 76
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ea4:	b3 81       	ldd	r27, Z+3	; 0x03
    2ea6:	f9 01       	movw	r30, r18
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24

				/*Enable Timer1 Overflow Interrupt*/
				TIMSK=(1<<TOIE1);
    2eac:	e9 e5       	ldi	r30, 0x59	; 89
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	84 e0       	ldi	r24, 0x04	; 4
    2eb2:	80 83       	st	Z, r24
    2eb4:	87 c0       	rjmp	.+270    	; 0x2fc4 <Timer_intit+0x26e>
			case 1:/*Compare mode initialization*/
				/* Configure the timer control register TCCR1A
				 * 1. Non PWM mode FOC1A=1 & FOC1B=1
				 * 2. CTC Mode WGM10=0 & WGM11=0
				 */
				TCCR1A=(1<<FOC1A) |(1<<FOC1B);
    2eb6:	ef e4       	ldi	r30, 0x4F	; 79
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	8c e0       	ldi	r24, 0x0C	; 12
    2ebc:	80 83       	st	Z, r24
				/*Configure the timer control register TCCR1B
				 * 1. CTC Mode WGM12=1 & WGM13=0
				 * 2. clock as required CS12,CS11,CS10
				 */
				TCCR1B=(1<<WGM12);
    2ebe:	ee e4       	ldi	r30, 0x4E	; 78
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	88 e0       	ldi	r24, 0x08	; 8
    2ec4:	80 83       	st	Z, r24
				TCCR1B=(TCCR1B&0xf8)|(Config_Ptr->timer_clock);
    2ec6:	ae e4       	ldi	r26, 0x4E	; 78
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	ee e4       	ldi	r30, 0x4E	; 78
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	98 2f       	mov	r25, r24
    2ed2:	98 7f       	andi	r25, 0xF8	; 248
    2ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed8:	81 85       	ldd	r24, Z+9	; 0x09
    2eda:	89 2b       	or	r24, r25
    2edc:	8c 93       	st	X, r24
				/*Set Timer1 initial value as required*/
				TCNT1=Config_Ptr->Intial_value;
    2ede:	2c e4       	ldi	r18, 0x4C	; 76
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee6:	80 81       	ld	r24, Z
    2ee8:	91 81       	ldd	r25, Z+1	; 0x01
    2eea:	a2 81       	ldd	r26, Z+2	; 0x02
    2eec:	b3 81       	ldd	r27, Z+3	; 0x03
    2eee:	f9 01       	movw	r30, r18
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
				/*Set Timer1 Compare match as required*/
				OCR1A=Config_Ptr->Comare_value;
    2ef4:	2a e4       	ldi	r18, 0x4A	; 74
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    2efa:	fa 81       	ldd	r31, Y+2	; 0x02
    2efc:	84 81       	ldd	r24, Z+4	; 0x04
    2efe:	95 81       	ldd	r25, Z+5	; 0x05
    2f00:	a6 81       	ldd	r26, Z+6	; 0x06
    2f02:	b7 81       	ldd	r27, Z+7	; 0x07
    2f04:	f9 01       	movw	r30, r18
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	80 83       	st	Z, r24
				/*Enable Timer1 Compare match Interrupt*/
				TIMSK=(1<<OCIE1A);
    2f0a:	e9 e5       	ldi	r30, 0x59	; 89
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 e1       	ldi	r24, 0x10	; 16
    2f10:	80 83       	st	Z, r24
    2f12:	58 c0       	rjmp	.+176    	; 0x2fc4 <Timer_intit+0x26e>
				break;
			}
			break;
			case 2:
				/*choosing required timer2 mode*/
				switch(Config_Ptr->timer_mode){
    2f14:	e9 81       	ldd	r30, Y+1	; 0x01
    2f16:	fa 81       	ldd	r31, Y+2	; 0x02
    2f18:	82 85       	ldd	r24, Z+10	; 0x0a
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	3c 83       	std	Y+4, r19	; 0x04
    2f20:	2b 83       	std	Y+3, r18	; 0x03
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	31 f0       	breq	.+12     	; 0x2f36 <Timer_intit+0x1e0>
    2f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f2e:	e1 30       	cpi	r30, 0x01	; 1
    2f30:	f1 05       	cpc	r31, r1
    2f32:	01 f1       	breq	.+64     	; 0x2f74 <Timer_intit+0x21e>
    2f34:	47 c0       	rjmp	.+142    	; 0x2fc4 <Timer_intit+0x26e>
					/* Configure the timer control register TCCR2
					 * 1. Non PWM mode FOC2=1
					 * 2. Normal Mode WGM20=0 & WGM21=0
					 * 3. clock as required CS20,CS21,CS22
					 */
					TCCR2=(1<<FOC2);
    2f36:	e5 e4       	ldi	r30, 0x45	; 69
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 e8       	ldi	r24, 0x80	; 128
    2f3c:	80 83       	st	Z, r24
					TCCR2=(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    2f3e:	a5 e4       	ldi	r26, 0x45	; 69
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e3 e5       	ldi	r30, 0x53	; 83
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	98 2f       	mov	r25, r24
    2f4a:	98 7f       	andi	r25, 0xF8	; 248
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	81 85       	ldd	r24, Z+9	; 0x09
    2f52:	89 2b       	or	r24, r25
    2f54:	8c 93       	st	X, r24
					/*Set Timer2 initial value as required*/
					TCNT2=Config_Ptr->Intial_value;
    2f56:	24 e4       	ldi	r18, 0x44	; 68
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f5e:	80 81       	ld	r24, Z
    2f60:	91 81       	ldd	r25, Z+1	; 0x01
    2f62:	a2 81       	ldd	r26, Z+2	; 0x02
    2f64:	b3 81       	ldd	r27, Z+3	; 0x03
    2f66:	f9 01       	movw	r30, r18
    2f68:	80 83       	st	Z, r24
					/*Enable Timer1 Overflow Interrupt*/
					TIMSK=(1<<TOIE2);
    2f6a:	e9 e5       	ldi	r30, 0x59	; 89
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 e4       	ldi	r24, 0x40	; 64
    2f70:	80 83       	st	Z, r24
    2f72:	28 c0       	rjmp	.+80     	; 0x2fc4 <Timer_intit+0x26e>
					/* Configure the timer control register TCCR2
					 * 1. Non PWM mode FOC2=1
					 * 2. CTC Mode WGM20=0 & WGM21=1
					 * 3. clock as required CS20,CS21,CS22
					 */
					TCCR2=(1<<FOC2)|(1<<WGM21);
    2f74:	e5 e4       	ldi	r30, 0x45	; 69
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	88 e8       	ldi	r24, 0x88	; 136
    2f7a:	80 83       	st	Z, r24
					TCCR2=(TCCR0 & 0xf8) | (Config_Ptr->timer_clock);
    2f7c:	a5 e4       	ldi	r26, 0x45	; 69
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e3 e5       	ldi	r30, 0x53	; 83
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	98 2f       	mov	r25, r24
    2f88:	98 7f       	andi	r25, 0xF8	; 248
    2f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8e:	81 85       	ldd	r24, Z+9	; 0x09
    2f90:	89 2b       	or	r24, r25
    2f92:	8c 93       	st	X, r24
					/*Set Timer2 initial value as required*/
					TCNT2=Config_Ptr->Intial_value;
    2f94:	24 e4       	ldi	r18, 0x44	; 68
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9c:	80 81       	ld	r24, Z
    2f9e:	91 81       	ldd	r25, Z+1	; 0x01
    2fa0:	a2 81       	ldd	r26, Z+2	; 0x02
    2fa2:	b3 81       	ldd	r27, Z+3	; 0x03
    2fa4:	f9 01       	movw	r30, r18
    2fa6:	80 83       	st	Z, r24
					/*Set Timer2 Compare match as required*/
					OCR2=Config_Ptr->Comare_value;
    2fa8:	23 e4       	ldi	r18, 0x43	; 67
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	e9 81       	ldd	r30, Y+1	; 0x01
    2fae:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb0:	84 81       	ldd	r24, Z+4	; 0x04
    2fb2:	95 81       	ldd	r25, Z+5	; 0x05
    2fb4:	a6 81       	ldd	r26, Z+6	; 0x06
    2fb6:	b7 81       	ldd	r27, Z+7	; 0x07
    2fb8:	f9 01       	movw	r30, r18
    2fba:	80 83       	st	Z, r24
					/*Enable Timer2 Compare match Interrupt*/
					TIMSK=(1<<OCIE2);
    2fbc:	e9 e5       	ldi	r30, 0x59	; 89
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 e8       	ldi	r24, 0x80	; 128
    2fc2:	80 83       	st	Z, r24
					break;
				}
				break;
	}
}
    2fc4:	2a 96       	adiw	r28, 0x0a	; 10
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <Timer_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(void(*a_ptr)(void),Timer_Type timer_Type){
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <Timer_setCallBack+0x6>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <Timer_setCallBack+0x8>
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_Type){
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	3d 83       	std	Y+5, r19	; 0x05
    2ff2:	2c 83       	std	Y+4, r18	; 0x04
    2ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff8:	81 30       	cpi	r24, 0x01	; 1
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	81 f0       	breq	.+32     	; 0x301e <Timer_setCallBack+0x48>
    2ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    3000:	3d 81       	ldd	r19, Y+5	; 0x05
    3002:	22 30       	cpi	r18, 0x02	; 2
    3004:	31 05       	cpc	r19, r1
    3006:	91 f0       	breq	.+36     	; 0x302c <Timer_setCallBack+0x56>
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	9d 81       	ldd	r25, Y+5	; 0x05
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	a1 f4       	brne	.+40     	; 0x3038 <Timer_setCallBack+0x62>
	case 0:/*timer 0*/
		g_callBackPtr_Timer0=a_ptr;
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	90 93 7d 00 	sts	0x007D, r25
    3018:	80 93 7c 00 	sts	0x007C, r24
    301c:	0d c0       	rjmp	.+26     	; 0x3038 <Timer_setCallBack+0x62>
		break;
	case 1:/*timer 1*/
		g_callBackPtr_Timer1=a_ptr;
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	90 93 7f 00 	sts	0x007F, r25
    3026:	80 93 7e 00 	sts	0x007E, r24
    302a:	06 c0       	rjmp	.+12     	; 0x3038 <Timer_setCallBack+0x62>
		break;
	case 2:/*timer 2*/
		g_callBackPtr_Timer2=a_ptr;
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	90 93 81 00 	sts	0x0081, r25
    3034:	80 93 80 00 	sts	0x0080, r24
		break;
	}
}
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <Timer_deInit>:
/*Description:Function to DeInit the timer */
void Timer_deInit(Timer_Type timer_Type){
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	00 d0       	rcall	.+0      	; 0x304e <Timer_deInit+0x6>
    304e:	0f 92       	push	r0
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_Type){
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	3b 83       	std	Y+3, r19	; 0x03
    305e:	2a 83       	std	Y+2, r18	; 0x02
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	9b 81       	ldd	r25, Y+3	; 0x03
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	91 05       	cpc	r25, r1
    3068:	f1 f0       	breq	.+60     	; 0x30a6 <Timer_deInit+0x5e>
    306a:	2a 81       	ldd	r18, Y+2	; 0x02
    306c:	3b 81       	ldd	r19, Y+3	; 0x03
    306e:	22 30       	cpi	r18, 0x02	; 2
    3070:	31 05       	cpc	r19, r1
    3072:	79 f1       	breq	.+94     	; 0x30d2 <Timer_deInit+0x8a>
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	9b 81       	ldd	r25, Y+3	; 0x03
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	d9 f5       	brne	.+118    	; 0x30f2 <Timer_deInit+0xaa>
	case 0:/*timer 0*/
		/* Clear All Timer0 Registers */
		TCCR0 = 0;
    307c:	e3 e5       	ldi	r30, 0x53	; 83
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	10 82       	st	Z, r1
		TCNT0 = 0;
    3082:	e2 e5       	ldi	r30, 0x52	; 82
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	10 82       	st	Z, r1
		OCR0=0;
    3088:	ec e5       	ldi	r30, 0x5C	; 92
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	10 82       	st	Z, r1
		ICR1 = 0;
    308e:	e6 e4       	ldi	r30, 0x46	; 70
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	11 82       	std	Z+1, r1	; 0x01
    3094:	10 82       	st	Z, r1

		/* Disable the Timer0 interrupt */
		TIMSK &=~(1<<TOIE0)&~(1<<OCIE0);
    3096:	a9 e5       	ldi	r26, 0x59	; 89
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e9 e5       	ldi	r30, 0x59	; 89
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	8c 7f       	andi	r24, 0xFC	; 252
    30a2:	8c 93       	st	X, r24
    30a4:	26 c0       	rjmp	.+76     	; 0x30f2 <Timer_deInit+0xaa>
		break;
	case 1:/*timer 1*/
		/* Clear All Timer1Registers */
		TCNT1=0;
    30a6:	ec e4       	ldi	r30, 0x4C	; 76
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	11 82       	std	Z+1, r1	; 0x01
    30ac:	10 82       	st	Z, r1
		TCCR1A=0;
    30ae:	ef e4       	ldi	r30, 0x4F	; 79
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	10 82       	st	Z, r1
		TCCR1B=0;
    30b4:	ee e4       	ldi	r30, 0x4E	; 78
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	10 82       	st	Z, r1
		OCR1A=0;
    30ba:	ea e4       	ldi	r30, 0x4A	; 74
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	11 82       	std	Z+1, r1	; 0x01
    30c0:	10 82       	st	Z, r1
		/* Disable the Timer1 interrupt */
		TIMSK &=~(1<<TOIE1)&~(1<<OCIE1A);
    30c2:	a9 e5       	ldi	r26, 0x59	; 89
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e9 e5       	ldi	r30, 0x59	; 89
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	8b 7e       	andi	r24, 0xEB	; 235
    30ce:	8c 93       	st	X, r24
    30d0:	10 c0       	rjmp	.+32     	; 0x30f2 <Timer_deInit+0xaa>
		break;
	case 2:/*timer 2*/
		/* Clear All Timer2 Registers */
		TCCR2=0;
    30d2:	e5 e4       	ldi	r30, 0x45	; 69
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	10 82       	st	Z, r1
		TCNT2 = 0;
    30d8:	e4 e4       	ldi	r30, 0x44	; 68
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	10 82       	st	Z, r1
		OCR0=0;
    30de:	ec e5       	ldi	r30, 0x5C	; 92
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	10 82       	st	Z, r1
		/* Disable the Timer2 interrupt */
		TIMSK&=~(1<<TOIE2) &~(1<<OCIE2);
    30e4:	a9 e5       	ldi	r26, 0x59	; 89
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e9 e5       	ldi	r30, 0x59	; 89
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	8f 73       	andi	r24, 0x3F	; 63
    30f0:	8c 93       	st	X, r24
		break;
	}
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	00 d0       	rcall	.+0      	; 0x3104 <UART_init+0x6>
    3104:	00 d0       	rcall	.+0      	; 0x3106 <UART_init+0x8>
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	9c 83       	std	Y+4, r25	; 0x04
    310c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    310e:	1a 82       	std	Y+2, r1	; 0x02
    3110:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3112:	eb e2       	ldi	r30, 0x2B	; 43
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    311a:	ea e2       	ldi	r30, 0x2A	; 42
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	88 e1       	ldi	r24, 0x18	; 24
    3120:	80 83       	st	Z, r24
	 * UPM1:0  parity mode set as required
	 * USBS    stop bit select set as required
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    3122:	e0 e4       	ldi	r30, 0x40	; 64
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 e8       	ldi	r24, 0x80	; 128
    3128:	80 83       	st	Z, r24
	/*select required parity mode*/
	UCSRC=(UCSRC&0xcf) |(Config_Ptr->parity_mode<<4);
    312a:	a0 e4       	ldi	r26, 0x40	; 64
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	e0 e4       	ldi	r30, 0x40	; 64
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	28 2f       	mov	r18, r24
    3136:	2f 7c       	andi	r18, 0xCF	; 207
    3138:	eb 81       	ldd	r30, Y+3	; 0x03
    313a:	fc 81       	ldd	r31, Y+4	; 0x04
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	82 95       	swap	r24
    3144:	92 95       	swap	r25
    3146:	90 7f       	andi	r25, 0xF0	; 240
    3148:	98 27       	eor	r25, r24
    314a:	80 7f       	andi	r24, 0xF0	; 240
    314c:	98 27       	eor	r25, r24
    314e:	82 2b       	or	r24, r18
    3150:	8c 93       	st	X, r24
	/*select required number of data bit*/
	UCSRC=(UCSRC&0xf9)| ((Config_Ptr->numer_of_data_bit)<<1);
    3152:	a0 e4       	ldi	r26, 0x40	; 64
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e0 e4       	ldi	r30, 0x40	; 64
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	28 2f       	mov	r18, r24
    315e:	29 7f       	andi	r18, 0xF9	; 249
    3160:	eb 81       	ldd	r30, Y+3	; 0x03
    3162:	fc 81       	ldd	r31, Y+4	; 0x04
    3164:	81 81       	ldd	r24, Z+1	; 0x01
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	82 2b       	or	r24, r18
    3170:	8c 93       	st	X, r24
	/*select required number of stop bit*/
	UCSRC=(UCSRC&0xf7)|(Config_Ptr->numer_of_stop_bit<<3);
    3172:	a0 e4       	ldi	r26, 0x40	; 64
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e0 e4       	ldi	r30, 0x40	; 64
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	28 2f       	mov	r18, r24
    317e:	27 7f       	andi	r18, 0xF7	; 247
    3180:	eb 81       	ldd	r30, Y+3	; 0x03
    3182:	fc 81       	ldd	r31, Y+4	; 0x04
    3184:	80 81       	ld	r24, Z
    3186:	88 2f       	mov	r24, r24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	82 2b       	or	r24, r18
    3198:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (BUAD_RATE * 8UL))) - 1);
    319a:	87 e6       	ldi	r24, 0x67	; 103
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    31a2:	e0 e4       	ldi	r30, 0x40	; 64
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	89 2f       	mov	r24, r25
    31ac:	99 27       	eor	r25, r25
    31ae:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    31b0:	e9 e2       	ldi	r30, 0x29	; 41
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	80 83       	st	Z, r24
}
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	0f 92       	push	r0
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
    31d0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31d2:	eb e2       	ldi	r30, 0x2B	; 43
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	88 2f       	mov	r24, r24
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	80 72       	andi	r24, 0x20	; 32
    31de:	90 70       	andi	r25, 0x00	; 0
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	b9 f3       	breq	.-18     	; 0x31d2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    31e4:	ec e2       	ldi	r30, 0x2C	; 44
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    31ec:	0f 90       	pop	r0
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    31fc:	eb e2       	ldi	r30, 0x2B	; 43
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	88 23       	and	r24, r24
    3204:	dc f7       	brge	.-10     	; 0x31fc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3206:	ec e2       	ldi	r30, 0x2C	; 44
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
}
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	00 d0       	rcall	.+0      	; 0x3218 <UART_sendString+0x6>
    3218:	0f 92       	push	r0
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	9b 83       	std	Y+3, r25	; 0x03
    3220:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3222:	19 82       	std	Y+1, r1	; 0x01
    3224:	0e c0       	rjmp	.+28     	; 0x3242 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	9b 81       	ldd	r25, Y+3	; 0x03
    3230:	fc 01       	movw	r30, r24
    3232:	e2 0f       	add	r30, r18
    3234:	f3 1f       	adc	r31, r19
    3236:	80 81       	ld	r24, Z
    3238:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <UART_sendByte>
		i++;
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	8f 5f       	subi	r24, 0xFF	; 255
    3240:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	9b 81       	ldd	r25, Y+3	; 0x03
    324c:	fc 01       	movw	r30, r24
    324e:	e2 0f       	add	r30, r18
    3250:	f3 1f       	adc	r31, r19
    3252:	80 81       	ld	r24, Z
    3254:	88 23       	and	r24, r24
    3256:	39 f7       	brne	.-50     	; 0x3226 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	df 93       	push	r29
    326a:	cf 93       	push	r28
    326c:	00 d0       	rcall	.+0      	; 0x326e <UART_receiveString+0xa>
    326e:	0f 92       	push	r0
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	9b 83       	std	Y+3, r25	; 0x03
    3276:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3278:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	9b 81       	ldd	r25, Y+3	; 0x03
    3284:	8c 01       	movw	r16, r24
    3286:	02 0f       	add	r16, r18
    3288:	13 1f       	adc	r17, r19
    328a:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    328e:	f8 01       	movw	r30, r16
    3290:	80 83       	st	Z, r24
    3292:	0f c0       	rjmp	.+30     	; 0x32b2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	8f 5f       	subi	r24, 0xFF	; 255
    3298:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	28 2f       	mov	r18, r24
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	9b 81       	ldd	r25, Y+3	; 0x03
    32a4:	8c 01       	movw	r16, r24
    32a6:	02 0f       	add	r16, r18
    32a8:	13 1f       	adc	r17, r19
    32aa:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <UART_recieveByte>
    32ae:	f8 01       	movw	r30, r16
    32b0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ba:	9b 81       	ldd	r25, Y+3	; 0x03
    32bc:	fc 01       	movw	r30, r24
    32be:	e2 0f       	add	r30, r18
    32c0:	f3 1f       	adc	r31, r19
    32c2:	80 81       	ld	r24, Z
    32c4:	83 32       	cpi	r24, 0x23	; 35
    32c6:	31 f7       	brne	.-52     	; 0x3294 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    32c8:	89 81       	ldd	r24, Y+1	; 0x01
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	9b 81       	ldd	r25, Y+3	; 0x03
    32d2:	fc 01       	movw	r30, r24
    32d4:	e2 0f       	add	r30, r18
    32d6:	f3 1f       	adc	r31, r19
    32d8:	10 82       	st	Z, r1
}
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	08 95       	ret

000032ea <__prologue_saves__>:
    32ea:	2f 92       	push	r2
    32ec:	3f 92       	push	r3
    32ee:	4f 92       	push	r4
    32f0:	5f 92       	push	r5
    32f2:	6f 92       	push	r6
    32f4:	7f 92       	push	r7
    32f6:	8f 92       	push	r8
    32f8:	9f 92       	push	r9
    32fa:	af 92       	push	r10
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	ca 1b       	sub	r28, r26
    3314:	db 0b       	sbc	r29, r27
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	09 94       	ijmp

00003322 <__epilogue_restores__>:
    3322:	2a 88       	ldd	r2, Y+18	; 0x12
    3324:	39 88       	ldd	r3, Y+17	; 0x11
    3326:	48 88       	ldd	r4, Y+16	; 0x10
    3328:	5f 84       	ldd	r5, Y+15	; 0x0f
    332a:	6e 84       	ldd	r6, Y+14	; 0x0e
    332c:	7d 84       	ldd	r7, Y+13	; 0x0d
    332e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3330:	9b 84       	ldd	r9, Y+11	; 0x0b
    3332:	aa 84       	ldd	r10, Y+10	; 0x0a
    3334:	b9 84       	ldd	r11, Y+9	; 0x09
    3336:	c8 84       	ldd	r12, Y+8	; 0x08
    3338:	df 80       	ldd	r13, Y+7	; 0x07
    333a:	ee 80       	ldd	r14, Y+6	; 0x06
    333c:	fd 80       	ldd	r15, Y+5	; 0x05
    333e:	0c 81       	ldd	r16, Y+4	; 0x04
    3340:	1b 81       	ldd	r17, Y+3	; 0x03
    3342:	aa 81       	ldd	r26, Y+2	; 0x02
    3344:	b9 81       	ldd	r27, Y+1	; 0x01
    3346:	ce 0f       	add	r28, r30
    3348:	d1 1d       	adc	r29, r1
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	ed 01       	movw	r28, r26
    3356:	08 95       	ret

00003358 <itoa>:
    3358:	fb 01       	movw	r30, r22
    335a:	9f 01       	movw	r18, r30
    335c:	e8 94       	clt
    335e:	42 30       	cpi	r20, 0x02	; 2
    3360:	c4 f0       	brlt	.+48     	; 0x3392 <itoa+0x3a>
    3362:	45 32       	cpi	r20, 0x25	; 37
    3364:	b4 f4       	brge	.+44     	; 0x3392 <itoa+0x3a>
    3366:	4a 30       	cpi	r20, 0x0A	; 10
    3368:	29 f4       	brne	.+10     	; 0x3374 <itoa+0x1c>
    336a:	97 fb       	bst	r25, 7
    336c:	1e f4       	brtc	.+6      	; 0x3374 <itoa+0x1c>
    336e:	90 95       	com	r25
    3370:	81 95       	neg	r24
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	64 2f       	mov	r22, r20
    3376:	77 27       	eor	r23, r23
    3378:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__udivmodhi4>
    337c:	80 5d       	subi	r24, 0xD0	; 208
    337e:	8a 33       	cpi	r24, 0x3A	; 58
    3380:	0c f0       	brlt	.+2      	; 0x3384 <itoa+0x2c>
    3382:	89 5d       	subi	r24, 0xD9	; 217
    3384:	81 93       	st	Z+, r24
    3386:	cb 01       	movw	r24, r22
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	a1 f7       	brne	.-24     	; 0x3374 <itoa+0x1c>
    338c:	16 f4       	brtc	.+4      	; 0x3392 <itoa+0x3a>
    338e:	5d e2       	ldi	r21, 0x2D	; 45
    3390:	51 93       	st	Z+, r21
    3392:	10 82       	st	Z, r1
    3394:	c9 01       	movw	r24, r18
    3396:	0c 94 cd 19 	jmp	0x339a	; 0x339a <strrev>

0000339a <strrev>:
    339a:	dc 01       	movw	r26, r24
    339c:	fc 01       	movw	r30, r24
    339e:	67 2f       	mov	r22, r23
    33a0:	71 91       	ld	r23, Z+
    33a2:	77 23       	and	r23, r23
    33a4:	e1 f7       	brne	.-8      	; 0x339e <strrev+0x4>
    33a6:	32 97       	sbiw	r30, 0x02	; 2
    33a8:	04 c0       	rjmp	.+8      	; 0x33b2 <strrev+0x18>
    33aa:	7c 91       	ld	r23, X
    33ac:	6d 93       	st	X+, r22
    33ae:	70 83       	st	Z, r23
    33b0:	62 91       	ld	r22, -Z
    33b2:	ae 17       	cp	r26, r30
    33b4:	bf 07       	cpc	r27, r31
    33b6:	c8 f3       	brcs	.-14     	; 0x33aa <strrev+0x10>
    33b8:	08 95       	ret

000033ba <__udivmodhi4>:
    33ba:	aa 1b       	sub	r26, r26
    33bc:	bb 1b       	sub	r27, r27
    33be:	51 e1       	ldi	r21, 0x11	; 17
    33c0:	07 c0       	rjmp	.+14     	; 0x33d0 <__udivmodhi4_ep>

000033c2 <__udivmodhi4_loop>:
    33c2:	aa 1f       	adc	r26, r26
    33c4:	bb 1f       	adc	r27, r27
    33c6:	a6 17       	cp	r26, r22
    33c8:	b7 07       	cpc	r27, r23
    33ca:	10 f0       	brcs	.+4      	; 0x33d0 <__udivmodhi4_ep>
    33cc:	a6 1b       	sub	r26, r22
    33ce:	b7 0b       	sbc	r27, r23

000033d0 <__udivmodhi4_ep>:
    33d0:	88 1f       	adc	r24, r24
    33d2:	99 1f       	adc	r25, r25
    33d4:	5a 95       	dec	r21
    33d6:	a9 f7       	brne	.-22     	; 0x33c2 <__udivmodhi4_loop>
    33d8:	80 95       	com	r24
    33da:	90 95       	com	r25
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	08 95       	ret

000033e2 <_exit>:
    33e2:	f8 94       	cli

000033e4 <__stop_program>:
    33e4:	ff cf       	rjmp	.-2      	; 0x33e4 <__stop_program>
